{
  "address": "0xC0751a70d0fE959591017B71cF25f6f230E6f2Ff",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGEMANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeConfigVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenIDs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "result",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getMaxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getPoolConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "metaswap",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenAddress",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenAddress",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenByEVMAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenAddress",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenByID",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenAddress",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "getUnderlyingToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tokenAddress",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "hasUnderlyingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "isTokenIDExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "metaswap",
          "type": "bool"
        }
      ],
      "name": "setPoolConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "metaswap",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfigV3.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasUnderlying",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isUnderlying",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenAddress",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasUnderlying",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isUnderlying",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5beb8b3f085472534d9e24c5b8292c44a5ac750a71e63cb57ef016ab0a6b12e5",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xC0751a70d0fE959591017B71cF25f6f230E6f2Ff",
    "transactionIndex": 18,
    "gasUsed": "2491916",
    "logsBloom": "0x
    "blockHash": "0x8db21ccef56e30c55782fb88d7fa245c0aabeccf1075b4f73818adb53dd1e545",
    "transactionHash": "0x5beb8b3f085472534d9e24c5b8292c44a5ac750a71e63cb57ef016ab0a6b12e5",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 8407077,
        "transactionHash": "0x5beb8b3f085472534d9e24c5b8292c44a5ac750a71e63cb57ef016ab0a6b12e5",
        "address": "0xC0751a70d0fE959591017B71cF25f6f230E6f2Ff",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x8db21ccef56e30c55782fb88d7fa245c0aabeccf1075b4f73818adb53dd1e545"
      }
    ],
    "blockNumber": 8407077,
    "cumulativeGasUsed": "5437394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bb6523bae5307469530d9badcb427ea9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGEMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeConfigVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenIDs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"result\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"metaswap\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenByEVMAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenByID\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"hasUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"isTokenIDExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"metaswap\",\"type\":\"bool\"}],\"name\":\"setPoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"metaswap\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfigV3.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenAddress\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateSwapFee(address,uint256,uint256)\":{\"details\":\"This means the fee should be calculated based on the chain that the nodes emit a tx on\",\"params\":{\"amount\":\"in native token decimals\",\"chainID\":\"destination chain ID to query the token config for\",\"tokenAddress\":\"address of the destination token to query token config for\"},\"returns\":{\"_0\":\"Fee calculated in token decimals\"}},\"calculateSwapFee(string,uint256,uint256)\":{\"details\":\"This means the fee should be calculated based on the chain that the nodes emit a tx on\",\"params\":{\"amount\":\"in native token decimals\",\"chainID\":\"destination chain ID to query the token config for\",\"tokenAddress\":\"address of the destination token to query token config for\"},\"returns\":{\"_0\":\"Fee calculated in token decimals\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getToken(string,uint256)\":{\"params\":{\"chainID\":\"Chain ID of which token address + config to get\",\"tokenID\":\"String input of the token ID for the token\"}},\"getTokenByAddress(string,uint256)\":{\"params\":{\"chainID\":\"Chain ID of which token to get config for\",\"tokenAddress\":\"Matches the token ID by using a combo of address + chain ID\"}},\"getTokenByID(string,uint256)\":{\"params\":{\"chainID\":\"Chain ID of which token address + config to get\",\"tokenID\":\"String input of the token ID for the token\"}},\"getTokenID(address,uint256)\":{\"params\":{\"chainID\":\"chainID of which to get token ID for\",\"tokenAddress\":\"address of token to get ID for\"}},\"getUnderlyingToken(string)\":{\"params\":{\"tokenID\":\"string token ID\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasUnderlyingToken(string)\":{\"params\":{\"tokenID\":\"String to check if it is a withdraw/underlying token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"params\":{\"chainID\":\"chain ID to use for the token config object\",\"hasUnderlying\":\"bool which represents whether this is a global mint token or one to withdraw()\",\"isUnderlying\":\"bool which represents if this token is the one to withdraw on the given chain\",\"maxSwap\":\"maximum amount of token allowed to be transferred at once - in native token decimals\",\"maxSwapFee\":\"max swap fee to be charged - in native token decimals\",\"minSwap\":\"minimum amount of token needed to be transferred at once - in native token decimals\",\"minSwapFee\":\"min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\",\"swapFee\":\"percent based swap fee -- 10e6 == 10bps\",\"tokenAddress\":\"token address of the token on the given chain\",\"tokenDecimals\":\"decimals of token\",\"tokenID\":\"string ID to set the token config object form\"}},\"setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"params\":{\"chainID\":\"chain ID to use for the token config object\",\"hasUnderlying\":\"bool which represents whether this is a global mint token or one to withdraw()\",\"isUnderlying\":\"bool which represents if this token is the one to withdraw on the given chain\",\"maxSwap\":\"maximum amount of token allowed to be transferred at once - in native token decimals\",\"maxSwapFee\":\"max swap fee to be charged - in native token decimals\",\"minSwap\":\"minimum amount of token needed to be transferred at once - in native token decimals\",\"minSwapFee\":\"min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\",\"swapFee\":\"percent based swap fee -- 10e6 == 10bps\",\"tokenAddress\":\"token address of the token on the given chain\",\"tokenDecimals\":\"decimals of token\",\"tokenID\":\"string ID to set the token config object form\"}}},\"title\":\"BridgeConfig contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateSwapFee(address,uint256,uint256)\":{\"notice\":\"Calculates bridge swap fee based on the destination chain's token transfer.\"},\"calculateSwapFee(string,uint256,uint256)\":{\"notice\":\"Calculates bridge swap fee based on the destination chain's token transfer.\"},\"getAllTokenIDs()\":{\"notice\":\"Returns a list of all existing token IDs converted to strings\"},\"getMaxGasPrice(uint256)\":{\"notice\":\"gets the max gas price for a chain\"},\"getToken(string,uint256)\":{\"notice\":\"Returns the full token config struct\"},\"getTokenByAddress(string,uint256)\":{\"notice\":\"Returns token config struct, given an address and chainID\"},\"getTokenByID(string,uint256)\":{\"notice\":\"Returns the full token config struct\"},\"getTokenID(address,uint256)\":{\"notice\":\"Returns the token ID (string) of the cross-chain token inputted\"},\"getUnderlyingToken(string)\":{\"notice\":\"Returns which token is the underlying token to withdraw\"},\"hasUnderlyingToken(string)\":{\"notice\":\"Returns true if the token has an underlying token -- meaning the token is deposited into the bridge\"},\"isTokenIDExist(string)\":{\"notice\":\"Public function returning if token ID exists given a string\"},\"setMaxGasPrice(uint256,uint256)\":{\"notice\":\"sets the max gas price for a chain\"},\"setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"notice\":\"Main write function of this contract - Handles creating the struct and passing it to the internal logic function\"},\"setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"notice\":\"Main write function of this contract - Handles creating the struct and passing it to the internal logic function\"}},\"notice\":\"This token is used for configuring different tokens on the bridge and mapping them across chains.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BridgeConfigV3.sol\":\"BridgeConfigV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/bridge/BridgeConfigV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title BridgeConfig contract\\n * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.\\n **/\\n\\ncontract BridgeConfigV3 is AccessControl {\\n    using SafeMath for uint256;\\n    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256(\\\"BRIDGEMANAGER_ROLE\\\");\\n    bytes32[] private _allTokenIDs;\\n    mapping(bytes32 => Token[]) private _allTokens; // key is tokenID\\n    mapping(uint256 => mapping(string => bytes32)) private _tokenIDMap; // key is chainID,tokenAddress\\n    mapping(bytes32 => mapping(uint256 => Token)) private _tokens; // key is tokenID,chainID\\n    mapping(address => mapping(uint256 => Pool)) private _pool; // key is tokenAddress,chainID\\n    mapping(uint256 => uint256) private _maxGasPrice; // key is tokenID,chainID\\n    uint256 public constant bridgeConfigVersion = 3;\\n\\n    // the denominator used to calculate fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // this struct must be initialized using setTokenConfig for each token that directly interacts with the bridge\\n    struct Token {\\n        uint256 chainId;\\n        string tokenAddress;\\n        uint8 tokenDecimals;\\n        uint256 maxSwap;\\n        uint256 minSwap;\\n        uint256 swapFee;\\n        uint256 maxSwapFee;\\n        uint256 minSwapFee;\\n        bool hasUnderlying;\\n        bool isUnderlying;\\n    }\\n\\n    struct Pool {\\n        address tokenAddress;\\n        uint256 chainId;\\n        address poolAddress;\\n        bool metaswap;\\n    }\\n\\n    constructor() public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all existing token IDs converted to strings\\n     */\\n    function getAllTokenIDs() public view returns (string[] memory result) {\\n        uint256 length = _allTokenIDs.length;\\n        result = new string[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            result[i] = toString(_allTokenIDs[i]);\\n        }\\n    }\\n\\n    function _getTokenID(string memory tokenAddress, uint256 chainID) internal view returns (string memory) {\\n        return toString(_tokenIDMap[chainID][tokenAddress]);\\n    }\\n\\n    function getTokenID(string memory tokenAddress, uint256 chainID) public view returns (string memory) {\\n        return _getTokenID(_toLower(tokenAddress), chainID);\\n    }\\n\\n    /**\\n     * @notice Returns the token ID (string) of the cross-chain token inputted\\n     * @param tokenAddress address of token to get ID for\\n     * @param chainID chainID of which to get token ID for\\n     */\\n    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory) {\\n        return _getTokenID(_toLower(toString(tokenAddress)), chainID);\\n    }\\n\\n    /**\\n     * @notice Returns the full token config struct\\n     * @param tokenID String input of the token ID for the token\\n     * @param chainID Chain ID of which token address + config to get\\n     */\\n    function getToken(string memory tokenID, uint256 chainID) public view returns (Token memory token) {\\n        return _tokens[toBytes32(tokenID)][chainID];\\n    }\\n\\n    /**\\n     * @notice Returns the full token config struct\\n     * @param tokenID String input of the token ID for the token\\n     * @param chainID Chain ID of which token address + config to get\\n     */\\n    function getTokenByID(string memory tokenID, uint256 chainID) public view returns (Token memory token) {\\n        return _tokens[toBytes32(tokenID)][chainID];\\n    }\\n\\n    /**\\n     * @notice Returns token config struct, given an address and chainID\\n     * @param tokenAddress Matches the token ID by using a combo of address + chain ID\\n     * @param chainID Chain ID of which token to get config for\\n     */\\n    function getTokenByAddress(string memory tokenAddress, uint256 chainID) public view returns (Token memory token) {\\n        return _tokens[_tokenIDMap[chainID][_toLower(tokenAddress)]][chainID];\\n    }\\n\\n    function getTokenByEVMAddress(address tokenAddress, uint256 chainID) public view returns (Token memory token) {\\n        return _tokens[_tokenIDMap[chainID][_toLower(toString(tokenAddress))]][chainID];\\n    }\\n\\n    /**\\n     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge\\n     * @param tokenID String to check if it is a withdraw/underlying token\\n     */\\n    function hasUnderlyingToken(string memory tokenID) public view returns (bool) {\\n        bytes32 bytesTokenID = toBytes32(tokenID);\\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].hasUnderlying) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns which token is the underlying token to withdraw\\n     * @param tokenID string token ID\\n     */\\n    function getUnderlyingToken(string memory tokenID) public view returns (Token memory token) {\\n        bytes32 bytesTokenID = toBytes32(tokenID);\\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].isUnderlying) {\\n                return _mcTokens[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     @notice Public function returning if token ID exists given a string\\n     */\\n    function isTokenIDExist(string memory tokenID) public view returns (bool) {\\n        return _isTokenIDExist(toBytes32(tokenID));\\n    }\\n\\n    /**\\n     @notice Internal function returning if token ID exists given bytes32 version of the ID\\n     */\\n    function _isTokenIDExist(bytes32 tokenID) internal view returns (bool) {\\n        for (uint256 i = 0; i < _allTokenIDs.length; ++i) {\\n            if (_allTokenIDs[i] == tokenID) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Internal function which handles logic of setting token ID and dealing with mappings\\n     * @param tokenID bytes32 version of ID\\n     * @param chainID which chain to set the token config for\\n     * @param tokenToAdd Token object to set the mapping to\\n     */\\n    function _setTokenConfig(\\n        bytes32 tokenID,\\n        uint256 chainID,\\n        Token memory tokenToAdd\\n    ) internal returns (bool) {\\n        _tokens[tokenID][chainID] = tokenToAdd;\\n        if (!_isTokenIDExist(tokenID)) {\\n            _allTokenIDs.push(tokenID);\\n        }\\n\\n        Token[] storage _mcTokens = _allTokens[tokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].chainId == chainID) {\\n                string memory oldToken = _mcTokens[i].tokenAddress;\\n                if (!compareStrings(tokenToAdd.tokenAddress, oldToken)) {\\n                    _mcTokens[i].tokenAddress = tokenToAdd.tokenAddress;\\n                    _tokenIDMap[chainID][oldToken] = keccak256(\\\"\\\");\\n                    _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\\n                }\\n            }\\n        }\\n        _mcTokens.push(tokenToAdd);\\n        _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function\\n     * @param tokenID string ID to set the token config object form\\n     * @param chainID chain ID to use for the token config object\\n     * @param tokenAddress token address of the token on the given chain\\n     * @param tokenDecimals decimals of token\\n     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals\\n     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals\\n     * @param swapFee percent based swap fee -- 10e6 == 10bps\\n     * @param maxSwapFee max swap fee to be charged - in native token decimals\\n     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\\n     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()\\n     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain\\n     */\\n    function setTokenConfig(\\n        string calldata tokenID,\\n        uint256 chainID,\\n        address tokenAddress,\\n        uint8 tokenDecimals,\\n        uint256 maxSwap,\\n        uint256 minSwap,\\n        uint256 swapFee,\\n        uint256 maxSwapFee,\\n        uint256 minSwapFee,\\n        bool hasUnderlying,\\n        bool isUnderlying\\n    ) public returns (bool) {\\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\\n        return\\n            setTokenConfig(\\n                tokenID,\\n                chainID,\\n                toString(tokenAddress),\\n                tokenDecimals,\\n                maxSwap,\\n                minSwap,\\n                swapFee,\\n                maxSwapFee,\\n                minSwapFee,\\n                hasUnderlying,\\n                isUnderlying\\n            );\\n    }\\n\\n    /**\\n     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function\\n     * @param tokenID string ID to set the token config object form\\n     * @param chainID chain ID to use for the token config object\\n     * @param tokenAddress token address of the token on the given chain\\n     * @param tokenDecimals decimals of token\\n     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals\\n     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals\\n     * @param swapFee percent based swap fee -- 10e6 == 10bps\\n     * @param maxSwapFee max swap fee to be charged - in native token decimals\\n     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\\n     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()\\n     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain\\n     */\\n    function setTokenConfig(\\n        string calldata tokenID,\\n        uint256 chainID,\\n        string memory tokenAddress,\\n        uint8 tokenDecimals,\\n        uint256 maxSwap,\\n        uint256 minSwap,\\n        uint256 swapFee,\\n        uint256 maxSwapFee,\\n        uint256 minSwapFee,\\n        bool hasUnderlying,\\n        bool isUnderlying\\n    ) public returns (bool) {\\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\\n        Token memory tokenToAdd;\\n        tokenToAdd.tokenAddress = _toLower(tokenAddress);\\n        tokenToAdd.tokenDecimals = tokenDecimals;\\n        tokenToAdd.maxSwap = maxSwap;\\n        tokenToAdd.minSwap = minSwap;\\n        tokenToAdd.swapFee = swapFee;\\n        tokenToAdd.maxSwapFee = maxSwapFee;\\n        tokenToAdd.minSwapFee = minSwapFee;\\n        tokenToAdd.hasUnderlying = hasUnderlying;\\n        tokenToAdd.isUnderlying = isUnderlying;\\n        tokenToAdd.chainId = chainID;\\n\\n        return _setTokenConfig(toBytes32(tokenID), chainID, tokenToAdd);\\n    }\\n\\n    function _calculateSwapFee(\\n        string memory tokenAddress,\\n        uint256 chainID,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        Token memory token = _tokens[_tokenIDMap[chainID][tokenAddress]][chainID];\\n        uint256 calculatedSwapFee = amount.mul(token.swapFee).div(FEE_DENOMINATOR);\\n        if (calculatedSwapFee > token.minSwapFee && calculatedSwapFee < token.maxSwapFee) {\\n            return calculatedSwapFee;\\n        } else if (calculatedSwapFee > token.maxSwapFee) {\\n            return token.maxSwapFee;\\n        } else {\\n            return token.minSwapFee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates bridge swap fee based on the destination chain's token transfer.\\n     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on\\n     * @param tokenAddress address of the destination token to query token config for\\n     * @param chainID destination chain ID to query the token config for\\n     * @param amount in native token decimals\\n     * @return Fee calculated in token decimals\\n     */\\n    function calculateSwapFee(\\n        string memory tokenAddress,\\n        uint256 chainID,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        return _calculateSwapFee(_toLower(tokenAddress), chainID, amount);\\n    }\\n\\n    /**\\n     * @notice Calculates bridge swap fee based on the destination chain's token transfer.\\n     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on\\n     * @param tokenAddress address of the destination token to query token config for\\n     * @param chainID destination chain ID to query the token config for\\n     * @param amount in native token decimals\\n     * @return Fee calculated in token decimals\\n     */\\n    function calculateSwapFee(\\n        address tokenAddress,\\n        uint256 chainID,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        return _calculateSwapFee(_toLower(toString(tokenAddress)), chainID, amount);\\n    }\\n\\n    // GAS PRICING\\n\\n    /**\\n     * @notice sets the max gas price for a chain\\n     */\\n    function setMaxGasPrice(uint256 chainID, uint256 maxPrice) public {\\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\\n        _maxGasPrice[chainID] = maxPrice;\\n    }\\n\\n    /**\\n     * @notice gets the max gas price for a chain\\n     */\\n    function getMaxGasPrice(uint256 chainID) public view returns (uint256) {\\n        return _maxGasPrice[chainID];\\n    }\\n\\n    // POOL CONFIG\\n\\n    function getPoolConfig(address tokenAddress, uint256 chainID) external view returns (Pool memory) {\\n        return _pool[tokenAddress][chainID];\\n    }\\n\\n    function setPoolConfig(\\n        address tokenAddress,\\n        uint256 chainID,\\n        address poolAddress,\\n        bool metaswap\\n    ) external returns (Pool memory) {\\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender), \\\"Caller is not Bridge Manager\\\");\\n        Pool memory newPool = Pool(tokenAddress, chainID, poolAddress, metaswap);\\n        _pool[tokenAddress][chainID] = newPool;\\n        return newPool;\\n    }\\n\\n    // UTILITY FUNCTIONS\\n\\n    function toString(bytes32 data) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && data[i] != 0) {\\n            ++i;\\n        }\\n        bytes memory bs = new bytes(i);\\n        for (uint8 j = 0; j < i; ++j) {\\n            bs[j] = data[j];\\n        }\\n        return string(bs);\\n    }\\n\\n    // toBytes32 converts a string to a bytes 32\\n    function toBytes32(string memory str) internal pure returns (bytes32 result) {\\n        require(bytes(str).length <= 32);\\n        assembly {\\n            result := mload(add(str, 32))\\n        }\\n    }\\n\\n    function toString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n\\n        string memory addrPrefix = \\\"0x\\\";\\n\\n        return concat(addrPrefix, string(s));\\n    }\\n\\n    function concat(string memory _x, string memory _y) internal pure returns (string memory) {\\n        bytes memory _xBytes = bytes(_x);\\n        bytes memory _yBytes = bytes(_y);\\n\\n        string memory _tmpValue = new string(_xBytes.length + _yBytes.length);\\n        bytes memory _newValue = bytes(_tmpValue);\\n\\n        uint256 i;\\n        uint256 j;\\n\\n        for (i = 0; i < _xBytes.length; i++) {\\n            _newValue[j++] = _xBytes[i];\\n        }\\n\\n        for (i = 0; i < _yBytes.length; i++) {\\n            _newValue[j++] = _yBytes[i];\\n        }\\n\\n        return string(_newValue);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) {\\n            c = bytes1(uint8(b) + 0x30);\\n        } else {\\n            c = bytes1(uint8(b) + 0x57);\\n        }\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function _toLower(string memory str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                // So we add 32 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\",\"keccak256\":\"0x9d51ab5c28d1a0b2fa0d27ece4b578b03cbfc1de8f39ed56d75db42c1c65382e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b62000139565b62000031828262000035565b5050565b6000828152602081815260409091206200005a91839062001098620000ae821b17901c565b1562000031576200006a620000ce565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620000c5836001600160a01b038416620000d2565b90505b92915050565b3390565b6000620000e0838362000121565b6200011857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620000c8565b506000620000c8565b60009081526001919091016020526040902054151590565b612ae180620001496000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637e355e5e116100f9578063d547741f11610097578063efd7516e11610071578063efd7516e146103c3578063fc7cc4cb146103d6578063fd534b33146103e9578063ff9106c7146103fc576101c4565b8063d547741f1461038a578063ddb543991461039d578063e814157d146103b0576101c4565b8063a217fddf116100d3578063a217fddf14610349578063abaac00814610351578063af611ca014610364578063ca15c87314610377576101c4565b80637e355e5e146103035780639010d07c1461031657806391d1485414610336576101c4565b80633cc1c7e01161016657806359053bfe1161014057806359053bfe146102bb578063684a10b3146102ce57806372fb43d9146102e357806377b8cbf714610242576101c4565b80633cc1c7e014610275578063558dae3a1461029557806358dfe6f1146102a8576101c4565b80632c02799e116101a25780632c02799e146102255780632f2ff15d1461022d578063324980b51461024257806336568abe14610262576101c4565b8063074b7e97146101c95780630a62a9cb146101f2578063248a9ca314610212575b600080fd5b6101dc6101d7366004612551565b610404565b6040516101e99190612725565b60405180910390f35b6102056102003660046125c7565b6105d3565b6040516101e99190612730565b610205610220366004612397565b6105f2565b610205610607565b61024061023b3660046123af565b61060c565b005b610255610250366004612584565b610677565b6040516101e991906129d7565b6102406102703660046123af565b6107cb565b6102886102833660046122e6565b610841565b6040516101e99190612739565b6102556102a33660046122e6565b61085d565b6102556102b6366004612551565b610942565b6101dc6102c9366004612417565b610b25565b6102d6610b87565b6040516101e991906126a7565b6102f66102f13660046122e6565b610c2a565b6040516101e9919061298b565b6102f6610311366004612310565b610cb4565b6103296103243660046123f6565b610e0f565b6040516101e99190612686565b6101dc6103443660046123af565b610e27565b610205610e3f565b61024061035f3660046123f6565b610e44565b6101dc610372366004612551565b610e89565b610205610385366004612397565b610e9c565b6102406103983660046123af565b610eb3565b6101dc6103ab3660046124d9565b610f07565b6102556103be366004612584565b611020565b6102886103d1366004612584565b611043565b6102056103e4366004612364565b611051565b6102056103f7366004612397565b611062565b610205611074565b600080610410836110ba565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b8282101561058257838290600052602060002090600902016040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050509183525050600282015460ff908116602080840191909152600384015460408401526004840154606084015260058401546080840152600684015460a0840152600784015460c0840152600890930154808216151560e0840152610100908190049091161515910152908252600192909201910161043f565b50505050905060005b81518110156105c6578181815181106105a057fe5b60200260200101516101000151156105be57600193505050506105ce565b60010161058b565b506000925050505b919050565b60006105e86105e1856110d3565b848461122d565b90505b9392505050565b60009081526020819052604090206002015490565b600381565b60008281526020819052604090206002015461062a90610344611410565b610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906127a9565b60405180910390fd5b6106738282611414565b5050565b61067f6120aa565b6004600061068c856110ba565b815260200190815260200160002060008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b820191906000526020600020905b81548152906001019060200180831161073d57829003601f168201915b5050509183525050600282015460ff9081166020830152600383015460408301526004830154606083015260058301546080830152600683015460a0830152600783015460c0830152600890920154808316151560e083015261010090819004909216151591015290505b92915050565b6107d3611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061292e565b6106738282611497565b60606105eb6108576108528561151a565b6110d3565b8361168b565b6108656120aa565b6000828152600360205260408120600491906108836108528761151a565b604051610890919061266a565b908152602001604051809103902054815260200190815260200160002060008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b61094a6120aa565b6000610955836110ba565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b82821015610ac757838290600052602060002090600902016040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4b5780601f10610a2057610100808354040283529160200191610a4b565b820191906000526020600020905b815481529060010190602001808311610a2e57829003601f168201915b5050509183525050600282015460ff908116602080840191909152600384015460408401526004840154606084015260058401546080840152600684015460a0840152600784015460c0840152600890930154808216151560e08401526101009081900490911615159101529082526001929092019101610984565b50505050905060005b8151811015610b1d57818181518110610ae557fe5b6020026020010151610120015115610b1557818181518110610b0357fe5b602002602001015193505050506105ce565b600101610ad0565b505050919050565b6000610b517f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610b5a57600080fd5b610b768d8d8d610b698e61151a565b8d8d8d8d8d8d8d8d610f07565b9d9c50505050505050505050505050565b6001546060908067ffffffffffffffff81118015610ba457600080fd5b50604051908082528060200260200182016040528015610bd857816020015b6060815260200190600190039081610bc35790505b50915060005b81811015610c2557610c0660018281548110610bf657fe5b90600052602060002001546116c1565b838281518110610c1257fe5b6020908102919091010152600101610bde565b505090565b610c32612104565b5073ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093835292815290829020825160808101845281548516815260018201549281019290925260020154928316918101919091527401000000000000000000000000000000000000000090910460ff161515606082015290565b610cbc612104565b610ce67f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906128f7565b610d24612104565b50506040805160808101825273ffffffffffffffffffffffffffffffffffffffff8087168083526020808401888152878416858701908152871515606087019081526000948552600584528785208b865290935295909220845181549085167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255925160018201559451600290950180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9690941691909216179390931617909155949350505050565b60008281526020819052604081206105eb90836117cd565b60008281526020819052604081206105eb90836117d9565b600081565b610e6e7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610e7757600080fd5b60009182526006602052604090912055565b60006107c5610e97836110ba565b6117fb565b60008181526020819052604081206107c590611843565b600082815260208190526040902060020154610ed190610344611410565b610837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061283d565b6000610f337f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610f3c57600080fd5b610f446120aa565b610f4d8b6110d3565b816020018190525089816040019060ff16908160ff16815250508881606001818152505087816080018181525050868160a0018181525050858160c0018181525050848160e0018181525050838161010001901515908115158152505082816101200190151590811515815250508b81600001818152505061100e6110078f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110ba92505050565b8d8361184e565b9e9d5050505050505050505050505050565b6110286120aa565b600082815260036020526040812060049190610883866110d3565b60606105eb610857846110d3565b60006105e86105e16108528661151a565b60009081526006602052604090205490565b7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8581565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611c77565b60006020825111156110cb57600080fd5b506020015190565b6060808290506060815167ffffffffffffffff811180156110f357600080fd5b506040519080825280601f01601f19166020018201604052801561111e576020820181803683370190505b50905060005b825181101561122557604183828151811061113b57fe5b016020015160f81c108015906111655750605a83828151811061115a57fe5b016020015160f81c11155b156111ca5782818151811061117657fe5b602001015160f81c60f81b60f81c60200160f81b82828151811061119657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061121d565b8281815181106111d657fe5b602001015160f81c60f81b8282815181106111ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b600101611124565b509392505050565b60006112376120aa565b6000848152600360205260408082209051600492919061125890899061266a565b908152602001604051809103902054815260200190815260200160002060008581526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113355780601f1061130a57610100808354040283529160200191611335565b820191906000526020600020905b81548152906001019060200180831161131857829003601f168201915b5050509183525050600282015460ff9081166020830152600383015460408301526004830154606083015260058301546080830152600683015460a080840191909152600784015460c0840152600890930154808216151560e08401526101009081900490911615159101528101519091506000906113c6906402540be400906113c0908790611cc1565b90611d15565b90508160e00151811180156113de57508160c0015181105b156113ec5791506105eb9050565b8160c00151811115611404575060c0015190506105eb565b5060e0015190506105eb565b3390565b600082815260208190526040902061142c9082611098565b1561067357611439611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206114af9082611d61565b15610673576114bc611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516028808252606082810190935282919060208201818036833701905050905060005b60148110156116445760008160130360080260020a8573ffffffffffffffffffffffffffffffffffffffff168161157357fe5b0460f81b9050600060108260f81c60ff168161158b57fe5b0460f81b905060008160f81c6010028360f81c0360f81b90506115ad82611d83565b8585600202815181106115bc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115f481611d83565b85856002026001018151811061160657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050600190920191506115409050565b5060408051808201909152600281527f307800000000000000000000000000000000000000000000000000000000000060208201526116838183611db1565b949350505050565b60606105eb60036000848152602001908152602001600020846040516116b1919061266a565b9081526020016040518091039020545b606060005b60208160ff1610801561170c5750828160ff16602081106116e357fe5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15611719576001016116c6565b60608160ff1667ffffffffffffffff8111801561173557600080fd5b506040519080825280601f01601f191660200182016040528015611760576020820181803683370190505b50905060005b8260ff168160ff16101561122557848160ff166020811061178357fe5b1a60f81b828260ff168151811061179657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611766565b60006105eb8383611ef2565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611f51565b6000805b60015481101561183a57826001828154811061181757fe5b906000526020600020015414156118325760019150506105ce565b6001016117ff565b50600092915050565b60006107c582611f69565b60008381526004602090815260408083208584528252822083518155818401518051859361188392600185019291019061212b565b50604082015160028201805460ff9092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00928316179055606083015160038301556080830151600483015560a0830151600583015560c0830151600683015560e0830151600783015561010080840151600890930180546101209095015115159091027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff931515949092169390931791909116179055611943846117fb565b61197c576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018490555b6000848152600260205260408120905b8154811015611b4857848282815481106119a257fe5b9060005260206000209060090201600001541415611b405760608282815481106119c857fe5b90600052602060002090600902016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6d5780601f10611a4257610100808354040283529160200191611a6d565b820191906000526020600020905b815481529060010190602001808311611a5057829003601f168201915b50505050509050611a82856020015182611f6d565b611b3e578460200151838381548110611a9757fe5b90600052602060002090600902016001019080519060200190611abb92919061212b565b507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706003600088815260200190815260200160002082604051611afe919061266a565b90815260408051602092819003830181209390935560008981526003835220908701518992611b2d919061266a565b908152604051908190036020019020555b505b60010161198c565b5080546001818101835560008381526020908190208651600990940201928355808601518051879493611b809390850192019061212b565b5060408281015160028301805460ff9092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0092831617905560608401516003808501919091556080850151600485015560a0850151600585015560c0850151600685015560e0850151600785015561010080860151600890950180546101209097015115159091027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff95151596909316959095179390931617909255600086815260209182528290209085015191518792611c5b9161266a565b9081526040519081900360200190205550600190509392505050565b6000611c838383611f51565b611cb9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c5565b5060006107c5565b600082611cd0575060006107c5565b82820282848281611cdd57fe5b04146105eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061289a565b6000808211611d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090612806565b818381611d5957fe5b049392505050565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611fc6565b6000600a60f883901c1015611da3578160f81c60300160f81b90506105ce565b50605760f891821c01901b90565b805182516060918491849184910167ffffffffffffffff81118015611dd557600080fd5b506040519080825280601f01601f191660200182016040528015611e00576020820181803683370190505b509050806000805b8551821015611e7457858281518110611e1d57fe5b602001015160f81c60f81b838280600101935081518110611e3a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190910190611e08565b600091505b8451821015611ee557848281518110611e8e57fe5b602001015160f81c60f81b838280600101935081518110611eab57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190910190611e79565b5090979650505050505050565b81546000908210611f2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061274c565b826000018281548110611f3e57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081604051602001611f80919061266a565b6040516020818303038152906040528051906020012083604051602001611fa7919061266a565b6040516020818303038152906040528051906020012014905092915050565b600081815260018301602052604081205480156120a05783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061201757fe5b906000526020600020015490508087600001848154811061203457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061206457fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107c5565b60009150506107c5565b6040518061014001604052806000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061216c57805160ff1916838001178555612199565b82800160010185558215612199579182015b8281111561219957825182559160200191906001019061217e565b506121a59291506121a9565b5090565b5b808211156121a557600081556001016121aa565b803573ffffffffffffffffffffffffffffffffffffffff811681146107c557600080fd5b803580151581146107c557600080fd5b60008083601f840112612203578182fd5b50813567ffffffffffffffff81111561221a578182fd5b60208301915083602082850101111561223257600080fd5b9250929050565b600082601f830112612249578081fd5b813567ffffffffffffffff80821115612260578283fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116820101818110838211171561229e578485fd5b6040528281529250828483016020018610156122b957600080fd5b8260208601602083013760006020848301015250505092915050565b803560ff811681146107c557600080fd5b600080604083850312156122f8578182fd5b61230284846121be565b946020939093013593505050565b60008060008060808587031215612325578182fd5b61232f86866121be565b93506020850135925061234586604087016121be565b915060608501358015158114612359578182fd5b939692955090935050565b600080600060608486031215612378578283fd5b61238285856121be565b95602085013595506040909401359392505050565b6000602082840312156123a8578081fd5b5035919050565b600080604083850312156123c1578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff811681146123eb578182fd5b809150509250929050565b60008060408385031215612408578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101608d8f031215612439578788fd5b67ffffffffffffffff8d35111561244e578788fd5b61245b8e8e358f016121f2565b909c509a5060208d013599506124748e60408f016121be565b98506124838e60608f016122d5565b975060808d0135965060a08d0135955060c08d0135945060e08d013593506101008d013592506124b78e6101208f016121e2565b91506124c78e6101408f016121e2565b90509295989b509295989b509295989b565b6000806000806000806000806000806000806101608d8f0312156124fb578081fd5b67ffffffffffffffff8d351115612510578081fd5b61251d8e8e358f016121f2565b909c509a5060208d0135995067ffffffffffffffff60408e01351115612541578081fd5b6124748e60408f01358f01612239565b600060208284031215612562578081fd5b813567ffffffffffffffff811115612578578182fd5b61168384828501612239565b60008060408385031215612596578182fd5b823567ffffffffffffffff8111156125ac578283fd5b6125b885828601612239565b95602094909401359450505050565b6000806000606084860312156125db578081fd5b833567ffffffffffffffff8111156125f1578182fd5b6125fd86828701612239565b9660208601359650604090950135949350505050565b15159052565b60008151808452612631816020860160208601612a7b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60ff169052565b6000825161267c818460208701612a7b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612718577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612706858351612619565b945092850192908501906001016126cc565b5092979650505050505050565b901515815260200190565b90815260200190565b6000602082526105eb6020830184612619565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f43616c6c6572206973206e6f7420427269646765204d616e6167657200000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060808201905073ffffffffffffffffffffffffffffffffffffffff808451168352602084015160208401528060408501511660408401525060608301511515606083015292915050565b600060208252825160208301526020830151610140806040850152612a00610160850183612619565b91506040850151612a146060860182612663565b5060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120612a6081870183612613565b8601519050612a7185830182612613565b5090949350505050565b60005b83811015612a96578181015183820152602001612a7e565b83811115612aa5576000848401525b5050505056fea26469706673582212205f1b88fb781d1c4d09bda296020462f42a840855295b5461d856d321dec508e464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637e355e5e116100f9578063d547741f11610097578063efd7516e11610071578063efd7516e146103c3578063fc7cc4cb146103d6578063fd534b33146103e9578063ff9106c7146103fc576101c4565b8063d547741f1461038a578063ddb543991461039d578063e814157d146103b0576101c4565b8063a217fddf116100d3578063a217fddf14610349578063abaac00814610351578063af611ca014610364578063ca15c87314610377576101c4565b80637e355e5e146103035780639010d07c1461031657806391d1485414610336576101c4565b80633cc1c7e01161016657806359053bfe1161014057806359053bfe146102bb578063684a10b3146102ce57806372fb43d9146102e357806377b8cbf714610242576101c4565b80633cc1c7e014610275578063558dae3a1461029557806358dfe6f1146102a8576101c4565b80632c02799e116101a25780632c02799e146102255780632f2ff15d1461022d578063324980b51461024257806336568abe14610262576101c4565b8063074b7e97146101c95780630a62a9cb146101f2578063248a9ca314610212575b600080fd5b6101dc6101d7366004612551565b610404565b6040516101e99190612725565b60405180910390f35b6102056102003660046125c7565b6105d3565b6040516101e99190612730565b610205610220366004612397565b6105f2565b610205610607565b61024061023b3660046123af565b61060c565b005b610255610250366004612584565b610677565b6040516101e991906129d7565b6102406102703660046123af565b6107cb565b6102886102833660046122e6565b610841565b6040516101e99190612739565b6102556102a33660046122e6565b61085d565b6102556102b6366004612551565b610942565b6101dc6102c9366004612417565b610b25565b6102d6610b87565b6040516101e991906126a7565b6102f66102f13660046122e6565b610c2a565b6040516101e9919061298b565b6102f6610311366004612310565b610cb4565b6103296103243660046123f6565b610e0f565b6040516101e99190612686565b6101dc6103443660046123af565b610e27565b610205610e3f565b61024061035f3660046123f6565b610e44565b6101dc610372366004612551565b610e89565b610205610385366004612397565b610e9c565b6102406103983660046123af565b610eb3565b6101dc6103ab3660046124d9565b610f07565b6102556103be366004612584565b611020565b6102886103d1366004612584565b611043565b6102056103e4366004612364565b611051565b6102056103f7366004612397565b611062565b610205611074565b600080610410836110ba565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b8282101561058257838290600052602060002090600902016040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050509183525050600282015460ff908116602080840191909152600384015460408401526004840154606084015260058401546080840152600684015460a0840152600784015460c0840152600890930154808216151560e0840152610100908190049091161515910152908252600192909201910161043f565b50505050905060005b81518110156105c6578181815181106105a057fe5b60200260200101516101000151156105be57600193505050506105ce565b60010161058b565b506000925050505b919050565b60006105e86105e1856110d3565b848461122d565b90505b9392505050565b60009081526020819052604090206002015490565b600381565b60008281526020819052604090206002015461062a90610344611410565b610669576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906127a9565b60405180910390fd5b6106738282611414565b5050565b61067f6120aa565b6004600061068c856110ba565b815260200190815260200160002060008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b820191906000526020600020905b81548152906001019060200180831161073d57829003601f168201915b5050509183525050600282015460ff9081166020830152600383015460408301526004830154606083015260058301546080830152600683015460a0830152600783015460c0830152600890920154808316151560e083015261010090819004909216151591015290505b92915050565b6107d3611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061292e565b6106738282611497565b60606105eb6108576108528561151a565b6110d3565b8361168b565b6108656120aa565b6000828152600360205260408120600491906108836108528761151a565b604051610890919061266a565b908152602001604051809103902054815260200190815260200160002060008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561075a5780601f1061072f5761010080835404028352916020019161075a565b61094a6120aa565b6000610955836110ba565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b82821015610ac757838290600052602060002090600902016040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4b5780601f10610a2057610100808354040283529160200191610a4b565b820191906000526020600020905b815481529060010190602001808311610a2e57829003601f168201915b5050509183525050600282015460ff908116602080840191909152600384015460408401526004840154606084015260058401546080840152600684015460a0840152600784015460c0840152600890930154808216151560e08401526101009081900490911615159101529082526001929092019101610984565b50505050905060005b8151811015610b1d57818181518110610ae557fe5b6020026020010151610120015115610b1557818181518110610b0357fe5b602002602001015193505050506105ce565b600101610ad0565b505050919050565b6000610b517f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610b5a57600080fd5b610b768d8d8d610b698e61151a565b8d8d8d8d8d8d8d8d610f07565b9d9c50505050505050505050505050565b6001546060908067ffffffffffffffff81118015610ba457600080fd5b50604051908082528060200260200182016040528015610bd857816020015b6060815260200190600190039081610bc35790505b50915060005b81811015610c2557610c0660018281548110610bf657fe5b90600052602060002001546116c1565b838281518110610c1257fe5b6020908102919091010152600101610bde565b505090565b610c32612104565b5073ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093835292815290829020825160808101845281548516815260018201549281019290925260020154928316918101919091527401000000000000000000000000000000000000000090910460ff161515606082015290565b610cbc612104565b610ce67f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610660906128f7565b610d24612104565b50506040805160808101825273ffffffffffffffffffffffffffffffffffffffff8087168083526020808401888152878416858701908152871515606087019081526000948552600584528785208b865290935295909220845181549085167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255925160018201559451600290950180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9690941691909216179390931617909155949350505050565b60008281526020819052604081206105eb90836117cd565b60008281526020819052604081206105eb90836117d9565b600081565b610e6e7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610e7757600080fd5b60009182526006602052604090912055565b60006107c5610e97836110ba565b6117fb565b60008181526020819052604081206107c590611843565b600082815260208190526040902060020154610ed190610344611410565b610837576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061283d565b6000610f337f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610e27565b610f3c57600080fd5b610f446120aa565b610f4d8b6110d3565b816020018190525089816040019060ff16908160ff16815250508881606001818152505087816080018181525050868160a0018181525050858160c0018181525050848160e0018181525050838161010001901515908115158152505082816101200190151590811515815250508b81600001818152505061100e6110078f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110ba92505050565b8d8361184e565b9e9d5050505050505050505050505050565b6110286120aa565b600082815260036020526040812060049190610883866110d3565b60606105eb610857846110d3565b60006105e86105e16108528661151a565b60009081526006602052604090205490565b7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8581565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611c77565b60006020825111156110cb57600080fd5b506020015190565b6060808290506060815167ffffffffffffffff811180156110f357600080fd5b506040519080825280601f01601f19166020018201604052801561111e576020820181803683370190505b50905060005b825181101561122557604183828151811061113b57fe5b016020015160f81c108015906111655750605a83828151811061115a57fe5b016020015160f81c11155b156111ca5782818151811061117657fe5b602001015160f81c60f81b60f81c60200160f81b82828151811061119657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061121d565b8281815181106111d657fe5b602001015160f81c60f81b8282815181106111ed57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b600101611124565b509392505050565b60006112376120aa565b6000848152600360205260408082209051600492919061125890899061266a565b908152602001604051809103902054815260200190815260200160002060008581526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113355780601f1061130a57610100808354040283529160200191611335565b820191906000526020600020905b81548152906001019060200180831161131857829003601f168201915b5050509183525050600282015460ff9081166020830152600383015460408301526004830154606083015260058301546080830152600683015460a080840191909152600784015460c0840152600890930154808216151560e08401526101009081900490911615159101528101519091506000906113c6906402540be400906113c0908790611cc1565b90611d15565b90508160e00151811180156113de57508160c0015181105b156113ec5791506105eb9050565b8160c00151811115611404575060c0015190506105eb565b5060e0015190506105eb565b3390565b600082815260208190526040902061142c9082611098565b1561067357611439611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206114af9082611d61565b15610673576114bc611410565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516028808252606082810190935282919060208201818036833701905050905060005b60148110156116445760008160130360080260020a8573ffffffffffffffffffffffffffffffffffffffff168161157357fe5b0460f81b9050600060108260f81c60ff168161158b57fe5b0460f81b905060008160f81c6010028360f81c0360f81b90506115ad82611d83565b8585600202815181106115bc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115f481611d83565b85856002026001018151811061160657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050600190920191506115409050565b5060408051808201909152600281527f307800000000000000000000000000000000000000000000000000000000000060208201526116838183611db1565b949350505050565b60606105eb60036000848152602001908152602001600020846040516116b1919061266a565b9081526020016040518091039020545b606060005b60208160ff1610801561170c5750828160ff16602081106116e357fe5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15611719576001016116c6565b60608160ff1667ffffffffffffffff8111801561173557600080fd5b506040519080825280601f01601f191660200182016040528015611760576020820181803683370190505b50905060005b8260ff168160ff16101561122557848160ff166020811061178357fe5b1a60f81b828260ff168151811061179657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101611766565b60006105eb8383611ef2565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611f51565b6000805b60015481101561183a57826001828154811061181757fe5b906000526020600020015414156118325760019150506105ce565b6001016117ff565b50600092915050565b60006107c582611f69565b60008381526004602090815260408083208584528252822083518155818401518051859361188392600185019291019061212b565b50604082015160028201805460ff9092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00928316179055606083015160038301556080830151600483015560a0830151600583015560c0830151600683015560e0830151600783015561010080840151600890930180546101209095015115159091027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff931515949092169390931791909116179055611943846117fb565b61197c576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018490555b6000848152600260205260408120905b8154811015611b4857848282815481106119a257fe5b9060005260206000209060090201600001541415611b405760608282815481106119c857fe5b90600052602060002090600902016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6d5780601f10611a4257610100808354040283529160200191611a6d565b820191906000526020600020905b815481529060010190602001808311611a5057829003601f168201915b50505050509050611a82856020015182611f6d565b611b3e578460200151838381548110611a9757fe5b90600052602060002090600902016001019080519060200190611abb92919061212b565b507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706003600088815260200190815260200160002082604051611afe919061266a565b90815260408051602092819003830181209390935560008981526003835220908701518992611b2d919061266a565b908152604051908190036020019020555b505b60010161198c565b5080546001818101835560008381526020908190208651600990940201928355808601518051879493611b809390850192019061212b565b5060408281015160028301805460ff9092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0092831617905560608401516003808501919091556080850151600485015560a0850151600585015560c0850151600685015560e0850151600785015561010080860151600890950180546101209097015115159091027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff95151596909316959095179390931617909255600086815260209182528290209085015191518792611c5b9161266a565b9081526040519081900360200190205550600190509392505050565b6000611c838383611f51565b611cb9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c5565b5060006107c5565b600082611cd0575060006107c5565b82820282848281611cdd57fe5b04146105eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061289a565b6000808211611d50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066090612806565b818381611d5957fe5b049392505050565b60006105eb8373ffffffffffffffffffffffffffffffffffffffff8416611fc6565b6000600a60f883901c1015611da3578160f81c60300160f81b90506105ce565b50605760f891821c01901b90565b805182516060918491849184910167ffffffffffffffff81118015611dd557600080fd5b506040519080825280601f01601f191660200182016040528015611e00576020820181803683370190505b509050806000805b8551821015611e7457858281518110611e1d57fe5b602001015160f81c60f81b838280600101935081518110611e3a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190910190611e08565b600091505b8451821015611ee557848281518110611e8e57fe5b602001015160f81c60f81b838280600101935081518110611eab57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190910190611e79565b5090979650505050505050565b81546000908210611f2f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106609061274c565b826000018281548110611f3e57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081604051602001611f80919061266a565b6040516020818303038152906040528051906020012083604051602001611fa7919061266a565b6040516020818303038152906040528051906020012014905092915050565b600081815260018301602052604081205480156120a05783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061201757fe5b906000526020600020015490508087600001848154811061203457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061206457fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107c5565b60009150506107c5565b6040518061014001604052806000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061216c57805160ff1916838001178555612199565b82800160010185558215612199579182015b8281111561219957825182559160200191906001019061217e565b506121a59291506121a9565b5090565b5b808211156121a557600081556001016121aa565b803573ffffffffffffffffffffffffffffffffffffffff811681146107c557600080fd5b803580151581146107c557600080fd5b60008083601f840112612203578182fd5b50813567ffffffffffffffff81111561221a578182fd5b60208301915083602082850101111561223257600080fd5b9250929050565b600082601f830112612249578081fd5b813567ffffffffffffffff80821115612260578283fd5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116820101818110838211171561229e578485fd5b6040528281529250828483016020018610156122b957600080fd5b8260208601602083013760006020848301015250505092915050565b803560ff811681146107c557600080fd5b600080604083850312156122f8578182fd5b61230284846121be565b946020939093013593505050565b60008060008060808587031215612325578182fd5b61232f86866121be565b93506020850135925061234586604087016121be565b915060608501358015158114612359578182fd5b939692955090935050565b600080600060608486031215612378578283fd5b61238285856121be565b95602085013595506040909401359392505050565b6000602082840312156123a8578081fd5b5035919050565b600080604083850312156123c1578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff811681146123eb578182fd5b809150509250929050565b60008060408385031215612408578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101608d8f031215612439578788fd5b67ffffffffffffffff8d35111561244e578788fd5b61245b8e8e358f016121f2565b909c509a5060208d013599506124748e60408f016121be565b98506124838e60608f016122d5565b975060808d0135965060a08d0135955060c08d0135945060e08d013593506101008d013592506124b78e6101208f016121e2565b91506124c78e6101408f016121e2565b90509295989b509295989b509295989b565b6000806000806000806000806000806000806101608d8f0312156124fb578081fd5b67ffffffffffffffff8d351115612510578081fd5b61251d8e8e358f016121f2565b909c509a5060208d0135995067ffffffffffffffff60408e01351115612541578081fd5b6124748e60408f01358f01612239565b600060208284031215612562578081fd5b813567ffffffffffffffff811115612578578182fd5b61168384828501612239565b60008060408385031215612596578182fd5b823567ffffffffffffffff8111156125ac578283fd5b6125b885828601612239565b95602094909401359450505050565b6000806000606084860312156125db578081fd5b833567ffffffffffffffff8111156125f1578182fd5b6125fd86828701612239565b9660208601359650604090950135949350505050565b15159052565b60008151808452612631816020860160208601612a7b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60ff169052565b6000825161267c818460208701612a7b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612718577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612706858351612619565b945092850192908501906001016126cc565b5092979650505050505050565b901515815260200190565b90815260200190565b6000602082526105eb6020830184612619565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f43616c6c6572206973206e6f7420427269646765204d616e6167657200000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b600060808201905073ffffffffffffffffffffffffffffffffffffffff808451168352602084015160208401528060408501511660408401525060608301511515606083015292915050565b600060208252825160208301526020830151610140806040850152612a00610160850183612619565b91506040850151612a146060860182612663565b5060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120612a6081870183612613565b8601519050612a7185830182612613565b5090949350505050565b60005b83811015612a96578181015183820152602001612a7e565b83811115612aa5576000848401525b5050505056fea26469706673582212205f1b88fb781d1c4d09bda296020462f42a840855295b5461d856d321dec508e464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateSwapFee(address,uint256,uint256)": {
        "details": "This means the fee should be calculated based on the chain that the nodes emit a tx on",
        "params": {
          "amount": "in native token decimals",
          "chainID": "destination chain ID to query the token config for",
          "tokenAddress": "address of the destination token to query token config for"
        },
        "returns": {
          "_0": "Fee calculated in token decimals"
        }
      },
      "calculateSwapFee(string,uint256,uint256)": {
        "details": "This means the fee should be calculated based on the chain that the nodes emit a tx on",
        "params": {
          "amount": "in native token decimals",
          "chainID": "destination chain ID to query the token config for",
          "tokenAddress": "address of the destination token to query token config for"
        },
        "returns": {
          "_0": "Fee calculated in token decimals"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getToken(string,uint256)": {
        "params": {
          "chainID": "Chain ID of which token address + config to get",
          "tokenID": "String input of the token ID for the token"
        }
      },
      "getTokenByAddress(string,uint256)": {
        "params": {
          "chainID": "Chain ID of which token to get config for",
          "tokenAddress": "Matches the token ID by using a combo of address + chain ID"
        }
      },
      "getTokenByID(string,uint256)": {
        "params": {
          "chainID": "Chain ID of which token address + config to get",
          "tokenID": "String input of the token ID for the token"
        }
      },
      "getTokenID(address,uint256)": {
        "params": {
          "chainID": "chainID of which to get token ID for",
          "tokenAddress": "address of token to get ID for"
        }
      },
      "getUnderlyingToken(string)": {
        "params": {
          "tokenID": "string token ID"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasUnderlyingToken(string)": {
        "params": {
          "tokenID": "String to check if it is a withdraw/underlying token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "params": {
          "chainID": "chain ID to use for the token config object",
          "hasUnderlying": "bool which represents whether this is a global mint token or one to withdraw()",
          "isUnderlying": "bool which represents if this token is the one to withdraw on the given chain",
          "maxSwap": "maximum amount of token allowed to be transferred at once - in native token decimals",
          "maxSwapFee": "max swap fee to be charged - in native token decimals",
          "minSwap": "minimum amount of token needed to be transferred at once - in native token decimals",
          "minSwapFee": "min swap fee to be charged - in native token decimals - especially useful for mainnet ETH",
          "swapFee": "percent based swap fee -- 10e6 == 10bps",
          "tokenAddress": "token address of the token on the given chain",
          "tokenDecimals": "decimals of token",
          "tokenID": "string ID to set the token config object form"
        }
      },
      "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "params": {
          "chainID": "chain ID to use for the token config object",
          "hasUnderlying": "bool which represents whether this is a global mint token or one to withdraw()",
          "isUnderlying": "bool which represents if this token is the one to withdraw on the given chain",
          "maxSwap": "maximum amount of token allowed to be transferred at once - in native token decimals",
          "maxSwapFee": "max swap fee to be charged - in native token decimals",
          "minSwap": "minimum amount of token needed to be transferred at once - in native token decimals",
          "minSwapFee": "min swap fee to be charged - in native token decimals - especially useful for mainnet ETH",
          "swapFee": "percent based swap fee -- 10e6 == 10bps",
          "tokenAddress": "token address of the token on the given chain",
          "tokenDecimals": "decimals of token",
          "tokenID": "string ID to set the token config object form"
        }
      }
    },
    "title": "BridgeConfig contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateSwapFee(address,uint256,uint256)": {
        "notice": "Calculates bridge swap fee based on the destination chain's token transfer."
      },
      "calculateSwapFee(string,uint256,uint256)": {
        "notice": "Calculates bridge swap fee based on the destination chain's token transfer."
      },
      "getAllTokenIDs()": {
        "notice": "Returns a list of all existing token IDs converted to strings"
      },
      "getMaxGasPrice(uint256)": {
        "notice": "gets the max gas price for a chain"
      },
      "getToken(string,uint256)": {
        "notice": "Returns the full token config struct"
      },
      "getTokenByAddress(string,uint256)": {
        "notice": "Returns token config struct, given an address and chainID"
      },
      "getTokenByID(string,uint256)": {
        "notice": "Returns the full token config struct"
      },
      "getTokenID(address,uint256)": {
        "notice": "Returns the token ID (string) of the cross-chain token inputted"
      },
      "getUnderlyingToken(string)": {
        "notice": "Returns which token is the underlying token to withdraw"
      },
      "hasUnderlyingToken(string)": {
        "notice": "Returns true if the token has an underlying token -- meaning the token is deposited into the bridge"
      },
      "isTokenIDExist(string)": {
        "notice": "Public function returning if token ID exists given a string"
      },
      "setMaxGasPrice(uint256,uint256)": {
        "notice": "sets the max gas price for a chain"
      },
      "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "notice": "Main write function of this contract - Handles creating the struct and passing it to the internal logic function"
      },
      "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "notice": "Main write function of this contract - Handles creating the struct and passing it to the internal logic function"
      }
    },
    "notice": "This token is used for configuring different tokens on the bridge and mapping them across chains.*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3062,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3058_storage)"
      },
      {
        "astId": 14019,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_allTokenIDs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 14024,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_allTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Token)14075_storage)dyn_storage)"
      },
      {
        "astId": 14030,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_tokenIDMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_bytes32))"
      },
      {
        "astId": 14036,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Token)14075_storage))"
      },
      {
        "astId": 14042,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_pool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Pool)14084_storage))"
      },
      {
        "astId": 14046,
        "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
        "label": "_maxGasPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)14075_storage)dyn_storage": {
        "base": "t_struct(Token)14075_storage",
        "encoding": "dynamic_array",
        "label": "struct BridgeConfigV3.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Pool)14084_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BridgeConfigV3.Pool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Pool)14084_storage)"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Token)14075_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BridgeConfigV3.Token[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Token)14075_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Token)14075_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct BridgeConfigV3.Token))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Token)14075_storage)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3058_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3058_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      "t_mapping(t_uint256,t_struct(Pool)14084_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeConfigV3.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)14084_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)14075_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeConfigV3.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)14075_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5812_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5811,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Pool)14084_storage": {
        "encoding": "inplace",
        "label": "struct BridgeConfigV3.Pool",
        "members": [
          {
            "astId": 14077,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14079,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14081,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "poolAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 14083,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "metaswap",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)3058_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3055,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5812_storage"
          },
          {
            "astId": 3057,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5542,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5546,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)14075_storage": {
        "encoding": "inplace",
        "label": "struct BridgeConfigV3.Token",
        "members": [
          {
            "astId": 14056,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14058,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 14060,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "tokenDecimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 14062,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "maxSwap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14064,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "minSwap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14066,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "swapFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 14068,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "maxSwapFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 14070,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "minSwapFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 14072,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "hasUnderlying",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 14074,
            "contract": "contracts/bridge/BridgeConfigV3.sol:BridgeConfigV3",
            "label": "isUnderlying",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}