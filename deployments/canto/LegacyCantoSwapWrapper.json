{
  "address": "0x0271984e4cfA2A0f02664baACD551CcFCC9920E8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5774b337b794999907737a7a04fc8c639568c31301f4ad97da3f62d0a546fd8b",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x0271984e4cfA2A0f02664baACD551CcFCC9920E8",
    "transactionIndex": 1,
    "gasUsed": "1237166",
    "logsBloom": "0x
    "blockHash": "0xa36d55a2b7030848d3fc902f5c1c7f71b70dbd6741dd6ec50797f2b8235b5b2d",
    "transactionHash": "0x5774b337b794999907737a7a04fc8c639568c31301f4ad97da3f62d0a546fd8b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1861449,
        "transactionHash": "0x5774b337b794999907737a7a04fc8c639568c31301f4ad97da3f62d0a546fd8b",
        "address": "0xD8836aF2e565D3Befce7D906Af63ee45a57E8f80",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000271984e4cfa2a0f02664baacd551ccfcc9920e8",
          "0x00000000000000000000000007379565cd8b0cae7c60dc78e7f601b34af2a21c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xa36d55a2b7030848d3fc902f5c1c7f71b70dbd6741dd6ec50797f2b8235b5b2d"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1861449,
        "transactionHash": "0x5774b337b794999907737a7a04fc8c639568c31301f4ad97da3f62d0a546fd8b",
        "address": "0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000271984e4cfa2a0f02664baacd551ccfcc9920e8",
          "0x00000000000000000000000007379565cd8b0cae7c60dc78e7f601b34af2a21c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xa36d55a2b7030848d3fc902f5c1c7f71b70dbd6741dd6ec50797f2b8235b5b2d"
      }
    ],
    "blockNumber": 1861449,
    "cumulativeGasUsed": "1288216",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f1adafc72c261aa32aeaf7d3f567028e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateSwap(uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges                          a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"amountOut\":\"       amount of tokens the user will receive\"}},\"getToken(uint8)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"token\":\"   address of the token at given index\"}},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"dx\":\"the amount of tokens the user wants to swap from\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"},\"returns\":{\"amountOut\":\"       amount of tokens bought\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateSwap(uint8,uint8,uint256)\":{\"notice\":\"Wrapper for ISaddle.calculateSwap()\"},\"getToken(uint8)\":{\"notice\":\"Wrapper for ISaddle.getToken()\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Wrapper for ISaddle.swap()\"}},\"notice\":\"Contract mimicking Saddle swap interface to connect following pools: - Synapse    nUSD/NOTE - CantoDex   NOTE/USDC - CantoDex   NOTE/USDT Swaps between \\\"disconnected\\\" coins are routed through NOTE.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/wrappers/swap/CantoSwapWrapper.sol\":\"CantoSwapWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/bridge/wrappers/swap/CantoSwapWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface ISynapse {\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\\ninterface ICantoDex {\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Contract mimicking Saddle swap interface to connect following pools:\\n * - Synapse    nUSD/NOTE\\n * - CantoDex   NOTE/USDC\\n * - CantoDex   NOTE/USDT\\n * Swaps between \\\"disconnected\\\" coins are routed through NOTE.\\n */\\ncontract CantoSwapWrapper {\\n    using SafeERC20 for IERC20;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                              CONSTANTS                               \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Token ordering is nUSD, NOTE (for backwards compatibility),\\n     * then all remaining tokens sorted alphabetically.\\n     * (index: token)\\n     * 0: nUSD\\n     * 1: NOTE\\n     * 2: USDC\\n     * 3: USDT\\n     */\\n\\n    // Synapse-bridged token: nUSD\\n    IERC20 internal constant NUSD = IERC20(0xD8836aF2e565D3Befce7D906Af63ee45a57E8f80);\\n    // Canto native token: NOTE\\n    IERC20 internal constant NOTE = IERC20(0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503);\\n    // Gravity-bridged token: USDC\\n    IERC20 internal constant USDC = IERC20(0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd);\\n    // Gravity-bridged token: USDT\\n    IERC20 internal constant USDT = IERC20(0xd567B3d7B8FE3C79a1AD8dA978812cfC4Fa05e75);\\n\\n    uint256 internal constant NUSD_INDEX = 0;\\n    uint256 internal constant NOTE_INDEX = 1;\\n    uint256 internal constant USDC_INDEX = 2;\\n    uint256 internal constant USDT_INDEX = 3;\\n    uint256 internal constant COINS = 4;\\n\\n    /// @notice Synapse nUSD/NOTE\\n    address internal constant SYNAPSE_NUSD_POOL = 0x07379565cD8B0CaE7c60Dc78e7f601b34AF2A21c;\\n    /// @notice CantoDEX NOTE/USDC\\n    address internal constant CANTO_DEX_USDC_POOL = 0x9571997a66D63958e1B3De9647C22bD6b9e7228c;\\n    /// @notice CantoDEX NOTE/USDT\\n    address internal constant CANTO_DEX_USDT_POOL = 0x35DB1f3a6A6F07f82C76fCC415dB6cFB1a7df833;\\n\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                             CONSTRUCTOR                              \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    constructor() {\\n        // Approve spending by Synapse Pool\\n        NUSD.safeApprove(SYNAPSE_NUSD_POOL, MAX_UINT);\\n        NOTE.safeApprove(SYNAPSE_NUSD_POOL, MAX_UINT);\\n        // CantoDEX pools don't need approvals\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                          EXTERNAL FUNCTIONS                          \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Wrapper for ISaddle.swap()\\n     * @param tokenIndexFrom    the token the user wants to swap from\\n     * @param tokenIndexTo      the token the user wants to swap to\\n     * @param dx                the amount of tokens the user wants to swap from\\n     * @param minDy             the min amount the user would like to receive, or revert.\\n     * @param deadline          latest timestamp to accept this transaction\\n     * @return amountOut        amount of tokens bought\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"Deadline not met\\\");\\n        require(tokenIndexFrom < COINS && tokenIndexTo < COINS && tokenIndexFrom != tokenIndexTo, \\\"Swap not supported\\\");\\n        IERC20 tokenFrom = _getToken(tokenIndexFrom);\\n        // Record balance before transfer\\n        uint256 balanceBefore = tokenFrom.balanceOf(address(this));\\n        // First, pull tokens from the user\\n        tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\\n        // Use actual transferred amount for the swap\\n        dx = tokenFrom.balanceOf(address(this)) - balanceBefore;\\n        // Check if direct swap is possible\\n        address pool = _getDirectSwap(tokenIndexFrom, tokenIndexTo);\\n        if (pool != address(0)) {\\n            amountOut = _directSwap(pool, tokenIndexFrom, tokenIndexTo, dx, minDy, msg.sender);\\n        } else {\\n            // First, perform tokenFrom -> NOTE swap, recipient is this contract\\n            pool = _getDirectSwap(tokenIndexFrom, NOTE_INDEX);\\n            // Don't check minAmountOut\\n            amountOut = _directSwap(pool, tokenIndexFrom, NOTE_INDEX, dx, 0, address(this));\\n            // Then, perform NOTE -> tokenTo swap, recipient is the user\\n            pool = _getDirectSwap(NOTE_INDEX, tokenIndexTo);\\n            // Check minAmountOut\\n            amountOut = _directSwap(pool, NOTE_INDEX, tokenIndexTo, amountOut, minDy, msg.sender);\\n        }\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                                VIEWS                                 \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Wrapper for ISaddle.calculateSwap()\\n     * @param tokenIndexFrom    the token the user wants to sell\\n     * @param tokenIndexTo      the token the user wants to buy\\n     * @param dx                the amount of tokens the user wants to sell. If the token charges\\n     *                          a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amountOut        amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256 amountOut) {\\n        if (tokenIndexFrom == tokenIndexTo) return 0;\\n        // Check if direct swap is possible\\n        address pool = _getDirectSwap(tokenIndexFrom, tokenIndexTo);\\n        if (pool != address(0)) {\\n            amountOut = _getDirectAmountOut(pool, tokenIndexFrom, tokenIndexTo, dx);\\n        } else {\\n            // First, get tokenFrom -> NOTE quote\\n            pool = _getDirectSwap(tokenIndexFrom, NOTE_INDEX);\\n            amountOut = _getDirectAmountOut(pool, tokenIndexFrom, NOTE_INDEX, dx);\\n            // Then, get NOTE -> tokenTo quote\\n            pool = _getDirectSwap(NOTE_INDEX, tokenIndexTo);\\n            amountOut = _getDirectAmountOut(pool, NOTE_INDEX, tokenIndexTo, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrapper for ISaddle.getToken()\\n     * @param index     the index of the token\\n     * @return token    address of the token at given index\\n     */\\n    function getToken(uint8 index) external pure returns (IERC20 token) {\\n        token = _getToken(index);\\n        require(address(token) != address(0), \\\"Out of range\\\");\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                          INTERNAL FUNCTIONS                          \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Performs a swap between tokens through given pool,\\n     * assuming tokens to sell are already in this contract.\\n     * @param pool          Pool to execute the swap through\\n     * @param indexFrom     Index of token to sell (see _getToken())\\n     * @param indexTo       Index of token to buy (see _getToken())\\n     * @param amountIn      Amount of tokens to sell\\n     * @param minAmountOut  Minimum amount of tokens to buy, or tx will revert\\n     * @param recipient     Address to transfer bought tokens to\\n     * @return amountOut    Amount of token bought\\n     */\\n    function _directSwap(\\n        address pool,\\n        uint256 indexFrom,\\n        uint256 indexTo,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient\\n    ) internal returns (uint256 amountOut) {\\n        if (pool == SYNAPSE_NUSD_POOL) {\\n            // Perform a swap through Synapse pool: check output amount, but don't check timestamp\\n            // Indexes in Synapse pool match the indexes in SwapWrapper\\n            amountOut = ISynapse(pool).swap({\\n                tokenIndexFrom: uint8(indexFrom),\\n                tokenIndexTo: uint8(indexTo),\\n                dx: amountIn,\\n                minDy: minAmountOut,\\n                deadline: MAX_UINT\\n            });\\n            // Transfer tokens to recipient, if needed\\n            if (recipient != address(this)) {\\n                _getToken(indexTo).safeTransfer(recipient, amountOut);\\n            }\\n        } else if (pool == CANTO_DEX_USDC_POOL || pool == CANTO_DEX_USDT_POOL) {\\n            // Get starting token\\n            IERC20 tokenFrom = _getToken(indexFrom);\\n            // Get a quote, and check it against minimum amount out\\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\\n            require(amountOut >= minAmountOut, \\\"Swap didn't result in min tokens\\\");\\n            // Transfer starting token to Pair contract\\n            tokenFrom.safeTransfer(address(pool), amountIn);\\n            // NOTE is token0 in both NOTE/USDC and NOTE/USDT pool,\\n            // because NOTE address is lexicographically smaller\\n            (uint256 amount0Out, uint256 amount1Out) = (indexFrom == NOTE_INDEX)\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            // Perform a swap, transfer the bought token to the recipient directly\\n            ICantoDex(pool).swap(amount0Out, amount1Out, recipient, bytes(\\\"\\\"));\\n        } else {\\n            // Sanity check: should never reach this\\n            assert(false);\\n        }\\n    }\\n\\n    /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557*\\\\\\n    \\u258f*\\u2551                            INTERNAL VIEWS                            \\u2551*\\u2595\\n    \\\\*\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n    /**\\n     * @notice Get a quote for a swap between two tokens via a given pool.\\n     * @param pool          Pool to execute the swap through\\n     * @param indexFrom     Index of token to sell (see _getToken())\\n     * @param indexTo       Index of token to buy (see _getToken())\\n     * @param amountIn      Amount of tokens to sell\\n     * @return amountOut    Quote for amount of tokens to buy\\n     */\\n    function _getDirectAmountOut(\\n        address pool,\\n        uint256 indexFrom,\\n        uint256 indexTo,\\n        uint256 amountIn\\n    ) internal view returns (uint256 amountOut) {\\n        // First, check input amount\\n        if (amountIn == 0) return 0;\\n        if (pool == SYNAPSE_NUSD_POOL) {\\n            // Indexes in Synapse pool match the indexes in SwapWrapper\\n            amountOut = ISynapse(pool).calculateSwap(uint8(indexFrom), uint8(indexTo), amountIn);\\n        } else if (pool == CANTO_DEX_USDC_POOL || pool == CANTO_DEX_USDT_POOL) {\\n            // Get starting token\\n            IERC20 tokenFrom = _getToken(indexFrom);\\n            // Get a quote\\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\\n        }\\n        /// @dev amountOut is 0 if direct swap is not supported\\n    }\\n\\n    /**\\n     * @notice Gets pool address for direct swap between two tokens.\\n     * @dev Returns address(0) if swap is not possible.\\n     * @param indexFrom    Index of token to sell (see _getToken())\\n     * @param indexTo      Index of token to buy (see _getToken())\\n     * @return pool         Pool address that can do tokenFrom -> tokenTo swap\\n     */\\n    function _getDirectSwap(uint256 indexFrom, uint256 indexTo) internal pure returns (address pool) {\\n        if (indexFrom == NOTE_INDEX) {\\n            // Get pool for NOTE -> * swap\\n            pool = _getDirectSwapNOTE(indexTo);\\n        } else if (indexTo == NOTE_INDEX) {\\n            // Get pool for * -> NOTE swap\\n            pool = _getDirectSwapNOTE(indexFrom);\\n        }\\n        /// @dev pool is address(0) if direct swap is not supported.\\n    }\\n\\n    /**\\n     * @notice Gets token represented by a given index in this contract.\\n     * @dev Returns address(0) if token index is out of bounds.\\n     * @param tokenIndex    This contract's index of token\\n     * @return token        Token represented by `tokenIndex`\\n     */\\n    function _getToken(uint256 tokenIndex) internal pure returns (IERC20 token) {\\n        if (tokenIndex == NUSD_INDEX) {\\n            token = NUSD;\\n        } else if (tokenIndex == NOTE_INDEX) {\\n            token = NOTE;\\n        } else if (tokenIndex == USDC_INDEX) {\\n            token = USDC;\\n        } else if (tokenIndex == USDT_INDEX) {\\n            token = USDT;\\n        }\\n        /// @dev token is IERC20(address(0)) for unsupported indexes\\n    }\\n\\n    /**\\n     * @notice Gets pool address for direct swap between NOTE and a given token.\\n     * @dev Returns address(0) if swap is not possible.\\n     * @param tokenIndex   Index of token to swap (see _getToken())\\n     * @return pool         Pool address that can do `tokenIndex` <> NOTE swap\\n     */\\n    function _getDirectSwapNOTE(uint256 tokenIndex) internal pure returns (address pool) {\\n        if (tokenIndex == NUSD_INDEX) {\\n            // nUSD <> NOTE is routed through Synapse\\n            pool = SYNAPSE_NUSD_POOL;\\n        } else if (tokenIndex == USDC_INDEX) {\\n            // USDC <> NOTE is routed through CantoDEX\\n            pool = CANTO_DEX_USDC_POOL;\\n        } else if (tokenIndex == USDT_INDEX) {\\n            // USDT <> NOTE is routed through CantoDEX\\n            pool = CANTO_DEX_USDT_POOL;\\n        }\\n        /// @dev pool is address(0) if tokenIndex is NOTE_INDEX, or out of range\\n    }\\n}\\n\",\"keccak256\":\"0x88e930d3c09afcbe9d93addde7d44c185625024afb60b6550907f6271527199d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200005573d8836af2e565d3befce7d906af63ee45a57e8f807307379565cd8b0cae7c60dc78e7f601b34af2a21c6000196200009e602090811b620004f917901c565b62000098734e71a2e537b7f9d9413d3991d37958c0b5e1e5037307379565cd8b0cae7c60dc78e7f601b34af2a21c6000196200009e602090811b620004f917901c565b6200051b565b8015806200011c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015620000f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011a919062000464565b155b620001945760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001ec918591620001f116565b505050565b60006200024d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620002cf60201b620006fe179092919060201c565b805190915015620001ec57808060200190518101906200026e91906200047e565b620001ec5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200018b565b6060620002e08484600085620002ea565b90505b9392505050565b6060824710156200034d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200018b565b6001600160a01b0385163b620003a65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200018b565b600080866001600160a01b03168587604051620003c49190620004c8565b60006040518083038185875af1925050503d806000811462000403576040519150601f19603f3d011682016040523d82523d6000602084013e62000408565b606091505b5090925090506200041b82828662000426565b979650505050505050565b6060831562000437575081620002e3565b825115620004485782518084602001fd5b8160405162461bcd60e51b81526004016200018b9190620004e6565b6000602082840312156200047757600080fd5b5051919050565b6000602082840312156200049157600080fd5b81518015158114620002e357600080fd5b60005b83811015620004bf578181015183820152602001620004a5565b50506000910152565b60008251620004dc818460208701620004a2565b9190910192915050565b602081526000825180602084015262000507816040850160208701620004a2565b601f01601f19169190910160400192915050565b611417806200052b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806382b86600146100465780639169558614610083578063a95b089f146100a4575b600080fd5b6100596100543660046111c1565b6100b7565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100966100913660046111dc565b61014e565b60405190815260200161007a565b6100966100b2366004611229565b61044b565b60006100c58260ff16610715565b905073ffffffffffffffffffffffffffffffffffffffff8116610149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b919050565b6000814211156101ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d6574000000000000000000000000000000006044820152606401610140565b60048660ff161080156101d0575060048560ff16105b80156101e257508460ff168660ff1614155b610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f53776170206e6f7420737570706f7274656400000000000000000000000000006044820152606401610140565b60006102568760ff16610715565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190611265565b905061030e73ffffffffffffffffffffffffffffffffffffffff83163330896107a0565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa15801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190611265565b6103a8919061127e565b955060006103bc8960ff168960ff16610804565b905073ffffffffffffffffffffffffffffffffffffffff8116156103f5576103ee818a60ff168a60ff168a8a33610838565b935061043f565b6104038960ff166001610804565b9050610418818a60ff1660018a600030610838565b935061042860018960ff16610804565b905061043c8160018a60ff16878a33610838565b93505b50505095945050505050565b60008260ff168460ff1603610462575060006104f2565b60006104748560ff168560ff16610804565b905073ffffffffffffffffffffffffffffffffffffffff8116156104ab576104a4818660ff168660ff1686610bfb565b91506104f0565b6104b98560ff166001610804565b90506104cb818660ff16600186610bfb565b91506104db60018560ff16610804565b90506104ed8160018660ff1685610bfb565b91505b505b9392505050565b80158061059957506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190611265565b155b610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610140565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106f99084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610dfd565b505050565b606061070d8484600085610f09565b949350505050565b600081610737575073d8836af2e565d3befce7d906af63ee45a57e8f80919050565b6001820361075a5750734e71a2e537b7f9d9413d3991d37958c0b5e1e503919050565b6002820361077d57507380b5a32e4f032b2a058b4f29ec95eefeeb87adcd919050565b60038203610149575073d567b3d7b8fe3c79a1ad8da978812cfc4fa05e75919050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107fe9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610677565b50505050565b60006001830361081e576108178261109f565b9050610832565b600182036108325761082f8361109f565b90505b92915050565b60007ffffffffffffffffffffffffff8c86a9a3274f351839f23871809fe4cb50d5de473ffffffffffffffffffffffffffffffffffffffff881601610995576040517f9169558600000000000000000000000000000000000000000000000000000000815260ff80881660048301528616602482015260448101859052606481018490527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608482015273ffffffffffffffffffffffffffffffffffffffff88169063916955869060a4016020604051808303816000875af1158015610922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109469190611265565b905073ffffffffffffffffffffffffffffffffffffffff8216301461099057610990828261097388610715565b73ffffffffffffffffffffffffffffffffffffffff169190611107565b610bf1565b73ffffffffffffffffffffffffffffffffffffffff8716739571997a66d63958e1b3de9647c22bd6b9e7228c14806109f6575073ffffffffffffffffffffffffffffffffffffffff87167335db1f3a6a6f07f82c76fcc415db6cfb1a7df833145b15610be9576000610a0687610715565b6040517ff140a35a0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192509089169063f140a35a90604401602060405180830381865afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190611265565b915083821015610b0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53776170206469646e277420726573756c7420696e206d696e20746f6b656e736044820152606401610140565b610b2e73ffffffffffffffffffffffffffffffffffffffff82168987611107565b60008060018914610b4157836000610b45565b6000845b604080516020810182526000815290517f022c0d9f00000000000000000000000000000000000000000000000000000000815292945090925073ffffffffffffffffffffffffffffffffffffffff8c169163022c0d9f91610baf91869186918b9190600401611326565b600060405180830381600087803b158015610bc957600080fd5b505af1158015610bdd573d6000803e3d6000fd5b50505050505050610bf1565b610bf1611361565b9695505050505050565b600081600003610c0d5750600061070d565b7ffffffffffffffffffffffffff8c86a9a3274f351839f23871809fe4cb50d5de473ffffffffffffffffffffffffffffffffffffffff861601610cf1576040517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff8086166004830152841660248201526044810183905273ffffffffffffffffffffffffffffffffffffffff86169063a95b089f90606401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea9190611265565b905061070d565b73ffffffffffffffffffffffffffffffffffffffff8516739571997a66d63958e1b3de9647c22bd6b9e7228c1480610d52575073ffffffffffffffffffffffffffffffffffffffff85167335db1f3a6a6f07f82c76fcc415db6cfb1a7df833145b1561070d576000610d6285610715565b6040517ff140a35a0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192509087169063f140a35a90604401602060405180830381865afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611265565b6000610e5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106fe9092919063ffffffff16565b8051909150156106f95780806020019051810190610e7d9190611390565b6106f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610140565b606082471015610f9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610140565b73ffffffffffffffffffffffffffffffffffffffff85163b611019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610140565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104291906113b2565b60006040518083038185875af1925050503d806000811461107f576040519150601f19603f3d011682016040523d82523d6000602084013e611084565b606091505b509150915061109482828661115d565b979650505050505050565b6000816110c157507307379565cd8b0cae7c60dc78e7f601b34af2a21c919050565b600282036110e45750739571997a66d63958e1b3de9647c22bd6b9e7228c919050565b6003820361014957507335db1f3a6a6f07f82c76fcc415db6cfb1a7df833919050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106f99084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610677565b6060831561116c5750816104f2565b82511561117c5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014091906113ce565b803560ff8116811461014957600080fd5b6000602082840312156111d357600080fd5b61082f826111b0565b600080600080600060a086880312156111f457600080fd5b6111fd866111b0565b945061120b602087016111b0565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561123e57600080fd5b611247846111b0565b9250611255602085016111b0565b9150604084013590509250925092565b60006020828403121561127757600080fd5b5051919050565b81810381811115610832577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60005b838110156112d35781810151838201526020016112bb565b50506000910152565b600081518084526112f48160208601602086016112b8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000610bf160808301846112dc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000602082840312156113a257600080fd5b815180151581146104f257600080fd5b600082516113c48184602087016112b8565b9190910192915050565b60208152600061082f60208301846112dc56fea2646970667358221220877c71b1d0a10779fa0c11bc5dc1c3f03bf55deba9d110cfa4adeb9500aee8dd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806382b86600146100465780639169558614610083578063a95b089f146100a4575b600080fd5b6100596100543660046111c1565b6100b7565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100966100913660046111dc565b61014e565b60405190815260200161007a565b6100966100b2366004611229565b61044b565b60006100c58260ff16610715565b905073ffffffffffffffffffffffffffffffffffffffff8116610149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b919050565b6000814211156101ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f446561646c696e65206e6f74206d6574000000000000000000000000000000006044820152606401610140565b60048660ff161080156101d0575060048560ff16105b80156101e257508460ff168660ff1614155b610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f53776170206e6f7420737570706f7274656400000000000000000000000000006044820152606401610140565b60006102568760ff16610715565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190611265565b905061030e73ffffffffffffffffffffffffffffffffffffffff83163330896107a0565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa15801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190611265565b6103a8919061127e565b955060006103bc8960ff168960ff16610804565b905073ffffffffffffffffffffffffffffffffffffffff8116156103f5576103ee818a60ff168a60ff168a8a33610838565b935061043f565b6104038960ff166001610804565b9050610418818a60ff1660018a600030610838565b935061042860018960ff16610804565b905061043c8160018a60ff16878a33610838565b93505b50505095945050505050565b60008260ff168460ff1603610462575060006104f2565b60006104748560ff168560ff16610804565b905073ffffffffffffffffffffffffffffffffffffffff8116156104ab576104a4818660ff168660ff1686610bfb565b91506104f0565b6104b98560ff166001610804565b90506104cb818660ff16600186610bfb565b91506104db60018560ff16610804565b90506104ed8160018660ff1685610bfb565b91505b505b9392505050565b80158061059957506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105979190611265565b155b610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610140565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106f99084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610dfd565b505050565b606061070d8484600085610f09565b949350505050565b600081610737575073d8836af2e565d3befce7d906af63ee45a57e8f80919050565b6001820361075a5750734e71a2e537b7f9d9413d3991d37958c0b5e1e503919050565b6002820361077d57507380b5a32e4f032b2a058b4f29ec95eefeeb87adcd919050565b60038203610149575073d567b3d7b8fe3c79a1ad8da978812cfc4fa05e75919050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107fe9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610677565b50505050565b60006001830361081e576108178261109f565b9050610832565b600182036108325761082f8361109f565b90505b92915050565b60007ffffffffffffffffffffffffff8c86a9a3274f351839f23871809fe4cb50d5de473ffffffffffffffffffffffffffffffffffffffff881601610995576040517f9169558600000000000000000000000000000000000000000000000000000000815260ff80881660048301528616602482015260448101859052606481018490527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608482015273ffffffffffffffffffffffffffffffffffffffff88169063916955869060a4016020604051808303816000875af1158015610922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109469190611265565b905073ffffffffffffffffffffffffffffffffffffffff8216301461099057610990828261097388610715565b73ffffffffffffffffffffffffffffffffffffffff169190611107565b610bf1565b73ffffffffffffffffffffffffffffffffffffffff8716739571997a66d63958e1b3de9647c22bd6b9e7228c14806109f6575073ffffffffffffffffffffffffffffffffffffffff87167335db1f3a6a6f07f82c76fcc415db6cfb1a7df833145b15610be9576000610a0687610715565b6040517ff140a35a0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192509089169063f140a35a90604401602060405180830381865afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190611265565b915083821015610b0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53776170206469646e277420726573756c7420696e206d696e20746f6b656e736044820152606401610140565b610b2e73ffffffffffffffffffffffffffffffffffffffff82168987611107565b60008060018914610b4157836000610b45565b6000845b604080516020810182526000815290517f022c0d9f00000000000000000000000000000000000000000000000000000000815292945090925073ffffffffffffffffffffffffffffffffffffffff8c169163022c0d9f91610baf91869186918b9190600401611326565b600060405180830381600087803b158015610bc957600080fd5b505af1158015610bdd573d6000803e3d6000fd5b50505050505050610bf1565b610bf1611361565b9695505050505050565b600081600003610c0d5750600061070d565b7ffffffffffffffffffffffffff8c86a9a3274f351839f23871809fe4cb50d5de473ffffffffffffffffffffffffffffffffffffffff861601610cf1576040517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff8086166004830152841660248201526044810183905273ffffffffffffffffffffffffffffffffffffffff86169063a95b089f90606401602060405180830381865afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea9190611265565b905061070d565b73ffffffffffffffffffffffffffffffffffffffff8516739571997a66d63958e1b3de9647c22bd6b9e7228c1480610d52575073ffffffffffffffffffffffffffffffffffffffff85167335db1f3a6a6f07f82c76fcc415db6cfb1a7df833145b1561070d576000610d6285610715565b6040517ff140a35a0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192509087169063f140a35a90604401602060405180830381865afa158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611265565b6000610e5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106fe9092919063ffffffff16565b8051909150156106f95780806020019051810190610e7d9190611390565b6106f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610140565b606082471015610f9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610140565b73ffffffffffffffffffffffffffffffffffffffff85163b611019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610140565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161104291906113b2565b60006040518083038185875af1925050503d806000811461107f576040519150601f19603f3d011682016040523d82523d6000602084013e611084565b606091505b509150915061109482828661115d565b979650505050505050565b6000816110c157507307379565cd8b0cae7c60dc78e7f601b34af2a21c919050565b600282036110e45750739571997a66d63958e1b3de9647c22bd6b9e7228c919050565b6003820361014957507335db1f3a6a6f07f82c76fcc415db6cfb1a7df833919050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106f99084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610677565b6060831561116c5750816104f2565b82511561117c5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014091906113ce565b803560ff8116811461014957600080fd5b6000602082840312156111d357600080fd5b61082f826111b0565b600080600080600060a086880312156111f457600080fd5b6111fd866111b0565b945061120b602087016111b0565b94979496505050506040830135926060810135926080909101359150565b60008060006060848603121561123e57600080fd5b611247846111b0565b9250611255602085016111b0565b9150604084013590509250925092565b60006020828403121561127757600080fd5b5051919050565b81810381811115610832577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60005b838110156112d35781810151838201526020016112bb565b50506000910152565b600081518084526112f48160208601602086016112b8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000610bf160808301846112dc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000602082840312156113a257600080fd5b815180151581146104f257600080fd5b600082516113c48184602087016112b8565b9190910192915050565b60208152600061082f60208301846112dc56fea2646970667358221220877c71b1d0a10779fa0c11bc5dc1c3f03bf55deba9d110cfa4adeb9500aee8dd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateSwap(uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges                          a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "amountOut": "       amount of tokens the user will receive"
        }
      },
      "getToken(uint8)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "token": "   address of the token at given index"
        }
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "dx": "the amount of tokens the user wants to swap from",
          "minDy": "the min amount the user would like to receive, or revert.",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        },
        "returns": {
          "amountOut": "       amount of tokens bought"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateSwap(uint8,uint8,uint256)": {
        "notice": "Wrapper for ISaddle.calculateSwap()"
      },
      "getToken(uint8)": {
        "notice": "Wrapper for ISaddle.getToken()"
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Wrapper for ISaddle.swap()"
      }
    },
    "notice": "Contract mimicking Saddle swap interface to connect following pools: - Synapse    nUSD/NOTE - CantoDex   NOTE/USDC - CantoDex   NOTE/USDT Swaps between \"disconnected\" coins are routed through NOTE.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}