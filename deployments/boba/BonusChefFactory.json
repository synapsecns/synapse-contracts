{
  "address": "0xB0e1a7FE9C3bff7C75606Ae77Efd33dd09601cBd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "BonusChefCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chefPoolID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39a03401e6802536809457b9245c9b2cc3e77c4704366ebd8e3e4f53b3b100b0",
  "receipt": {
    "to": null,
    "from": "0x19EB7D50E97bb8BFFC1Fb60964c29BFA3a706aee",
    "contractAddress": "0xB0e1a7FE9C3bff7C75606Ae77Efd33dd09601cBd",
    "transactionIndex": 0,
    "gasUsed": "1846466",
    "logsBloom": "0x
    "blockHash": "0x655d14250f38468debe9924bed1a6199c32d7f4e604244c85bb2124f9567948c",
    "transactionHash": "0x39a03401e6802536809457b9245c9b2cc3e77c4704366ebd8e3e4f53b3b100b0",
    "logs": [],
    "blockNumber": 325413,
    "cumulativeGasUsed": "1846466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c77097658f5539e263b357b7931ba510",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"BonusChefCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefPoolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsDistribution\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BonusChefFactory.sol\":\"BonusChefFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // EIP 2612\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\",\"keccak256\":\"0x8004f86e4536cca55b8eeb2621fe18e1ee57d779396ddef50bce5bf70fb59867\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x69f1ccf716991e5d6d64dc0e3bc3828fd1990bc18400d680b1aa1960675daaaa\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/bridge/BonusChef.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IERC20, BoringERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport {IRewarder} from \\\"./interfaces/IRewarder.sol\\\";\\n\\n// A multistakingreward contract that allows stakers to staking a single token and recieve various reward tokens.\\n// Modified from Uniswap staking reward contract at https://etherscan.io/address/0x7FBa4B8Dc5E7616e59622806932DBea72537A56b#code\\n// with the following changes:\\n// - Expand from single reward token to a list of reward tokens\\n// - Allow removing inactive reward pools from list in case list grows above iteration gas limit\\n// - Allow governance to rescue unclaimed tokens of inactive pools\\n\\n// Modified from AladdinDAO MultiStakingRewards contract at https://github.com/AladdinDAO/aladdin-contracts/blob/main/contracts/reward/MultiStakingRewards.sol\\n// with the following changes:\\n// 1. To ensure compatibility with existing IRewards interface:\\n//      a. SafeERC20 -> BoringERC20\\n//      b. onParentReward() -> onSynapseReward()\\n//      c. added pendingTokens(), which returns a list of ALL pending rewards for user\\n// 2. To ensure compatibility with deployed MiniChefV2 contract:\\n//      a. Sending rewards to custom address is possible to make sure\\n//         bonus rewards are always trasnferred to the same address as SYN rewards\\n// 3. Removed stake and withdraw, as they happen in the MiniChef\\n// 4. Read staking balance and total supply from MiniChef\\n// 5. notifyRewardAmount updated to transferFrom(msg.sender) instead of using permissioned distributor\\n// 6. Added a few sanity checks\\ncontract BonusChef is IRewarder, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using BoringERC20 for IERC20;\\n\\n    /* ========== STRUCTS ========== */\\n\\n    // Info of each reward pool.\\n    struct RewardPool {\\n        IERC20 rewardToken; // Address of reward token.\\n        uint256 periodFinish; // timestamp of when this reward pool finishes distribution\\n        uint256 rewardRate; // amount of rewards distributed per unit of time\\n        uint256 rewardsDuration; // duration of distribution\\n        uint256 lastUpdateTime; // timestamp of when reward info was last updated\\n        uint256 rewardPerTokenStored; // current rewards per token based on total rewards and total staked\\n        mapping(address => uint256) userRewardPerTokenPaid; // amount of rewards per token already paided out to user\\n        mapping(address => uint256) rewards; // amount of rewards user has earned\\n        bool isActive; // mark if the pool is active\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public rewardsDistribution;\\n    address public governance;\\n\\n    IMiniChefV2 private immutable miniChef;\\n    uint256 private immutable chefPoolID;\\n    IERC20 private immutable chefStakingToken;\\n\\n    mapping(address => RewardPool) public rewardPools; // reward token to reward pool mapping\\n    address[] public activeRewardPools; // list of reward tokens that are distributing rewards\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IMiniChefV2 _miniChef,\\n        uint256 _chefPoolID,\\n        address _rewardsDistribution,\\n        address _governance\\n    ) public {\\n        miniChef = _miniChef;\\n        chefPoolID = _chefPoolID;\\n        chefStakingToken = _miniChef.lpToken(_chefPoolID);\\n\\n        rewardsDistribution = _rewardsDistribution;\\n        governance = _governance;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // @notice gets the number of active pools\\n    function activeRewardPoolsLength() external view returns (uint256) {\\n        return activeRewardPools.length;\\n    }\\n\\n    function lastTimeRewardApplicable(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return Math.min(block.timestamp, pool.periodFinish);\\n    }\\n\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return pool.rewardPerTokenStored;\\n        }\\n        return\\n            pool.rewardPerTokenStored.add(\\n                lastTimeRewardApplicable(_rewardToken)\\n                    .sub(pool.lastUpdateTime)\\n                    .mul(pool.rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return\\n            balanceOf(_account)\\n                .mul(\\n                rewardPerToken(_rewardToken).sub(\\n                    pool.userRewardPerTokenPaid[_account]\\n                )\\n            ).div(1e18)\\n                .add(pool.rewards[_account]);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return chefStakingToken.balanceOf(address(miniChef));\\n    }\\n\\n    function balanceOf(address _account) public view returns (uint256) {\\n        (uint256 balance, ) = miniChef.userInfo(chefPoolID, _account);\\n        return balance;\\n    }\\n\\n    function getRewardForDuration(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate.mul(pool.rewardsDuration);\\n    }\\n\\n    function periodFinish(address _rewardToken) public view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.periodFinish;\\n    }\\n\\n    function rewardRate(address _rewardToken) public view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate;\\n    }\\n\\n    function rewardsDuration(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardsDuration;\\n    }\\n\\n    function lastUpdateTime(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.lastUpdateTime;\\n    }\\n\\n    // useful for UI estimation of pool's APR\\n    function rewardPerTokenStored(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardPerTokenStored;\\n    }\\n\\n    function userRewardPerTokenPaid(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.userRewardPerTokenPaid[_account];\\n    }\\n\\n    function rewards(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewards[_account];\\n    }\\n\\n    function pendingTokens(\\n        uint256,\\n        address _user,\\n        uint256\\n    ) external view override returns (IERC20[] memory, uint256[] memory) {\\n        uint256 _activePoolsAmount = activeRewardPools.length;\\n        IERC20[] memory _rewardTokens = new IERC20[](_activePoolsAmount);\\n        uint256[] memory _rewardAmounts = new uint256[](_activePoolsAmount);\\n        for (uint8 i = 0; i < _activePoolsAmount; i++) {\\n            address _rewardToken = activeRewardPools[i];\\n            _rewardTokens[i] = IERC20(_rewardToken);\\n            _rewardAmounts[i] = earned(_rewardToken, _user);\\n        }\\n\\n        return (_rewardTokens, _rewardAmounts);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Called by MiniChef reward claim\\n    function onSynapseReward(\\n        uint256,\\n        address _user,\\n        address _recipient,\\n        uint256,\\n        uint256\\n    ) external override onlyMiniChef {\\n        _getAllActiveRewardsFor(_user, _recipient);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Called by rewardsDistribution AFTER the pool for _rewardToken is\\n    // set up via addRewardPool(_rewardToken, _rewardsDuration)\\n\\n    // If the pool is running:\\n    //      Will add (_amount) to the reward pool\\n    //      and extend its duration by pool.rewardsDuration\\n\\n    // If the pool is NOT running:\\n    //      Will set (_amount) as the reward pool capacity and start the pool,\\n    //      which will be running for pool.rewardsDuration\\n    function notifyRewardAmount(address _rewardToken, uint256 _amount)\\n        external\\n        onlyRewardsDistribution\\n        updateReward(_rewardToken, address(0))\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.rewardsDuration != 0, \\\"Pool is not added\\\");\\n\\n        if (block.timestamp >= pool.periodFinish) {\\n            pool.rewardRate = _amount.div(pool.rewardsDuration);\\n        } else {\\n            uint256 remaining = pool.periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(pool.rewardRate);\\n            pool.rewardRate = _amount.add(leftover).div(pool.rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = pool.rewardToken.balanceOf(address(this));\\n        require(\\n            pool.rewardRate <= balance.div(pool.rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        pool.lastUpdateTime = block.timestamp;\\n        pool.periodFinish = block.timestamp.add(pool.rewardsDuration);\\n\\n        emit RewardAdded(_rewardToken, _amount);\\n    }\\n\\n    // Add new reward pool to list.\\n    // This can also be used to add inactive pool, make sure\\n    // to rescue() all the remaining tokens from previous round beforehand\\n    function addRewardPool(address _rewardToken, uint256 _rewardsDuration)\\n        external\\n        onlyGov\\n    {\\n        require(rewardPools[_rewardToken].isActive == false, \\\"Pool is active\\\");\\n        require(_rewardsDuration != 0, \\\"Duration is null\\\");\\n        rewardPools[_rewardToken] = RewardPool({\\n            rewardToken: IERC20(_rewardToken),\\n            periodFinish: 0,\\n            rewardRate: 0,\\n            rewardsDuration: _rewardsDuration,\\n            lastUpdateTime: 0,\\n            rewardPerTokenStored: 0,\\n            isActive: true\\n        });\\n        activeRewardPools.push(_rewardToken);\\n    }\\n\\n    // Remove rewards pool from active list\\n    // All rewards from the pool become unclaimable, only rescue() can get them out\\n    function inactivateRewardPool(address _rewardToken) external onlyGov {\\n        // find the index\\n        uint256 indexToDelete = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            if (activeRewardPools[i] == _rewardToken) {\\n                indexToDelete = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        require(found, \\\"Reward pool not found\\\");\\n        _inactivateRewardPool(indexToDelete);\\n    }\\n\\n    // In case the list gets so large and make iteration impossible\\n    // All rewards from the pool become unclaimable, only rescue() can get them out\\n    function inactivateRewardPoolByIndex(uint256 _index) external onlyGov {\\n        _inactivateRewardPool(_index);\\n    }\\n\\n    function _inactivateRewardPool(uint256 _index) internal {\\n        RewardPool storage pool = rewardPools[activeRewardPools[_index]];\\n        pool.isActive = false;\\n        // we don't care about the ordering of the active reward pool array\\n        // so we can just swap the element to delete with the last element\\n        activeRewardPools[_index] = activeRewardPools[\\n            activeRewardPools.length - 1\\n        ];\\n        activeRewardPools.pop();\\n    }\\n\\n    // Allow governance to rescue unclaimed inactive rewards\\n    function rescue(address _rewardToken) external onlyGov {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive == false, \\\"Cannot withdraw active reward token\\\");\\n\\n        uint256 _balance = IERC20(_rewardToken).balanceOf(address(this));\\n        IERC20(_rewardToken).safeTransfer(governance, _balance);\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyGov\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    function setGovernance(address _governance) external onlyGov {\\n        governance = _governance;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _getAllActiveRewardsFor(address _account, address _recipient)\\n        internal\\n        updateActiveRewards(_account)\\n    {\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            _getReward(activeRewardPools[i], _account, _recipient);\\n        }\\n    }\\n\\n    function _getReward(\\n        address _rewardToken,\\n        address _account,\\n        address _recipient\\n    ) internal {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive, \\\"Pool is inactive\\\");\\n\\n        uint256 reward = pool.rewards[_account];\\n        if (reward > 0) {\\n            pool.rewards[_account] = 0;\\n            pool.rewardToken.safeTransfer(_recipient, reward);\\n            emit RewardPaid(\\n                address(pool.rewardToken),\\n                _account,\\n                _recipient,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateActiveRewards(address _account) {\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            RewardPool storage pool = rewardPools[activeRewardPools[i]];\\n\\n            pool.rewardPerTokenStored = rewardPerToken(\\n                address(pool.rewardToken)\\n            );\\n            pool.lastUpdateTime = lastTimeRewardApplicable(\\n                address(pool.rewardToken)\\n            );\\n            if (_account != address(0)) {\\n                pool.rewards[_account] = earned(\\n                    address(pool.rewardToken),\\n                    _account\\n                );\\n                pool.userRewardPerTokenPaid[_account] = pool\\n                .rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier updateReward(address _rewardToken, address _account) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n\\n        pool.rewardPerTokenStored = rewardPerToken(address(pool.rewardToken));\\n        pool.lastUpdateTime = lastTimeRewardApplicable(\\n            address(pool.rewardToken)\\n        );\\n        if (_account != address(0)) {\\n            pool.rewards[_account] = earned(\\n                address(pool.rewardToken),\\n                _account\\n            );\\n            pool.userRewardPerTokenPaid[_account] = pool.rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyMiniChef() {\\n        require(msg.sender == address(miniChef), \\\"!parent\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"!rewardsDistribution\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed rewardToken, uint256 amount);\\n    event RewardPaid(\\n        address indexed rewardToken,\\n        address indexed user,\\n        address recipient,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0x923b8858287ee856389b0a347fc38304fff30dcb4c5672ad147c3783cf5b98f6\",\"license\":\"ISC\"},\"contracts/bridge/BonusChefFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport \\\"./BonusChef.sol\\\";\\n\\n\\n// BonusChefFactory wraps bonus chef to faciliate deployment of new bonus chef contracts\\ncontract BonusChefFactory {\\n    using SafeMath for uint256;\\n\\n    event BonusChefCreated(address tokenAddress);\\n\\n    // @notice deploys a new bonus chef contract\\n    function deploy(\\n        IMiniChefV2 miniChef,\\n        uint256 chefPoolID,\\n        address rewardsDistribution\\n    ) external returns (address) {\\n        BonusChef chef = new BonusChef(\\n            miniChef,\\n            chefPoolID,\\n            rewardsDistribution,\\n            msg.sender\\n        );\\n\\n        emit BonusChefCreated(address(chef));\\n        return address(chef);\\n    }\\n}\",\"keccak256\":\"0xd5cb69acafb942c3f87cedd0617c776258dca8c2ac1ecf13fc87449c7723ff46\",\"license\":\"ISC\"},\"contracts/bridge/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSynapsePerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function lpToken(uint) external view returns(IERC20);\\n    function poolInfo(uint) external view returns (IMiniChefV2.PoolInfo memory);\\n    function poolLength() external view returns (uint256);\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\n    function harvest(uint256 pid, address to) external;\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\",\"keccak256\":\"0x15148d1153715aec7d6c785c41af76193334b1f32efa0ed53f5bcdf0f58c5a5c\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\ninterface IRewarder {\\n    using BoringERC20 for IERC20;\\n    function onSynapseReward(uint256 pid, address user, address recipient, uint256 synapseAmount, uint256 newLpAmount) external;\\n    function pendingTokens(uint256 pid, address user, uint256 synapseAmount) external view returns (IERC20[] memory, uint256[] memory);\\n}\",\"keccak256\":\"0xd9f95057ed49946660984509b877e7239b0a0f1ee8ee1ec24c153cd22b0830e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061208d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638408681d14610030575b600080fd5b61004361003e3660046100e4565b610059565b6040516100509190610125565b60405180910390f35b6000808484843360405161006c906100d7565b6100799493929190610146565b604051809103906000f080158015610095573d6000803e3d6000fd5b5090507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801816040516100c79190610125565b60405180910390a1949350505050565b611eb4806101a483390190565b6000806000606084860312156100f8578283fd5b83356101038161017e565b925060208401359150604084013561011a8161017e565b809150509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529083166040830152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff811681146101a057600080fd5b5056fe60e06040523480156200001157600080fd5b5060405162001eb438038062001eb483398101604081905262000034916200013e565b60016000556001600160601b0319606085901b1660805260a08390526040516378ed5d1f60e01b81526001600160a01b038516906378ed5d1f906200007e90869060040162000199565b60206040518083038186803b1580156200009757600080fd5b505afa158015620000ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d2919062000118565b60601b6001600160601b03191660c052600180546001600160a01b03199081166001600160a01b0394851617909155600280549091169190921617905550620001bb9050565b6000602082840312156200012a578081fd5b81516200013781620001a2565b9392505050565b6000806000806080858703121562000154578283fd5b84516200016181620001a2565b6020860151604087015191955093506200017b81620001a2565b60608601519092506200018e81620001a2565b939692955090935050565b90815260200190565b6001600160a01b0381168114620001b857600080fd5b50565b60805160601c60a05160c05160601c611cbc620001f86000398061046e5250806109c95250806103e4528061049b528061099a5250611cbc6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063638634ee116100f9578063b66503cf11610097578063da09d19d11610071578063da09d19d14610398578063e70b9e27146103ab578063eb9e5ddc146103be578063f1229777146103c6576101b9565b8063b66503cf14610351578063bcd1101414610364578063d63b3c4914610377576101b9565b80637eb48966116100d35780637eb4896614610305578063839006f2146103185780639ce43f901461032b578063ab033ea91461033e576101b9565b8063638634ee146102cc5780637035ab98146102df57806370a08231146102f2576101b9565b8063221ca18c11610166578063372d944811610140578063372d9448146102835780633fc6df6e146102a95780635aa6e675146102b15780635d910351146102b9576101b9565b8063221ca18c1461024a5780632ce9aead1461025d57806333d4cbf314610270576101b9565b80631c5ef433116101975780631c5ef433146102045780631dfa8e8114610217578063211dc32d14610237576101b9565b80630eb9eaf1146101be57806318160ddd146101d357806319762143146101f1575b600080fd5b6101d16101cc3660046116ff565b6103d9565b005b6101db61043b565b6040516101e89190611c66565b60405180910390f35b6101d16101ff366004611636565b610518565b6101d1610212366004611685565b61057c565b61022a6102253660046116cf565b610715565b6040516101e891906117e7565b6101db610245366004611651565b61073c565b6101db610258366004611636565b6107c3565b6101db61026b366004611636565b6107e5565b6101d161027e366004611636565b610803565b610296610291366004611636565b6108af565b6040516101e897969594939291906118a4565b61022a6108fa565b61022a610909565b6101db6102c7366004611636565b610918565b6101db6102da366004611636565b610937565b6101db6102ed366004611651565b610966565b6101db610300366004611636565b610995565b6101d16103133660046116cf565b610a5d565b6101d1610326366004611636565b610a93565b6101db610339366004611636565b610baf565b6101d161034c366004611636565b610bcd565b6101d161035f366004611685565b610c31565b6101db610372366004611636565b610ede565b61038a61038536600461174e565b610f0a565b6040516101e8929190611814565b6101db6103a6366004611636565b611048565b6101db6103b9366004611651565b611066565b6101db611095565b6101db6103d4366004611636565b61109b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461042a5760405162461bcd60e51b815260040161042190611abf565b60405180910390fd5b610434848461110e565b5050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104c3907f0000000000000000000000000000000000000000000000000000000000000000906004016117e7565b60206040518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051391906116e7565b905090565b6002546001600160a01b031633146105425760405162461bcd60e51b815260040161042190611918565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031633146105a65760405162461bcd60e51b815260040161042190611918565b6001600160a01b03821660009081526003602052604090206008015460ff16156105e25760405162461bcd60e51b815260040161042190611c2f565b806105ff5760405162461bcd60e51b8152600401610421906119f4565b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600396879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915160028801559751928601929092559551600480860191909155905160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909216179055565b6004818154811061072257fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038083166000908152600360209081526040808320938516835260078401825280832054600685019092528220549192916107b991906107b390670de0b6b3a7640000906107ad9061079e906107988b61109b565b9061122c565b6107a789610995565b90611254565b9061128e565b906112c0565b9150505b92915050565b6001600160a01b0381166000908152600360205260409020600201545b919050565b6001600160a01b031660009081526003602052604090206004015490565b6002546001600160a01b0316331461082d5760405162461bcd60e51b815260040161042190611918565b60008060005b60045481101561088357836001600160a01b03166004828154811061085457fe5b6000918252602090912001546001600160a01b0316141561087b5780925060019150610883565b600101610833565b50806108a15760405162461bcd60e51b815260040161042190611b64565b6108aa826112e5565b505050565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546008909501546001600160a01b0390941695929492939192909160ff1687565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001600160a01b03166000908152600360208190526040909120015490565b6001600160a01b0381166000908152600360205260408120600181015461095f904290611435565b9392505050565b6001600160a01b0391821660009081526003602090815260408083209390941682526006909201909152205490565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b8152600401610a06929190611c6f565b604080518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190611783565b509392505050565b6002546001600160a01b03163314610a875760405162461bcd60e51b815260040161042190611918565b610a90816112e5565b50565b6002546001600160a01b03163314610abd5760405162461bcd60e51b815260040161042190611918565b6001600160a01b0381166000908152600360205260409020600881015460ff1615610afa5760405162461bcd60e51b815260040161042190611b9b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610b429030906004016117e7565b60206040518083038186803b158015610b5a57600080fd5b505afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9291906116e7565b6002549091506108aa906001600160a01b0385811691168361144b565b6001600160a01b031660009081526003602052604090206005015490565b6002546001600160a01b03163314610bf75760405162461bcd60e51b815260040161042190611918565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610c5b5760405162461bcd60e51b815260040161042190611bf8565b6001600160a01b03808316600090815260036020526040812080548593610c82911661109b565b60058201558054610c9b906001600160a01b0316610937565b60048201556001600160a01b03821615610cf6578054610cc4906001600160a01b03168361073c565b6001600160a01b0383166000908152600783016020908152604080832093909355600584015460068501909152919020555b6001600160a01b038516600090815260036020819052604090912090810154610d315760405162461bcd60e51b815260040161042190611b2d565b80600101544210610d56576003810154610d4c90869061128e565b6002820155610da1565b6001810154600090610d68904261122c565b90506000610d8383600201548361125490919063ffffffff16565b6003840154909150610d99906107ad89846112c0565b600284015550505b80546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a0823190610dea9030906004016117e7565b60206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906116e7565b9050610e5382600301548261128e90919063ffffffff16565b82600201541115610e765760405162461bcd60e51b815260040161042190611af6565b42600483018190556003830154610e8d91906112c0565b60018301556040516001600160a01b038816907fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e2990610ecd908990611c66565b60405180910390a250505050505050565b6001600160a01b0381166000908152600360208190526040822090810154600282015461095f91611254565b6004546060908190818167ffffffffffffffff81118015610f2a57600080fd5b50604051908082528060200260200182016040528015610f54578160200160208202803683370190505b50905060608267ffffffffffffffff81118015610f7057600080fd5b50604051908082528060200260200182016040528015610f9a578160200160208202803683370190505b50905060005b838160ff16101561103a57600060048260ff1681548110610fbd57fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080848360ff1681518110610fed57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611017818a61073c565b838360ff168151811061102657fe5b602090810291909101015250600101610fa0565b509097909650945050505050565b6001600160a01b031660009081526003602052604090206001015490565b6001600160a01b0391821660009081526003602090815260408083209390941682526007909201909152205490565b60045490565b6001600160a01b0381166000908152600360205260408120816110bc61043b565b9050806110cf57506005015490506107e0565b6111066110fb826107ad670de0b6b3a76400006107a787600201546107a789600401546107988d610937565b6005840154906112c0565b949350505050565b8160005b6004548110156111e4576000600360006004848154811061112f57fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250611167911661109b565b60058201558054611180906001600160a01b0316610937565b60048201556001600160a01b038316156111db5780546111a9906001600160a01b03168461073c565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611112565b5060005b6004548110156112265761121e6004828154811061120257fe5b6000918252602090912001546001600160a01b03168585611547565b6001016111e8565b50505050565b60008282111561124e5760405162461bcd60e51b815260040161042190611986565b50900390565b600082611263575060006107bd565b8282028284828161127057fe5b041461095f5760405162461bcd60e51b815260040161042190611a62565b60008082116112af5760405162461bcd60e51b8152600401610421906119bd565b8183816112b857fe5b049392505050565b60008282018381101561095f5760405162461bcd60e51b81526004016104219061194f565b600060036000600484815481106112f857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560048054919250907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061137a57fe5b600091825260209091200154600480546001600160a01b0390921691849081106113a057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806113d957fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b6000818310611444578161095f565b5090919050565b60006060846001600160a01b031663a9059cbb85856040516024016114719291906117fb565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114bf91906117ae565b6000604051808303816000865af19150503d80600081146114fc576040519150601f19603f3d011682016040523d82523d6000602084013e611501565b606091505b509150915081801561152b57508051158061152b57508080602001905181019061152b91906116af565b6104345760405162461bcd60e51b8152600401610421906118e1565b6001600160a01b0383166000908152600360205260409020600881015460ff166115835760405162461bcd60e51b815260040161042190611a2b565b6001600160a01b03831660009081526007820160205260409020548015610434576001600160a01b03808516600090815260078401602052604081205582546115ce9116848361144b565b81546040516001600160a01b038087169216907fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb9061161090879086906117fb565b60405180910390a35050505050565b80356001600160a01b03811681146107bd57600080fd5b600060208284031215611647578081fd5b61095f838361161f565b60008060408385031215611663578081fd5b61166d848461161f565b915061167c846020850161161f565b90509250929050565b60008060408385031215611697578182fd5b6116a1848461161f565b946020939093013593505050565b6000602082840312156116c0578081fd5b8151801515811461095f578182fd5b6000602082840312156116e0578081fd5b5035919050565b6000602082840312156116f8578081fd5b5051919050565b600080600080600060a08688031215611716578081fd5b85359450611727876020880161161f565b9350611736876040880161161f565b94979396509394606081013594506080013592915050565b600080600060608486031215611762578283fd5b83359250611773856020860161161f565b9150604084013590509250925092565b60008060408385031215611795578182fd5b505080516020909101519092909150565b815260200190565b60008251815b818110156117ce57602081860181015185830152016117b4565b818111156117dc5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156118565781516001600160a01b031684529284019290840190600101611831565b5050508381038285015280855161186d8184611c66565b91508387019250845b81811015611897576118898385516117a6565b938501939250600101611876565b5090979650505050505050565b6001600160a01b03979097168752602087019590955260408601939093526060850191909152608084015260a0830152151560c082015260e00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b6020808252600b908201527f21676f7665726e616e6365000000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604082015260600190565b60208082526010908201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526007908201527f21706172656e7400000000000000000000000000000000000000000000000000604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b60208082526011908201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604082015260600190565b60208082526015908201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604082015260600190565b60208082526023908201527f43616e6e6f74207769746864726177206163746976652072657761726420746f60408201527f6b656e0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f2172657761726473446973747269627574696f6e000000000000000000000000604082015260600190565b6020808252600e908201527f506f6f6c20697320616374697665000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b031660208201526040019056fea264697066735822122005a6bb4707f47d6bc88ef004a821f4989f787482bacda49d097e4e87738668f264736f6c634300060c0033a2646970667358221220f44197035d2b0a90e340e4cbbcdba3de5170e6c537fc398a631db768806964a964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638408681d14610030575b600080fd5b61004361003e3660046100e4565b610059565b6040516100509190610125565b60405180910390f35b6000808484843360405161006c906100d7565b6100799493929190610146565b604051809103906000f080158015610095573d6000803e3d6000fd5b5090507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801816040516100c79190610125565b60405180910390a1949350505050565b611eb4806101a483390190565b6000806000606084860312156100f8578283fd5b83356101038161017e565b925060208401359150604084013561011a8161017e565b809150509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff948516815260208101939093529083166040830152909116606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff811681146101a057600080fd5b5056fe60e06040523480156200001157600080fd5b5060405162001eb438038062001eb483398101604081905262000034916200013e565b60016000556001600160601b0319606085901b1660805260a08390526040516378ed5d1f60e01b81526001600160a01b038516906378ed5d1f906200007e90869060040162000199565b60206040518083038186803b1580156200009757600080fd5b505afa158015620000ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d2919062000118565b60601b6001600160601b03191660c052600180546001600160a01b03199081166001600160a01b0394851617909155600280549091169190921617905550620001bb9050565b6000602082840312156200012a578081fd5b81516200013781620001a2565b9392505050565b6000806000806080858703121562000154578283fd5b84516200016181620001a2565b6020860151604087015191955093506200017b81620001a2565b60608601519092506200018e81620001a2565b939692955090935050565b90815260200190565b6001600160a01b0381168114620001b857600080fd5b50565b60805160601c60a05160c05160601c611cbc620001f86000398061046e5250806109c95250806103e4528061049b528061099a5250611cbc6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063638634ee116100f9578063b66503cf11610097578063da09d19d11610071578063da09d19d14610398578063e70b9e27146103ab578063eb9e5ddc146103be578063f1229777146103c6576101b9565b8063b66503cf14610351578063bcd1101414610364578063d63b3c4914610377576101b9565b80637eb48966116100d35780637eb4896614610305578063839006f2146103185780639ce43f901461032b578063ab033ea91461033e576101b9565b8063638634ee146102cc5780637035ab98146102df57806370a08231146102f2576101b9565b8063221ca18c11610166578063372d944811610140578063372d9448146102835780633fc6df6e146102a95780635aa6e675146102b15780635d910351146102b9576101b9565b8063221ca18c1461024a5780632ce9aead1461025d57806333d4cbf314610270576101b9565b80631c5ef433116101975780631c5ef433146102045780631dfa8e8114610217578063211dc32d14610237576101b9565b80630eb9eaf1146101be57806318160ddd146101d357806319762143146101f1575b600080fd5b6101d16101cc3660046116ff565b6103d9565b005b6101db61043b565b6040516101e89190611c66565b60405180910390f35b6101d16101ff366004611636565b610518565b6101d1610212366004611685565b61057c565b61022a6102253660046116cf565b610715565b6040516101e891906117e7565b6101db610245366004611651565b61073c565b6101db610258366004611636565b6107c3565b6101db61026b366004611636565b6107e5565b6101d161027e366004611636565b610803565b610296610291366004611636565b6108af565b6040516101e897969594939291906118a4565b61022a6108fa565b61022a610909565b6101db6102c7366004611636565b610918565b6101db6102da366004611636565b610937565b6101db6102ed366004611651565b610966565b6101db610300366004611636565b610995565b6101d16103133660046116cf565b610a5d565b6101d1610326366004611636565b610a93565b6101db610339366004611636565b610baf565b6101d161034c366004611636565b610bcd565b6101d161035f366004611685565b610c31565b6101db610372366004611636565b610ede565b61038a61038536600461174e565b610f0a565b6040516101e8929190611814565b6101db6103a6366004611636565b611048565b6101db6103b9366004611651565b611066565b6101db611095565b6101db6103d4366004611636565b61109b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461042a5760405162461bcd60e51b815260040161042190611abf565b60405180910390fd5b610434848461110e565b5050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104c3907f0000000000000000000000000000000000000000000000000000000000000000906004016117e7565b60206040518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051391906116e7565b905090565b6002546001600160a01b031633146105425760405162461bcd60e51b815260040161042190611918565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031633146105a65760405162461bcd60e51b815260040161042190611918565b6001600160a01b03821660009081526003602052604090206008015460ff16156105e25760405162461bcd60e51b815260040161042190611c2f565b806105ff5760405162461bcd60e51b8152600401610421906119f4565b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600396879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915160028801559751928601929092559551600480860191909155905160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909216179055565b6004818154811061072257fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038083166000908152600360209081526040808320938516835260078401825280832054600685019092528220549192916107b991906107b390670de0b6b3a7640000906107ad9061079e906107988b61109b565b9061122c565b6107a789610995565b90611254565b9061128e565b906112c0565b9150505b92915050565b6001600160a01b0381166000908152600360205260409020600201545b919050565b6001600160a01b031660009081526003602052604090206004015490565b6002546001600160a01b0316331461082d5760405162461bcd60e51b815260040161042190611918565b60008060005b60045481101561088357836001600160a01b03166004828154811061085457fe5b6000918252602090912001546001600160a01b0316141561087b5780925060019150610883565b600101610833565b50806108a15760405162461bcd60e51b815260040161042190611b64565b6108aa826112e5565b505050565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546008909501546001600160a01b0390941695929492939192909160ff1687565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001600160a01b03166000908152600360208190526040909120015490565b6001600160a01b0381166000908152600360205260408120600181015461095f904290611435565b9392505050565b6001600160a01b0391821660009081526003602090815260408083209390941682526006909201909152205490565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b8152600401610a06929190611c6f565b604080518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190611783565b509392505050565b6002546001600160a01b03163314610a875760405162461bcd60e51b815260040161042190611918565b610a90816112e5565b50565b6002546001600160a01b03163314610abd5760405162461bcd60e51b815260040161042190611918565b6001600160a01b0381166000908152600360205260409020600881015460ff1615610afa5760405162461bcd60e51b815260040161042190611b9b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610b429030906004016117e7565b60206040518083038186803b158015610b5a57600080fd5b505afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9291906116e7565b6002549091506108aa906001600160a01b0385811691168361144b565b6001600160a01b031660009081526003602052604090206005015490565b6002546001600160a01b03163314610bf75760405162461bcd60e51b815260040161042190611918565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610c5b5760405162461bcd60e51b815260040161042190611bf8565b6001600160a01b03808316600090815260036020526040812080548593610c82911661109b565b60058201558054610c9b906001600160a01b0316610937565b60048201556001600160a01b03821615610cf6578054610cc4906001600160a01b03168361073c565b6001600160a01b0383166000908152600783016020908152604080832093909355600584015460068501909152919020555b6001600160a01b038516600090815260036020819052604090912090810154610d315760405162461bcd60e51b815260040161042190611b2d565b80600101544210610d56576003810154610d4c90869061128e565b6002820155610da1565b6001810154600090610d68904261122c565b90506000610d8383600201548361125490919063ffffffff16565b6003840154909150610d99906107ad89846112c0565b600284015550505b80546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a0823190610dea9030906004016117e7565b60206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906116e7565b9050610e5382600301548261128e90919063ffffffff16565b82600201541115610e765760405162461bcd60e51b815260040161042190611af6565b42600483018190556003830154610e8d91906112c0565b60018301556040516001600160a01b038816907fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e2990610ecd908990611c66565b60405180910390a250505050505050565b6001600160a01b0381166000908152600360208190526040822090810154600282015461095f91611254565b6004546060908190818167ffffffffffffffff81118015610f2a57600080fd5b50604051908082528060200260200182016040528015610f54578160200160208202803683370190505b50905060608267ffffffffffffffff81118015610f7057600080fd5b50604051908082528060200260200182016040528015610f9a578160200160208202803683370190505b50905060005b838160ff16101561103a57600060048260ff1681548110610fbd57fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080848360ff1681518110610fed57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611017818a61073c565b838360ff168151811061102657fe5b602090810291909101015250600101610fa0565b509097909650945050505050565b6001600160a01b031660009081526003602052604090206001015490565b6001600160a01b0391821660009081526003602090815260408083209390941682526007909201909152205490565b60045490565b6001600160a01b0381166000908152600360205260408120816110bc61043b565b9050806110cf57506005015490506107e0565b6111066110fb826107ad670de0b6b3a76400006107a787600201546107a789600401546107988d610937565b6005840154906112c0565b949350505050565b8160005b6004548110156111e4576000600360006004848154811061112f57fe5b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190208054909250611167911661109b565b60058201558054611180906001600160a01b0316610937565b60048201556001600160a01b038316156111db5780546111a9906001600160a01b03168461073c565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611112565b5060005b6004548110156112265761121e6004828154811061120257fe5b6000918252602090912001546001600160a01b03168585611547565b6001016111e8565b50505050565b60008282111561124e5760405162461bcd60e51b815260040161042190611986565b50900390565b600082611263575060006107bd565b8282028284828161127057fe5b041461095f5760405162461bcd60e51b815260040161042190611a62565b60008082116112af5760405162461bcd60e51b8152600401610421906119bd565b8183816112b857fe5b049392505050565b60008282018381101561095f5760405162461bcd60e51b81526004016104219061194f565b600060036000600484815481106112f857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560048054919250907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061137a57fe5b600091825260209091200154600480546001600160a01b0390921691849081106113a057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806113d957fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b6000818310611444578161095f565b5090919050565b60006060846001600160a01b031663a9059cbb85856040516024016114719291906117fb565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516114bf91906117ae565b6000604051808303816000865af19150503d80600081146114fc576040519150601f19603f3d011682016040523d82523d6000602084013e611501565b606091505b509150915081801561152b57508051158061152b57508080602001905181019061152b91906116af565b6104345760405162461bcd60e51b8152600401610421906118e1565b6001600160a01b0383166000908152600360205260409020600881015460ff166115835760405162461bcd60e51b815260040161042190611a2b565b6001600160a01b03831660009081526007820160205260409020548015610434576001600160a01b03808516600090815260078401602052604081205582546115ce9116848361144b565b81546040516001600160a01b038087169216907fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb9061161090879086906117fb565b60405180910390a35050505050565b80356001600160a01b03811681146107bd57600080fd5b600060208284031215611647578081fd5b61095f838361161f565b60008060408385031215611663578081fd5b61166d848461161f565b915061167c846020850161161f565b90509250929050565b60008060408385031215611697578182fd5b6116a1848461161f565b946020939093013593505050565b6000602082840312156116c0578081fd5b8151801515811461095f578182fd5b6000602082840312156116e0578081fd5b5035919050565b6000602082840312156116f8578081fd5b5051919050565b600080600080600060a08688031215611716578081fd5b85359450611727876020880161161f565b9350611736876040880161161f565b94979396509394606081013594506080013592915050565b600080600060608486031215611762578283fd5b83359250611773856020860161161f565b9150604084013590509250925092565b60008060408385031215611795578182fd5b505080516020909101519092909150565b815260200190565b60008251815b818110156117ce57602081860181015185830152016117b4565b818111156117dc5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156118565781516001600160a01b031684529284019290840190600101611831565b5050508381038285015280855161186d8184611c66565b91508387019250845b81811015611897576118898385516117a6565b938501939250600101611876565b5090979650505050505050565b6001600160a01b03979097168752602087019590955260408601939093526060850191909152608084015260a0830152151560c082015260e00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b6020808252600b908201527f21676f7665726e616e6365000000000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604082015260600190565b60208082526010908201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526007908201527f21706172656e7400000000000000000000000000000000000000000000000000604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b60208082526011908201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604082015260600190565b60208082526015908201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604082015260600190565b60208082526023908201527f43616e6e6f74207769746864726177206163746976652072657761726420746f60408201527f6b656e0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f2172657761726473446973747269627574696f6e000000000000000000000000604082015260600190565b6020808252600e908201527f506f6f6c20697320616374697665000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b031660208201526040019056fea264697066735822122005a6bb4707f47d6bc88ef004a821f4989f787482bacda49d097e4e87738668f264736f6c634300060c0033a2646970667358221220f44197035d2b0a90e340e4cbbcdba3de5170e6c537fc398a631db768806964a964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}