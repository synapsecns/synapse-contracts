{
  "address": "0x836353Ba1844AE6FafB07786743f44aBE1E8EBb7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "BonusChefCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "miniChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chefPoolID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfaab5bf01abd9c8012e65e8f9cbdd1ea8228ecbd89dea007f69b69443270428",
  "receipt": {
    "to": null,
    "from": "0x19EB7D50E97bb8BFFC1Fb60964c29BFA3a706aee",
    "contractAddress": "0x836353Ba1844AE6FafB07786743f44aBE1E8EBb7",
    "transactionIndex": 0,
    "gasUsed": "1845746",
    "logsBloom": "0x
    "blockHash": "0xc40228a340875cdf5ea3797fda294a2b45e4db42535bacb892722fbf08b3f0d2",
    "transactionHash": "0xdfaab5bf01abd9c8012e65e8f9cbdd1ea8228ecbd89dea007f69b69443270428",
    "logs": [],
    "blockNumber": 325347,
    "cumulativeGasUsed": "1845746",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fdf3a3c1f84ea16812db3e5dbdfc2555",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"BonusChefCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"miniChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefPoolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsDistribution\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BonusChefFactory.sol\":\"BonusChefFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // EIP 2612\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\",\"keccak256\":\"0x8004f86e4536cca55b8eeb2621fe18e1ee57d779396ddef50bce5bf70fb59867\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeName(IERC20 token) internal view returns(string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\r\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x69f1ccf716991e5d6d64dc0e3bc3828fd1990bc18400d680b1aa1960675daaaa\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/bridge/BonusChef.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {IERC20, BoringERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport {IRewarder} from \\\"./interfaces/IRewarder.sol\\\";\\n\\n// A multistakingreward contract that allows stakers to staking a single token and recieve various reward tokens.\\n// Modified from Uniswap staking reward contract at https://etherscan.io/address/0x7FBa4B8Dc5E7616e59622806932DBea72537A56b#code\\n// with the following changes:\\n// - Expand from single reward token to a list of reward tokens\\n// - Allow removing inactive reward pools from list in case list grows above iteration gas limit\\n// - Allow governance to rescue unclaimed tokens of inactive pools\\n\\n// Modified from AladdinDAO MultiStakingRewards contract at https://github.com/AladdinDAO/aladdin-contracts/blob/main/contracts/reward/MultiStakingRewards.sol\\n// with the following changes:\\n// 1. To ensure compatibility with existing IRewards interface:\\n//      a. SafeERC20 -> BoringERC20\\n//      b. onParentReward() -> onSynapseReward()\\n//      c. added pendingTokens(), which returns a list of ALL pending rewards for user\\n// 2. To ensure compatibility with deployed MiniChefV2 contract:\\n//      a. Sending rewards to custom address is possible to make sure\\n//         bonus rewards are always trasnferred to the same address as SYN rewards\\n// 3. Removed stake and withdraw, as they happen in the MiniChef\\n// 4. Read staking balance and total supply from MiniChef\\n// 5. notifyRewardAmount updated to transferFrom(msg.sender) instead of using permissioned distributor\\n// 6. Added a few sanity checks\\ncontract BonusChef is IRewarder, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using BoringERC20 for IERC20;\\n\\n    /* ========== STRUCTS ========== */\\n\\n    // Info of each reward pool.\\n    struct RewardPool {\\n        IERC20 rewardToken; // Address of reward token.\\n        uint256 periodFinish; // timestamp of when this reward pool finishes distribution\\n        uint256 rewardRate; // amount of rewards distributed per unit of time\\n        uint256 rewardsDuration; // duration of distribution\\n        uint256 lastUpdateTime; // timestamp of when reward info was last updated\\n        uint256 rewardPerTokenStored; // current rewards per token based on total rewards and total staked\\n        mapping(address => uint256) userRewardPerTokenPaid; // amount of rewards per token already paided out to user\\n        mapping(address => uint256) rewards; // amount of rewards user has earned\\n        bool isActive; // mark if the pool is active\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public rewardsDistribution;\\n    address public governance;\\n\\n    IMiniChefV2 private immutable miniChef;\\n    uint256 private immutable chefPoolID;\\n    IERC20 private immutable chefStakingToken;\\n\\n    mapping(address => RewardPool) public rewardPools; // reward token to reward pool mapping\\n    address[] public activeRewardPools; // list of reward tokens that are distributing rewards\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IMiniChefV2 _miniChef,\\n        uint256 _chefPoolID,\\n        address _rewardsDistribution,\\n        address _governance\\n    ) public {\\n        miniChef = _miniChef;\\n        chefPoolID = _chefPoolID;\\n        chefStakingToken = _miniChef.lpToken(_chefPoolID);\\n\\n        rewardsDistribution = _rewardsDistribution;\\n        governance = _governance;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // @notice gets the number of active pools\\n    function activeRewardPoolsLength() external view returns (uint256) {\\n        return activeRewardPools.length;\\n    }\\n\\n    function lastTimeRewardApplicable(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return Math.min(block.timestamp, pool.periodFinish);\\n    }\\n\\n    function rewardPerToken(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return pool.rewardPerTokenStored;\\n        }\\n        return\\n            pool.rewardPerTokenStored.add(\\n                lastTimeRewardApplicable(_rewardToken)\\n                    .sub(pool.lastUpdateTime)\\n                    .mul(pool.rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return\\n            balanceOf(_account)\\n                .mul(\\n                rewardPerToken(_rewardToken).sub(\\n                    pool.userRewardPerTokenPaid[_account]\\n                )\\n            ).div(1e18)\\n                .add(pool.rewards[_account]);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return chefStakingToken.balanceOf(address(miniChef));\\n    }\\n\\n    function balanceOf(address _account) public view returns (uint256) {\\n        (uint256 balance, ) = miniChef.userInfo(chefPoolID, _account);\\n        return balance;\\n    }\\n\\n    function getRewardForDuration(address _rewardToken)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate.mul(pool.rewardsDuration);\\n    }\\n\\n    function periodFinish(address _rewardToken) public view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.periodFinish;\\n    }\\n\\n    function rewardRate(address _rewardToken) public view returns (uint256) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardRate;\\n    }\\n\\n    function rewardsDuration(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardsDuration;\\n    }\\n\\n    function lastUpdateTime(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.lastUpdateTime;\\n    }\\n\\n    // useful for UI estimation of pool's APR\\n    function rewardPerTokenStored(address _rewardToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewardPerTokenStored;\\n    }\\n\\n    function userRewardPerTokenPaid(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.userRewardPerTokenPaid[_account];\\n    }\\n\\n    function rewards(address _rewardToken, address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        return pool.rewards[_account];\\n    }\\n\\n    function pendingTokens(\\n        uint256,\\n        address _user,\\n        uint256\\n    ) external view override returns (IERC20[] memory, uint256[] memory) {\\n        uint256 _activePoolsAmount = activeRewardPools.length;\\n        IERC20[] memory _rewardTokens = new IERC20[](_activePoolsAmount);\\n        uint256[] memory _rewardAmounts = new uint256[](_activePoolsAmount);\\n        for (uint8 i = 0; i < _activePoolsAmount; i++) {\\n            address _rewardToken = activeRewardPools[i];\\n            _rewardTokens[i] = IERC20(_rewardToken);\\n            _rewardAmounts[i] = earned(_rewardToken, _user);\\n        }\\n\\n        return (_rewardTokens, _rewardAmounts);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Called by MiniChef reward claim\\n    function onSynapseReward(\\n        uint256,\\n        address _user,\\n        address _recipient,\\n        uint256,\\n        uint256\\n    ) external override onlyMiniChef {\\n        _getAllActiveRewardsFor(_user, _recipient);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Called by rewardsDistribution AFTER the pool for _rewardToken is\\n    // set up via addRewardPool(_rewardToken, _rewardsDuration)\\n\\n    // If the pool is running:\\n    //      Will add (_amount) to the reward pool\\n    //      and extend its duration by pool.rewardsDuration\\n\\n    // If the pool is NOT running:\\n    //      Will set (_amount) as the reward pool capacity and start the pool,\\n    //      which will be running for pool.rewardsDuration\\n    function notifyRewardAmount(address _rewardToken, uint256 _amount)\\n        external\\n        onlyRewardsDistribution\\n        updateReward(_rewardToken, address(0))\\n    {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.rewardsDuration != 0, \\\"Pool is not added\\\");\\n\\n        if (block.timestamp >= pool.periodFinish) {\\n            pool.rewardRate = _amount.div(pool.rewardsDuration);\\n        } else {\\n            uint256 remaining = pool.periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(pool.rewardRate);\\n            pool.rewardRate = _amount.add(leftover).div(pool.rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = pool.rewardToken.balanceOf(address(this));\\n        require(\\n            pool.rewardRate <= balance.div(pool.rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        pool.lastUpdateTime = block.timestamp;\\n        pool.periodFinish = block.timestamp.add(pool.rewardsDuration);\\n\\n        emit RewardAdded(_rewardToken, _amount);\\n    }\\n\\n    // Add new reward pool to list.\\n    // This can also be used to add inactive pool, make sure\\n    // to rescue() all the remaining tokens from previous round beforehand\\n    function addRewardPool(address _rewardToken, uint256 _rewardsDuration)\\n        external\\n        onlyGov\\n    {\\n        require(rewardPools[_rewardToken].isActive == false, \\\"Pool is active\\\");\\n        require(_rewardsDuration != 0, \\\"Duration is null\\\");\\n        rewardPools[_rewardToken] = RewardPool({\\n            rewardToken: IERC20(_rewardToken),\\n            periodFinish: 0,\\n            rewardRate: 0,\\n            rewardsDuration: _rewardsDuration,\\n            lastUpdateTime: 0,\\n            rewardPerTokenStored: 0,\\n            isActive: true\\n        });\\n        activeRewardPools.push(_rewardToken);\\n    }\\n\\n    // Remove rewards pool from active list\\n    // All rewards from the pool become unclaimable, only rescue() can get them out\\n    function inactivateRewardPool(address _rewardToken) external onlyGov {\\n        // find the index\\n        uint256 indexToDelete = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            if (activeRewardPools[i] == _rewardToken) {\\n                indexToDelete = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        require(found, \\\"Reward pool not found\\\");\\n        _inactivateRewardPool(indexToDelete);\\n    }\\n\\n    // In case the list gets so large and make iteration impossible\\n    // All rewards from the pool become unclaimable, only rescue() can get them out\\n    function inactivateRewardPoolByIndex(uint256 _index) external onlyGov {\\n        _inactivateRewardPool(_index);\\n    }\\n\\n    function _inactivateRewardPool(uint256 _index) internal {\\n        RewardPool storage pool = rewardPools[activeRewardPools[_index]];\\n        pool.isActive = false;\\n        // we don't care about the ordering of the active reward pool array\\n        // so we can just swap the element to delete with the last element\\n        activeRewardPools[_index] = activeRewardPools[\\n            activeRewardPools.length - 1\\n        ];\\n        activeRewardPools.pop();\\n    }\\n\\n    // Allow governance to rescue unclaimed inactive rewards\\n    function rescue(address _rewardToken) external onlyGov {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive == false, \\\"Cannot withdraw active reward token\\\");\\n\\n        uint256 _balance = IERC20(_rewardToken).balanceOf(address(this));\\n        IERC20(_rewardToken).safeTransfer(governance, _balance);\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyGov\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    function setGovernance(address _governance) external onlyGov {\\n        governance = _governance;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _getAllActiveRewardsFor(address _account, address _recipient)\\n        internal\\n        updateActiveRewards(_account)\\n    {\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            _getReward(activeRewardPools[i], _account, _recipient);\\n        }\\n    }\\n\\n    function _getReward(\\n        address _rewardToken,\\n        address _account,\\n        address _recipient\\n    ) internal {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n        require(pool.isActive, \\\"Pool is inactive\\\");\\n\\n        uint256 reward = pool.rewards[_account];\\n        if (reward > 0) {\\n            pool.rewards[_account] = 0;\\n            pool.rewardToken.safeTransfer(_recipient, reward);\\n            emit RewardPaid(\\n                address(pool.rewardToken),\\n                _account,\\n                _recipient,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateActiveRewards(address _account) {\\n        for (uint256 i = 0; i < activeRewardPools.length; i++) {\\n            RewardPool storage pool = rewardPools[activeRewardPools[i]];\\n\\n            pool.rewardPerTokenStored = rewardPerToken(\\n                address(pool.rewardToken)\\n            );\\n            pool.lastUpdateTime = lastTimeRewardApplicable(\\n                address(pool.rewardToken)\\n            );\\n            if (_account != address(0)) {\\n                pool.rewards[_account] = earned(\\n                    address(pool.rewardToken),\\n                    _account\\n                );\\n                pool.userRewardPerTokenPaid[_account] = pool\\n                .rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier updateReward(address _rewardToken, address _account) {\\n        RewardPool storage pool = rewardPools[_rewardToken];\\n\\n        pool.rewardPerTokenStored = rewardPerToken(address(pool.rewardToken));\\n        pool.lastUpdateTime = lastTimeRewardApplicable(\\n            address(pool.rewardToken)\\n        );\\n        if (_account != address(0)) {\\n            pool.rewards[_account] = earned(\\n                address(pool.rewardToken),\\n                _account\\n            );\\n            pool.userRewardPerTokenPaid[_account] = pool.rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyMiniChef() {\\n        require(msg.sender == address(miniChef), \\\"!parent\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"!rewardsDistribution\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed rewardToken, uint256 amount);\\n    event RewardPaid(\\n        address indexed rewardToken,\\n        address indexed user,\\n        address recipient,\\n        uint256 reward\\n    );\\n}\\n\",\"keccak256\":\"0xe531e7297dc8318a37e13efcebaf34dfdbc17cee1a648a27d334a655015ab829\",\"license\":\"ISC\"},\"contracts/bridge/BonusChefFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IMiniChefV2} from \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport \\\"./BonusChef.sol\\\";\\n\\n\\n// BonusChefFactory wraps bonus chef to faciliate deployment of new bonus chef contracts\\ncontract BonusChefFactory {\\n    using SafeMath for uint256;\\n\\n    event BonusChefCreated(address tokenAddress);\\n\\n    // @notice deploys a new bonus chef contract\\n    function deploy(\\n        IMiniChefV2 miniChef,\\n        uint256 chefPoolID,\\n        address rewardsDistribution\\n    ) external returns (address) {\\n        BonusChef chef = new BonusChef(\\n            miniChef,\\n            chefPoolID,\\n            rewardsDistribution,\\n            msg.sender\\n        );\\n\\n        emit BonusChefCreated(address(chef));\\n        return address(chef);\\n    }\\n}\",\"keccak256\":\"0x2488eb128a5b59ac622bd2c02d8f8ae0104e8874caa9532604bc075cb0f4be27\",\"license\":\"ISC\"},\"contracts/bridge/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n\\ninterface IMiniChefV2 {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint128 accSynapsePerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n\\n    function lpToken(uint) external view returns(IERC20);\\n    function poolInfo(uint) external view returns (IMiniChefV2.PoolInfo memory);\\n    function poolLength() external view returns (uint256);\\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n    function deposit(uint256 pid, uint256 amount, address to) external;\\n    function withdraw(uint256 pid, uint256 amount, address to) external;\\n    function harvest(uint256 pid, address to) external;\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\",\"keccak256\":\"0x15148d1153715aec7d6c785c41af76193334b1f32efa0ed53f5bcdf0f58c5a5c\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\ninterface IRewarder {\\n    using BoringERC20 for IERC20;\\n    function onSynapseReward(uint256 pid, address user, address recipient, uint256 synapseAmount, uint256 newLpAmount) external;\\n    function pendingTokens(uint256 pid, address user, uint256 synapseAmount) external view returns (IERC20[] memory, uint256[] memory);\\n}\",\"keccak256\":\"0xd9f95057ed49946660984509b877e7239b0a0f1ee8ee1ec24c153cd22b0830e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061208a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638408681d14610030575b600080fd5b6100736004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040909101351661009c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080848484336040516100af90610182565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051809103906000f08015801561012c573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8316815290519192507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801919081900360200190a1949350505050565b611ec5806101908339019056fe60e060405234801561001057600080fd5b50604051611ec5380380611ec58339818101604052608081101561003357600080fd5b50805160208083015160408085015160609586015160016000559585901b6001600160601b03191660805260a083905281516378ed5d1f60e01b81526004810184905291519495929490936001600160a01b038716926378ed5d1f9260248083019392829003018186803b1580156100aa57600080fd5b505afa1580156100be573d6000803e3d6000fd5b505050506040513d60208110156100d457600080fd5b50516001600160601b031960609190911b1660c052600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055505060805160601c60a05160c05160601c611d7261015360003980610721525080610dcc52508061069a52806107505280610d9d5250611d726000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063638634ee116100f9578063b66503cf11610097578063da09d19d11610071578063da09d19d1461060d578063e70b9e2714610633578063eb9e5ddc14610661578063f122977714610669576101b9565b8063b66503cf146104f0578063bcd110141461051c578063d63b3c4914610542576101b9565b80637eb48966116100d35780637eb4896614610461578063839006f21461047e5780639ce43f90146104a4578063ab033ea9146104ca576101b9565b8063638634ee146103e75780637035ab981461040d57806370a082311461043b576101b9565b8063221ca18c11610166578063372d944811610140578063372d9448146103475780633fc6df6e146103b15780635aa6e675146103b95780635d910351146103c1576101b9565b8063221ca18c146102d55780632ce9aead146102fb57806333d4cbf314610321576101b9565b80631c5ef433116101975780631c5ef433146102425780631dfa8e811461026e578063211dc32d146102a7576101b9565b80630eb9eaf1146101be57806318160ddd14610202578063197621431461021c575b600080fd5b610200600480360360a08110156101d457600080fd5b508035906001600160a01b0360208201358116916040810135909116906060810135906080013561068f565b005b61020a61071d565b60408051918252519081900360200190f35b6102006004803603602081101561023257600080fd5b50356001600160a01b03166107dd565b6102006004803603604081101561025857600080fd5b506001600160a01b038135169060200135610876565b61028b6004803603602081101561028457600080fd5b5035610aae565b604080516001600160a01b039092168252519081900360200190f35b61020a600480360360408110156102bd57600080fd5b506001600160a01b0381358116916020013516610ad5565b61020a600480360360208110156102eb57600080fd5b50356001600160a01b0316610b5c565b61020a6004803603602081101561031157600080fd5b50356001600160a01b0316610b7e565b6102006004803603602081101561033757600080fd5b50356001600160a01b0316610b9c565b61036d6004803603602081101561035d57600080fd5b50356001600160a01b0316610cb2565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a0840152151560c0830152519081900360e00190f35b61028b610cfd565b61028b610d0c565b61020a600480360360208110156103d757600080fd5b50356001600160a01b0316610d1b565b61020a600480360360208110156103fd57600080fd5b50356001600160a01b0316610d3a565b61020a6004803603604081101561042357600080fd5b506001600160a01b0381358116916020013516610d69565b61020a6004803603602081101561045157600080fd5b50356001600160a01b0316610d98565b6102006004803603602081101561047757600080fd5b5035610e62565b6102006004803603602081101561049457600080fd5b50356001600160a01b0316610ecd565b61020a600480360360208110156104ba57600080fd5b50356001600160a01b0316611020565b610200600480360360208110156104e057600080fd5b50356001600160a01b031661103e565b6102006004803603604081101561050657600080fd5b506001600160a01b0381351690602001356110d7565b61020a6004803603602081101561053257600080fd5b50356001600160a01b031661140f565b6105746004803603606081101561055857600080fd5b508035906001600160a01b03602082013516906040013561143b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105b85781810151838201526020016105a0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105f75781810151838201526020016105df565b5050505090500194505050505060405180910390f35b61020a6004803603602081101561062357600080fd5b50356001600160a01b0316611579565b61020a6004803603604081101561064957600080fd5b506001600160a01b0381358116916020013516611597565b61020a6115c6565b61020a6004803603602081101561067f57600080fd5b50356001600160a01b03166115cc565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070c576040805162461bcd60e51b815260206004820152600760248201527f21706172656e7400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610716848461163f565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107ac57600080fd5b505afa1580156107c0573d6000803e3d6000fd5b505050506040513d60208110156107d657600080fd5b5051905090565b6002546001600160a01b0316331461083c576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031633146108d5576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090206008015460ff1615610946576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c20697320616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b80610998576040805162461bcd60e51b815260206004820152601060248201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604482015290519081900360640190fd5b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600396879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915160028801559751928601929092559551600480860191909155905160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909216179055565b60048181548110610abb57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03808316600090815260036020908152604080832093851683526007840182528083205460068501909252822054919291610b529190610b4c90670de0b6b3a764000090610b4690610b3790610b318b6115cc565b9061175d565b610b4089610d98565b906117ba565b90611813565b9061187a565b9150505b92915050565b6001600160a01b0381166000908152600360205260409020600201545b919050565b6001600160a01b031660009081526003602052604090206004015490565b6002546001600160a01b03163314610bfb576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060005b600454811015610c5157836001600160a01b031660048281548110610c2257fe5b6000918252602090912001546001600160a01b03161415610c495780925060019150610c51565b600101610c01565b5080610ca4576040805162461bcd60e51b815260206004820152601560248201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604482015290519081900360640190fd5b610cad826118d4565b505050565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546008909501546001600160a01b0390941695929492939192909160ff1687565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001600160a01b03166000908152600360208190526040909120015490565b6001600160a01b03811660009081526003602052604081206001810154610d62904290611a24565b9392505050565b6001600160a01b0391821660009081526003602090815260408083209390941682526006909201909152205490565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d6040811015610e5957600080fd5b50519392505050565b6002546001600160a01b03163314610ec1576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b610eca816118d4565b50565b6002546001600160a01b03163314610f2c576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600360205260409020600881015460ff1615610f885760405162461bcd60e51b8152600401808060200182810382526023815260200180611d1a6023913960400191505060405180910390fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d602081101561100157600080fd5b5051600254909150610cad906001600160a01b03858116911683611a3a565b6001600160a01b031660009081526003602052604090206005015490565b6002546001600160a01b0316331461109d576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611136576040805162461bcd60e51b815260206004820152601460248201527f2172657761726473446973747269627574696f6e000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526003602052604081208054859361115d91166115cc565b60058201558054611176906001600160a01b0316610d3a565b60048201556001600160a01b038216156111d157805461119f906001600160a01b031683610ad5565b6001600160a01b0383166000908152600783016020908152604080832093909355600584015460068501909152919020555b6001600160a01b038516600090815260036020819052604090912090810154611241576040805162461bcd60e51b815260206004820152601160248201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604482015290519081900360640190fd5b8060010154421061126657600381015461125c908690611813565b60028201556112b1565b6001810154600090611278904261175d565b905060006112938360020154836117ba90919063ffffffff16565b60038401549091506112a990610b46898461187a565b600284015550505b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d602081101561133e57600080fd5b50516003830154909150611353908290611813565b826002015411156113ab576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b426004830181905560038301546113c2919061187a565b60018301556040805187815290516001600160a01b038916917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a250505050505050565b6001600160a01b03811660009081526003602081905260408220908101546002820154610d62916117ba565b6004546060908190818167ffffffffffffffff8111801561145b57600080fd5b50604051908082528060200260200182016040528015611485578160200160208202803683370190505b50905060608267ffffffffffffffff811180156114a157600080fd5b506040519080825280602002602001820160405280156114cb578160200160208202803683370190505b50905060005b838160ff16101561156b57600060048260ff16815481106114ee57fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080848360ff168151811061151e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611548818a610ad5565b838360ff168151811061155757fe5b6020908102919091010152506001016114d1565b509097909650945050505050565b6001600160a01b031660009081526003602052604090206001015490565b6001600160a01b0391821660009081526003602090815260408083209390941682526007909201909152205490565b60045490565b6001600160a01b0381166000908152600360205260408120816115ed61071d565b9050806116005750600501549050610b79565b61163761162c82610b46670de0b6b3a7640000610b408760020154610b408960040154610b318d610d3a565b60058401549061187a565b949350505050565b8160005b600454811015611715576000600360006004848154811061166057fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091019020805490925061169891166115cc565b600582015580546116b1906001600160a01b0316610d3a565b60048201556001600160a01b0383161561170c5780546116da906001600160a01b031684610ad5565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611643565b5060005b6004548110156117575761174f6004828154811061173357fe5b6000918252602090912001546001600160a01b03168585611be9565b600101611719565b50505050565b6000828211156117b4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826117c957506000610b56565b828202828482816117d657fe5b0414610d625760405162461bcd60e51b8152600401808060200182810382526021815260200180611cf96021913960400191505060405180910390fd5b6000808211611869576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187257fe5b049392505050565b600082820183811015610d62576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060036000600484815481106118e757fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560048054919250907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061196957fe5b600091825260209091200154600480546001600160a01b03909216918490811061198f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806119c857fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b6000818310611a335781610d62565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310611b0357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ac6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b5091509150818015611b98575080511580611b985750808060200190516020811015611b9557600080fd5b50515b610716576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b6001600160a01b0383166000908152600360205260409020600881015460ff16611c5a576040805162461bcd60e51b815260206004820152601060248201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526007820160205260409020548015610716576001600160a01b0380851660009081526007840160205260408120558254611ca591168483611a3a565b8154604080516001600160a01b03868116825260208201859052825181891694909116927fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb928290030190a3505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616e6e6f74207769746864726177206163746976652072657761726420746f6b656ea2646970667358221220a6255eaceee40bfa84f156c9187230463c0016e5598a0a537df95179abf9b63964736f6c634300060c0033a26469706673582212200f050863f32181a60c7c463023e29c59d565e9b621964234abcf8e1ed12a12c764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80638408681d14610030575b600080fd5b6100736004803603606081101561004657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040909101351661009c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080848484336040516100af90610182565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152602001945050505050604051809103906000f08015801561012c573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8316815290519192507fea1fddb842218c9428c3d55279c02be3e3f408157d572919f9d451d580151801919081900360200190a1949350505050565b611ec5806101908339019056fe60e060405234801561001057600080fd5b50604051611ec5380380611ec58339818101604052608081101561003357600080fd5b50805160208083015160408085015160609586015160016000559585901b6001600160601b03191660805260a083905281516378ed5d1f60e01b81526004810184905291519495929490936001600160a01b038716926378ed5d1f9260248083019392829003018186803b1580156100aa57600080fd5b505afa1580156100be573d6000803e3d6000fd5b505050506040513d60208110156100d457600080fd5b50516001600160601b031960609190911b1660c052600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055505060805160601c60a05160c05160601c611d7261015360003980610721525080610dcc52508061069a52806107505280610d9d5250611d726000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063638634ee116100f9578063b66503cf11610097578063da09d19d11610071578063da09d19d1461060d578063e70b9e2714610633578063eb9e5ddc14610661578063f122977714610669576101b9565b8063b66503cf146104f0578063bcd110141461051c578063d63b3c4914610542576101b9565b80637eb48966116100d35780637eb4896614610461578063839006f21461047e5780639ce43f90146104a4578063ab033ea9146104ca576101b9565b8063638634ee146103e75780637035ab981461040d57806370a082311461043b576101b9565b8063221ca18c11610166578063372d944811610140578063372d9448146103475780633fc6df6e146103b15780635aa6e675146103b95780635d910351146103c1576101b9565b8063221ca18c146102d55780632ce9aead146102fb57806333d4cbf314610321576101b9565b80631c5ef433116101975780631c5ef433146102425780631dfa8e811461026e578063211dc32d146102a7576101b9565b80630eb9eaf1146101be57806318160ddd14610202578063197621431461021c575b600080fd5b610200600480360360a08110156101d457600080fd5b508035906001600160a01b0360208201358116916040810135909116906060810135906080013561068f565b005b61020a61071d565b60408051918252519081900360200190f35b6102006004803603602081101561023257600080fd5b50356001600160a01b03166107dd565b6102006004803603604081101561025857600080fd5b506001600160a01b038135169060200135610876565b61028b6004803603602081101561028457600080fd5b5035610aae565b604080516001600160a01b039092168252519081900360200190f35b61020a600480360360408110156102bd57600080fd5b506001600160a01b0381358116916020013516610ad5565b61020a600480360360208110156102eb57600080fd5b50356001600160a01b0316610b5c565b61020a6004803603602081101561031157600080fd5b50356001600160a01b0316610b7e565b6102006004803603602081101561033757600080fd5b50356001600160a01b0316610b9c565b61036d6004803603602081101561035d57600080fd5b50356001600160a01b0316610cb2565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a0840152151560c0830152519081900360e00190f35b61028b610cfd565b61028b610d0c565b61020a600480360360208110156103d757600080fd5b50356001600160a01b0316610d1b565b61020a600480360360208110156103fd57600080fd5b50356001600160a01b0316610d3a565b61020a6004803603604081101561042357600080fd5b506001600160a01b0381358116916020013516610d69565b61020a6004803603602081101561045157600080fd5b50356001600160a01b0316610d98565b6102006004803603602081101561047757600080fd5b5035610e62565b6102006004803603602081101561049457600080fd5b50356001600160a01b0316610ecd565b61020a600480360360208110156104ba57600080fd5b50356001600160a01b0316611020565b610200600480360360208110156104e057600080fd5b50356001600160a01b031661103e565b6102006004803603604081101561050657600080fd5b506001600160a01b0381351690602001356110d7565b61020a6004803603602081101561053257600080fd5b50356001600160a01b031661140f565b6105746004803603606081101561055857600080fd5b508035906001600160a01b03602082013516906040013561143b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156105b85781810151838201526020016105a0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105f75781810151838201526020016105df565b5050505090500194505050505060405180910390f35b61020a6004803603602081101561062357600080fd5b50356001600160a01b0316611579565b61020a6004803603604081101561064957600080fd5b506001600160a01b0381358116916020013516611597565b61020a6115c6565b61020a6004803603602081101561067f57600080fd5b50356001600160a01b03166115cc565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070c576040805162461bcd60e51b815260206004820152600760248201527f21706172656e7400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610716848461163f565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107ac57600080fd5b505afa1580156107c0573d6000803e3d6000fd5b505050506040513d60208110156107d657600080fd5b5051905090565b6002546001600160a01b0316331461083c576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031633146108d5576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526003602052604090206008015460ff1615610946576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c20697320616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b80610998576040805162461bcd60e51b815260206004820152601060248201527f4475726174696f6e206973206e756c6c00000000000000000000000000000000604482015290519081900360640190fd5b6040805160e0810182526001600160a01b0393841680825260006020808401828152848601838152606086019788526080860184815260a08701858152600160c08901818152888852600396879052998720985189549c167fffffffffffffffffffffffff00000000000000000000000000000000000000009c8d16178955935188850155915160028801559751928601929092559551600480860191909155905160058501559351600890930180549315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090941693909317909255825493840183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091018054909216179055565b60048181548110610abb57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03808316600090815260036020908152604080832093851683526007840182528083205460068501909252822054919291610b529190610b4c90670de0b6b3a764000090610b4690610b3790610b318b6115cc565b9061175d565b610b4089610d98565b906117ba565b90611813565b9061187a565b9150505b92915050565b6001600160a01b0381166000908152600360205260409020600201545b919050565b6001600160a01b031660009081526003602052604090206004015490565b6002546001600160a01b03163314610bfb576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060005b600454811015610c5157836001600160a01b031660048281548110610c2257fe5b6000918252602090912001546001600160a01b03161415610c495780925060019150610c51565b600101610c01565b5080610ca4576040805162461bcd60e51b815260206004820152601560248201527f52657761726420706f6f6c206e6f7420666f756e640000000000000000000000604482015290519081900360640190fd5b610cad826118d4565b505050565b600360208190526000918252604090912080546001820154600283015493830154600484015460058501546008909501546001600160a01b0390941695929492939192909160ff1687565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001600160a01b03166000908152600360208190526040909120015490565b6001600160a01b03811660009081526003602052604081206001810154610d62904290611a24565b9392505050565b6001600160a01b0391821660009081526003602090815260408083209390941682526006909201909152205490565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166393f1a40b7f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050604080518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d6040811015610e5957600080fd5b50519392505050565b6002546001600160a01b03163314610ec1576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b610eca816118d4565b50565b6002546001600160a01b03163314610f2c576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600360205260409020600881015460ff1615610f885760405162461bcd60e51b8152600401808060200182810382526023815260200180611d1a6023913960400191505060405180910390fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d602081101561100157600080fd5b5051600254909150610cad906001600160a01b03858116911683611a3a565b6001600160a01b031660009081526003602052604090206005015490565b6002546001600160a01b0316331461109d576040805162461bcd60e51b815260206004820152600b60248201527f21676f7665726e616e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611136576040805162461bcd60e51b815260206004820152601460248201527f2172657761726473446973747269627574696f6e000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526003602052604081208054859361115d91166115cc565b60058201558054611176906001600160a01b0316610d3a565b60048201556001600160a01b038216156111d157805461119f906001600160a01b031683610ad5565b6001600160a01b0383166000908152600783016020908152604080832093909355600584015460068501909152919020555b6001600160a01b038516600090815260036020819052604090912090810154611241576040805162461bcd60e51b815260206004820152601160248201527f506f6f6c206973206e6f74206164646564000000000000000000000000000000604482015290519081900360640190fd5b8060010154421061126657600381015461125c908690611813565b60028201556112b1565b6001810154600090611278904261175d565b905060006112938360020154836117ba90919063ffffffff16565b60038401549091506112a990610b46898461187a565b600284015550505b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d602081101561133e57600080fd5b50516003830154909150611353908290611813565b826002015411156113ab576040805162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f20686967680000000000000000604482015290519081900360640190fd5b426004830181905560038301546113c2919061187a565b60018301556040805187815290516001600160a01b038916917fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29919081900360200190a250505050505050565b6001600160a01b03811660009081526003602081905260408220908101546002820154610d62916117ba565b6004546060908190818167ffffffffffffffff8111801561145b57600080fd5b50604051908082528060200260200182016040528015611485578160200160208202803683370190505b50905060608267ffffffffffffffff811180156114a157600080fd5b506040519080825280602002602001820160405280156114cb578160200160208202803683370190505b50905060005b838160ff16101561156b57600060048260ff16815481106114ee57fe5b9060005260206000200160009054906101000a90046001600160a01b0316905080848360ff168151811061151e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611548818a610ad5565b838360ff168151811061155757fe5b6020908102919091010152506001016114d1565b509097909650945050505050565b6001600160a01b031660009081526003602052604090206001015490565b6001600160a01b0391821660009081526003602090815260408083209390941682526007909201909152205490565b60045490565b6001600160a01b0381166000908152600360205260408120816115ed61071d565b9050806116005750600501549050610b79565b61163761162c82610b46670de0b6b3a7640000610b408760020154610b408960040154610b318d610d3a565b60058401549061187a565b949350505050565b8160005b600454811015611715576000600360006004848154811061166057fe5b60009182526020808320909101546001600160a01b0390811684529083019390935260409091019020805490925061169891166115cc565b600582015580546116b1906001600160a01b0316610d3a565b60048201556001600160a01b0383161561170c5780546116da906001600160a01b031684610ad5565b6001600160a01b0384166000908152600783016020908152604080832093909355600584015460068501909152919020555b50600101611643565b5060005b6004548110156117575761174f6004828154811061173357fe5b6000918252602090912001546001600160a01b03168585611be9565b600101611719565b50505050565b6000828211156117b4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826117c957506000610b56565b828202828482816117d657fe5b0414610d625760405162461bcd60e51b8152600401808060200182810382526021815260200180611cf96021913960400191505060405180910390fd5b6000808211611869576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161187257fe5b049392505050565b600082820183811015610d62576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060036000600484815481106118e757fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190206008810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560048054919250907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061196957fe5b600091825260209091200154600480546001600160a01b03909216918490811061198f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060048054806119c857fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b6000818310611a335781610d62565b5090919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310611b0357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ac6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b5091509150818015611b98575080511580611b985750808060200190516020811015611b9557600080fd5b50515b610716576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b6001600160a01b0383166000908152600360205260409020600881015460ff16611c5a576040805162461bcd60e51b815260206004820152601060248201527f506f6f6c20697320696e61637469766500000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526007820160205260409020548015610716576001600160a01b0380851660009081526007840160205260408120558254611ca591168483611a3a565b8154604080516001600160a01b03868116825260208201859052825181891694909116927fce405e67b4d6e56e438257e15f160ae28b450e6e7659bbc4c1f4e09a1ac846cb928290030190a3505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743616e6e6f74207769746864726177206163746976652072657761726420746f6b656ea2646970667358221220a6255eaceee40bfa84f156c9187230463c0016e5598a0a537df95179abf9b63964736f6c634300060c0033a26469706673582212200f050863f32181a60c7c463023e29c59d565e9b621964234abcf8e1ed12a12c764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}