{
  "address": "0x22cdc93F53Ee3F6b8Ad66faD6f98915a5349950E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "decodeOptions",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dstGasPriceInWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dstGasTokenRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "txType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "encodeOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "txType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dstNativeAmt",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dstAddress",
          "type": "bytes32"
        }
      ],
      "name": "encodeOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateGasFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasTokenPriceRatio",
          "type": "uint256"
        }
      ],
      "name": "setCostPerChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfd8d7ffc9e7480caad525dc49023ea04699f0d1c985386325c575e17cc2eb40",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x22cdc93F53Ee3F6b8Ad66faD6f98915a5349950E",
    "transactionIndex": 0,
    "gasUsed": "939541",
    "logsBloom": "0x
    "blockHash": "0x448a04de69de4e1ef208694f726428a5f53adea6f376d62eb9340a63920d58a6",
    "transactionHash": "0xbfd8d7ffc9e7480caad525dc49023ea04699f0d1c985386325c575e17cc2eb40",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 113451098,
        "transactionHash": "0xbfd8d7ffc9e7480caad525dc49023ea04699f0d1c985386325c575e17cc2eb40",
        "address": "0x22cdc93F53Ee3F6b8Ad66faD6f98915a5349950E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x448a04de69de4e1ef208694f726428a5f53adea6f376d62eb9340a63920d58a6"
      }
    ],
    "blockNumber": 113451098,
    "cumulativeGasUsed": "939541",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ae6da9686381bcba7e3a788eaf7d049c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"decodeOptions\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dstGasPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dstGasTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"encodeOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"txType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dstAddress\",\"type\":\"bytes32\"}],\"name\":\"encodeOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasTokenPriceRatio\",\"type\":\"uint256\"}],\"name\":\"setCostPerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateGasFee(uint256,bytes)\":{\"params\":{\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCostPerChain(uint256,uint256,uint256)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_gasTokenPriceRatio\":\"USD gas ratio of dstGasToken / srcGasToken\",\"_gasUnitPrice\":\"The estimated current gas price in wei of the destination chain\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateGasFee(uint256,bytes)\":{\"notice\":\"Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\"},\"setCostPerChain(uint256,uint256,uint256)\":{\"notice\":\"Permissioned method to allow an off-chain party to set what each dstChain's gas cost is priced in the srcChain's native gas currency. Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000) chain ID 43114 Average of 30 gwei cost to transaction on 43114 AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/GasFeePricing.sol\":\"GasFeePricing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/GasFeePricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\ncontract GasFeePricing is Ownable {\\n    // DstChainId => The estimated current gas price in wei of the destination chain\\n    mapping(uint256 => uint256) public dstGasPriceInWei;\\n    // DstChainId => USD gas ratio of dstGasToken / srcGasToken\\n    mapping(uint256 => uint256) public dstGasTokenRatio;\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\\n     * gas cost is priced in the srcChain's native gas currency.\\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\\n     * chain ID 43114\\n     * Average of 30 gwei cost to transaction on 43114\\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\\n     * @param _gasTokenPriceRatio USD gas ratio of dstGasToken / srcGasToken\\n     */\\n    // Example:\\n    // DstChainId = 1666600000\\n    // Harmony set gwei to 200000000000\\n    // ONE / JEWEL = 0.05 == 50000000000000000\\n\\n    // DstChainId = 53935\\n    // DFK Chain set 1 gwei = 1000000000\\n    // JEWEL / ONE = 20000000000000000000\\n\\n    // DstChainId = 8217\\n    // Klaytn Gwei set to 250000000000\\n    // KLAYTN / JEWEL = 1200000000000000000\\n\\n    // DstchainId = 53935\\n    // DFK Chain set to 1 gwei\\n    // JEWEL / KLAYTN = 900000000000000000\\n\\n    function setCostPerChain(\\n        uint256 _dstChainId,\\n        uint256 _gasUnitPrice,\\n        uint256 _gasTokenPriceRatio\\n    ) external onlyOwner {\\n        dstGasPriceInWei[_dstChainId] = _gasUnitPrice;\\n        dstGasTokenRatio[_dstChainId] = _gasTokenPriceRatio;\\n    }\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateGasFee(uint256 _dstChainId, bytes memory _options) external view returns (uint256) {\\n        uint256 gasLimit;\\n        // temporary gas limit set\\n        if (_options.length != 0) {\\n            (uint16 _txType, uint256 _gasLimit, uint256 _dstAirdrop, bytes32 _dstAddress) = decodeOptions(_options);\\n            gasLimit = _gasLimit;\\n        } else {\\n            gasLimit = 200000;\\n        }\\n\\n        uint256 minFee = ((dstGasPriceInWei[_dstChainId] * dstGasTokenRatio[_dstChainId] * gasLimit) / 10**18);\\n\\n        return minFee;\\n    }\\n\\n    function encodeOptions(uint16 txType, uint256 gasLimit) public pure returns (bytes memory) {\\n        return abi.encodePacked(txType, gasLimit);\\n    }\\n\\n    function encodeOptions(\\n        uint16 txType,\\n        uint256 gasLimit,\\n        uint256 dstNativeAmt,\\n        bytes32 dstAddress\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(txType, gasLimit, dstNativeAmt, dstAddress);\\n    }\\n\\n    function decodeOptions(bytes memory _options)\\n        public\\n        pure\\n        returns (\\n            uint16,\\n            uint256,\\n            uint256,\\n            bytes32\\n        )\\n    {\\n        // decoding the _options - reverts if type 2 and there is no dstNativeAddress\\n        require(_options.length == 34 || _options.length > 66, \\\"Wrong _adapterParameters size\\\");\\n        uint16 txType;\\n        uint256 gasLimit;\\n        uint256 dstNativeAmt;\\n        bytes32 dstNativeAddress;\\n        assembly {\\n            txType := mload(add(_options, 2))\\n            gasLimit := mload(add(_options, 34))\\n        }\\n\\n        if (txType == 2) {\\n            assembly {\\n                dstNativeAmt := mload(add(_options, 66))\\n                dstNativeAddress := mload(add(_options, 98))\\n            }\\n            require(dstNativeAmt != 0, \\\"dstNativeAmt empty\\\");\\n            require(dstNativeAddress != bytes32(0), \\\"dstNativeAddress empty\\\");\\n        }\\n\\n        return (txType, gasLimit, dstNativeAmt, dstNativeAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x1c1cc89bf823b11666d8c8d4d08ca221cb33aaf79e8a4cedc8e03b7fca8dea93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b108061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063d5e788a011610076578063e32192b71161005b578063e32192b71461024d578063f2fde38b14610260578063f7b9872a1461027357600080fd5b8063d5e788a0146101a9578063e0e162a5146101e157600080fd5b8063715018a6116100a7578063715018a6146101095780638da5cb5b14610113578063957976581461013b57600080fd5b806347feadc1146100c357806368e0a685146100e9575b600080fd5b6100d66100d1366004610848565b610293565b6040519081526020015b60405180910390f35b6100d66100f736600461088f565b60016020526000908152604090205481565b610111610311565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61019c6101493660046108bf565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f084901b16602082015260228101829052606090604201604051602081830303815290604052905092915050565b6040516100e091906108e9565b6101bc6101b736600461095c565b6103a3565b6040805161ffff909516855260208501939093529183015260608201526080016100e0565b61019c6101ef366004610999565b6040805160f09590951b7fffff00000000000000000000000000000000000000000000000000000000000016602086015260228501939093526042840191909152606280840191909152815180840390910181526082909201905290565b61011161025b3660046109d2565b61052a565b61011161026e3660046109fe565b6105c9565b6100d661028136600461088f565b60026020526000908152604090205481565b60008082516000146102be576000806000806102ae876103a3565b509096506102c495505050505050565b5062030d405b6000848152600260209081526040808320546001909252822054670de0b6b3a76400009184916102f49190610a3b565b6102fe9190610a3b565b6103089190610a9f565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103a160006106f9565b565b6000806000808451602214806103ba575060428551115b610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f57726f6e67205f61646170746572506172616d65746572732073697a65000000604482015260640161038e565b60028581015160228701519091600090819061ffff8516900361051b5750506042870151606288015160008290036104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6473744e6174697665416d7420656d7074790000000000000000000000000000604482015260640161038e565b8061051b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6473744e61746976654164647265737320656d70747900000000000000000000604482015260640161038e565b92989197509550909350915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b60009283526001602090815260408085209390935560029052912055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b73ffffffffffffffffffffffffffffffffffffffff81166106ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b6106f6816106f9565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126107ae57600080fd5b813567ffffffffffffffff808211156107c9576107c961076e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561080f5761080f61076e565b8160405283815286602085880101111561082857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561085b57600080fd5b82359150602083013567ffffffffffffffff81111561087957600080fd5b6108858582860161079d565b9150509250929050565b6000602082840312156108a157600080fd5b5035919050565b803561ffff811681146108ba57600080fd5b919050565b600080604083850312156108d257600080fd5b6108db836108a8565b946020939093013593505050565b600060208083528351808285015260005b81811015610916578581018301518582016040015282016108fa565b81811115610928576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561096e57600080fd5b813567ffffffffffffffff81111561098557600080fd5b6109918482850161079d565b949350505050565b600080600080608085870312156109af57600080fd5b6109b8856108a8565b966020860135965060408601359560600135945092505050565b6000806000606084860312156109e757600080fd5b505081359360208301359350604090920135919050565b600060208284031215610a1057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a3457600080fd5b9392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b600082610ad5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212207c37a5b1fa70c0b5aa495bbc5de23b7bd02bb010756ca103b3825a379016ca8264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063d5e788a011610076578063e32192b71161005b578063e32192b71461024d578063f2fde38b14610260578063f7b9872a1461027357600080fd5b8063d5e788a0146101a9578063e0e162a5146101e157600080fd5b8063715018a6116100a7578063715018a6146101095780638da5cb5b14610113578063957976581461013b57600080fd5b806347feadc1146100c357806368e0a685146100e9575b600080fd5b6100d66100d1366004610848565b610293565b6040519081526020015b60405180910390f35b6100d66100f736600461088f565b60016020526000908152604090205481565b610111610311565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e0565b61019c6101493660046108bf565b6040517fffff00000000000000000000000000000000000000000000000000000000000060f084901b16602082015260228101829052606090604201604051602081830303815290604052905092915050565b6040516100e091906108e9565b6101bc6101b736600461095c565b6103a3565b6040805161ffff909516855260208501939093529183015260608201526080016100e0565b61019c6101ef366004610999565b6040805160f09590951b7fffff00000000000000000000000000000000000000000000000000000000000016602086015260228501939093526042840191909152606280840191909152815180840390910181526082909201905290565b61011161025b3660046109d2565b61052a565b61011161026e3660046109fe565b6105c9565b6100d661028136600461088f565b60026020526000908152604090205481565b60008082516000146102be576000806000806102ae876103a3565b509096506102c495505050505050565b5062030d405b6000848152600260209081526040808320546001909252822054670de0b6b3a76400009184916102f49190610a3b565b6102fe9190610a3b565b6103089190610a9f565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103a160006106f9565b565b6000806000808451602214806103ba575060428551115b610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f57726f6e67205f61646170746572506172616d65746572732073697a65000000604482015260640161038e565b60028581015160228701519091600090819061ffff8516900361051b5750506042870151606288015160008290036104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6473744e6174697665416d7420656d7074790000000000000000000000000000604482015260640161038e565b8061051b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6473744e61746976654164647265737320656d70747900000000000000000000604482015260640161038e565b92989197509550909350915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b60009283526001602090815260408085209390935560029052912055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038e565b73ffffffffffffffffffffffffffffffffffffffff81166106ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161038e565b6106f6816106f9565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126107ae57600080fd5b813567ffffffffffffffff808211156107c9576107c961076e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561080f5761080f61076e565b8160405283815286602085880101111561082857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561085b57600080fd5b82359150602083013567ffffffffffffffff81111561087957600080fd5b6108858582860161079d565b9150509250929050565b6000602082840312156108a157600080fd5b5035919050565b803561ffff811681146108ba57600080fd5b919050565b600080604083850312156108d257600080fd5b6108db836108a8565b946020939093013593505050565b600060208083528351808285015260005b81811015610916578581018301518582016040015282016108fa565b81811115610928576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561096e57600080fd5b813567ffffffffffffffff81111561098557600080fd5b6109918482850161079d565b949350505050565b600080600080608085870312156109af57600080fd5b6109b8856108a8565b966020860135965060408601359560600135945092505050565b6000806000606084860312156109e757600080fd5b505081359360208301359350604090920135919050565b600060208284031215610a1057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a3457600080fd5b9392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b600082610ad5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212207c37a5b1fa70c0b5aa495bbc5de23b7bd02bb010756ca103b3825a379016ca8264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateGasFee(uint256,bytes)": {
        "params": {
          "_options": "Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCostPerChain(uint256,uint256,uint256)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_gasTokenPriceRatio": "USD gas ratio of dstGasToken / srcGasToken",
          "_gasUnitPrice": "The estimated current gas price in wei of the destination chain"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateGasFee(uint256,bytes)": {
        "notice": "Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit"
      },
      "setCostPerChain(uint256,uint256,uint256)": {
        "notice": "Permissioned method to allow an off-chain party to set what each dstChain's gas cost is priced in the srcChain's native gas currency. Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000) chain ID 43114 Average of 30 gwei cost to transaction on 43114 AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/messaging/GasFeePricing.sol:GasFeePricing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5338,
        "contract": "contracts/messaging/GasFeePricing.sol:GasFeePricing",
        "label": "dstGasPriceInWei",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5342,
        "contract": "contracts/messaging/GasFeePricing.sol:GasFeePricing",
        "label": "dstGasTokenRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}