{
  "language": "Solidity",
  "sources": {
    "contracts/bridge/wrappers/swap/CantoSwapWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\";\n\ninterface ISynapse {\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n\ninterface ICantoDex {\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @notice Contract mimicking Saddle swap interface to connect following pools:\n * - Synapse    nUSD/USDC\n * - CantoDex   NOTE/USDC\n * - CantoDex   NOTE/USDT\n * Swaps between \"disconnected\" coins are routed through USDC (and NOTE for USDT).\n * nUSD <> USDC <> NOTE <> USDT\n */\ncontract CantoSwapWrapper {\n    using SafeERC20 for IERC20;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              CONSTANTS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Token ordering is nUSD, NOTE (for backwards compatibility),\n     * then all remaining tokens sorted alphabetically.\n     * (index: token)\n     * 0: nUSD\n     * 1: NOTE\n     * 2: USDC\n     * 3: USDT\n     */\n\n    // Synapse-bridged token: nUSD\n    IERC20 internal constant NUSD = IERC20(0xD8836aF2e565D3Befce7D906Af63ee45a57E8f80);\n    // Canto native token: NOTE\n    IERC20 internal constant NOTE = IERC20(0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503);\n    // Gravity-bridged token: USDC\n    IERC20 internal constant USDC = IERC20(0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd);\n    // Gravity-bridged token: USDT\n    IERC20 internal constant USDT = IERC20(0xd567B3d7B8FE3C79a1AD8dA978812cfC4Fa05e75);\n\n    uint256 internal constant NUSD_INDEX = 0;\n    uint256 internal constant NOTE_INDEX = 1;\n    uint256 internal constant USDC_INDEX = 2;\n    uint256 internal constant USDT_INDEX = 3;\n    uint256 internal constant COINS = 4;\n\n    /// @notice Synapse nUSD/NOTE\n    address internal constant SYNAPSE_NUSD_USDC = 0xb1Da21B0531257a7E5aEfa0cd3CbF23AfC674cE1;\n    /// @notice CantoDEX NOTE/USDC\n    address internal constant CANTO_DEX_NOTE_USDC = 0x9571997a66D63958e1B3De9647C22bD6b9e7228c;\n    /// @notice CantoDEX NOTE/USDT\n    address internal constant CANTO_DEX_NOTE_USDT = 0x35DB1f3a6A6F07f82C76fCC415dB6cFB1a7df833;\n\n    uint256 internal constant MAX_UINT = type(uint256).max;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             CONSTRUCTOR                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    constructor() {\n        // Approve spending by Synapse Pool\n        NUSD.safeApprove(SYNAPSE_NUSD_USDC, MAX_UINT);\n        USDC.safeApprove(SYNAPSE_NUSD_USDC, MAX_UINT);\n        // CantoDEX pools don't need approvals\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Wrapper for ISaddle.swap()\n     * @param tokenIndexFrom    the token the user wants to swap from\n     * @param tokenIndexTo      the token the user wants to swap to\n     * @param dx                the amount of tokens the user wants to swap from\n     * @param minDy             the min amount the user would like to receive, or revert.\n     * @param deadline          latest timestamp to accept this transaction\n     * @return amountOut        amount of tokens bought\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256 amountOut) {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"Deadline not met\");\n        require(tokenIndexFrom < COINS && tokenIndexTo < COINS && tokenIndexFrom != tokenIndexTo, \"Swap not supported\");\n        IERC20 tokenFrom = _getToken(tokenIndexFrom);\n        // Record balance before transfer\n        uint256 balanceBefore = tokenFrom.balanceOf(address(this));\n        // First, pull tokens from the user\n        tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\n        // Use actual transferred amount for the swap\n        amountOut = tokenFrom.balanceOf(address(this)) - balanceBefore;\n        // Do a series of swaps until the requested token is reached\n        while (tokenIndexFrom != tokenIndexTo) {\n            // Get the swap. It will be either the needed direct swap,\n            // or a swap in the right direction (for the multi-hop swap)\n            (uint256 indexTo, address pool) = _getSwap(tokenIndexFrom, tokenIndexTo);\n            // Perform a swap using the derived values\n            // Don't check minAmountOut until the very last swap\n            // Transfer tokens to msg.sender in the very last swap\n            amountOut = _directSwap({\n                pool: pool,\n                indexFrom: tokenIndexFrom,\n                indexTo: indexTo,\n                amountIn: amountOut,\n                minAmountOut: indexTo == tokenIndexTo ? minDy : 0,\n                recipient: indexTo == tokenIndexTo ? msg.sender : address(this)\n            });\n            // Update current token\n            tokenIndexFrom = uint8(indexTo);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Wrapper for ISaddle.calculateSwap()\n     * @param tokenIndexFrom    the token the user wants to sell\n     * @param tokenIndexTo      the token the user wants to buy\n     * @param dx                the amount of tokens the user wants to sell. If the token charges\n     *                          a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amountOut        amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256 amountOut) {\n        if (tokenIndexFrom == tokenIndexTo || tokenIndexFrom >= COINS || tokenIndexTo >= COINS) return 0;\n        amountOut = dx;\n        // Get the quotes for swaps until the requested token is reached\n        while (tokenIndexFrom != tokenIndexTo) {\n            // Get the swap. It will be either the needed direct swap,\n            // or a swap in the right direction (for the multi-hop swap)\n            (uint256 indexTo, address pool) = _getSwap(tokenIndexFrom, tokenIndexTo);\n            // Get a quote for the  swap using the derived values\n            amountOut = _getDirectAmountOut({\n                pool: pool,\n                indexFrom: tokenIndexFrom,\n                indexTo: indexTo,\n                amountIn: amountOut\n            });\n            // Update current token\n            tokenIndexFrom = uint8(indexTo);\n        }\n    }\n\n    /**\n     * @notice Wrapper for ISaddle.getToken()\n     * @param index     the index of the token\n     * @return token    address of the token at given index\n     */\n    function getToken(uint8 index) external pure returns (IERC20 token) {\n        token = _getToken(index);\n        require(address(token) != address(0), \"Out of range\");\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Performs a swap between tokens through given pool,\n     * assuming tokens to sell are already in this contract.\n     * @param pool          Pool to execute the swap through\n     * @param indexFrom     Index of token to sell (see _getToken())\n     * @param indexTo       Index of token to buy (see _getToken())\n     * @param amountIn      Amount of tokens to sell\n     * @param minAmountOut  Minimum amount of tokens to buy, or tx will revert\n     * @param recipient     Address to transfer bought tokens to\n     * @return amountOut    Amount of token bought\n     */\n    function _directSwap(\n        address pool,\n        uint256 indexFrom,\n        uint256 indexTo,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        address recipient\n    ) internal returns (uint256 amountOut) {\n        if (pool == SYNAPSE_NUSD_USDC) {\n            // Perform a swap through Synapse pool: check output amount, but don't check timestamp\n            // Calculate Synapse indexes\n            amountOut = ISynapse(pool).swap({\n                tokenIndexFrom: _getSynapseIndex(indexFrom),\n                tokenIndexTo: _getSynapseIndex(indexTo),\n                dx: amountIn,\n                minDy: minAmountOut,\n                deadline: MAX_UINT\n            });\n            // Transfer tokens to recipient, if needed\n            if (recipient != address(this)) {\n                _getToken(indexTo).safeTransfer(recipient, amountOut);\n            }\n        } else if (pool == CANTO_DEX_NOTE_USDC || pool == CANTO_DEX_NOTE_USDT) {\n            // Get starting token\n            IERC20 tokenFrom = _getToken(indexFrom);\n            // Get a quote, and check it against minimum amount out\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\n            require(amountOut >= minAmountOut, \"Swap didn't result in min tokens\");\n            // Transfer starting token to Pair contract\n            tokenFrom.safeTransfer(address(pool), amountIn);\n            // NOTE is token0 in both NOTE/USDC and NOTE/USDT pool,\n            // because NOTE address is lexicographically smaller\n            (uint256 amount0Out, uint256 amount1Out) = (indexFrom == NOTE_INDEX)\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            // Perform a swap, transfer the bought token to the recipient directly\n            ICantoDex(pool).swap(amount0Out, amount1Out, recipient, bytes(\"\"));\n        } else {\n            // Sanity check: should never reach this\n            assert(false);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get a quote for a swap between two tokens via a given pool.\n     * @param pool          Pool to execute the swap through\n     * @param indexFrom     Index of token to sell (see _getToken())\n     * @param indexTo       Index of token to buy (see _getToken())\n     * @param amountIn      Amount of tokens to sell\n     * @return amountOut    Quote for amount of tokens to buy\n     */\n    function _getDirectAmountOut(\n        address pool,\n        uint256 indexFrom,\n        uint256 indexTo,\n        uint256 amountIn\n    ) internal view returns (uint256 amountOut) {\n        // First, check input amount\n        if (amountIn == 0) return 0;\n        if (pool == SYNAPSE_NUSD_USDC) {\n            // Calculate Synapse indexes and get the quote\n            amountOut = ISynapse(pool).calculateSwap({\n                tokenIndexFrom: _getSynapseIndex(indexFrom),\n                tokenIndexTo: _getSynapseIndex(indexTo),\n                dx: amountIn\n            });\n        } else if (pool == CANTO_DEX_NOTE_USDC || pool == CANTO_DEX_NOTE_USDT) {\n            // Get starting token\n            IERC20 tokenFrom = _getToken(indexFrom);\n            // Get a quote\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\n        }\n        /// @dev amountOut is 0 if direct swap is not supported\n    }\n\n    /**\n     * @notice Gets token represented by a given index in this contract.\n     * @dev Returns address(0) if token index is out of bounds.\n     * @param tokenIndex    This contract's index of token\n     * @return token        Token represented by `tokenIndex`\n     */\n    function _getToken(uint256 tokenIndex) internal pure returns (IERC20 token) {\n        if (tokenIndex == NUSD_INDEX) {\n            token = NUSD;\n        } else if (tokenIndex == NOTE_INDEX) {\n            token = NOTE;\n        } else if (tokenIndex == USDC_INDEX) {\n            token = USDC;\n        } else if (tokenIndex == USDT_INDEX) {\n            token = USDT;\n        }\n        /// @dev token is IERC20(address(0)) for unsupported indexes\n    }\n\n    /**\n     * @notice Gets needed swap in order to get from `indexFrom` to `indexRequested`\n     * Returns either the direct swap, if possible. Or a swap in a needed direction,\n     * if multi-hop swap is required.\n     */\n    function _getSwap(uint256 indexFrom, uint256 indexRequested)\n        internal\n        pure\n        returns (uint256 tokenIndexTo, address pool)\n    {\n        // nUSD <> USDC <> NOTE <> USDT\n        if (indexFrom == NUSD_INDEX) {\n            // nUSD can be only swapped to USDC\n            tokenIndexTo = USDC_INDEX;\n            pool = SYNAPSE_NUSD_USDC;\n        } else if (indexFrom == USDC_INDEX) {\n            // USDC can be swapped to nUSD or NOTE\n            if (indexRequested == NUSD_INDEX) {\n                tokenIndexTo = NUSD_INDEX;\n                pool = SYNAPSE_NUSD_USDC;\n            } else {\n                // NOTE is the path we want to take for the multi-hop swap\n                tokenIndexTo = NOTE_INDEX;\n                pool = CANTO_DEX_NOTE_USDC;\n            }\n        } else if (indexFrom == NOTE_INDEX) {\n            // NOTE can be swapped to USDC or USDT\n            if (indexRequested == USDT_INDEX) {\n                tokenIndexTo = USDT_INDEX;\n                pool = CANTO_DEX_NOTE_USDT;\n            } else {\n                // USDC is the path we want to take for the multi-hop swap\n                tokenIndexTo = USDC_INDEX;\n                pool = CANTO_DEX_NOTE_USDC;\n            }\n        } else if (indexFrom == USDT_INDEX) {\n            // USDT can only be swapped to NOTE\n            tokenIndexTo = NOTE_INDEX;\n            pool = CANTO_DEX_NOTE_USDT;\n        }\n    }\n\n    /**\n     * @notice Returns the index for the given token in the Synapse nUSD/USDC pool\n     */\n    function _getSynapseIndex(uint256 tokenIndex) internal pure returns (uint8 synapseIndex) {\n        if (tokenIndex == NUSD_INDEX) {\n            synapseIndex = 0;\n        } else if (tokenIndex == USDC_INDEX) {\n            synapseIndex = 1;\n        } else {\n            // Sanity check: should never reach this\n            assert(false);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/bridge/wrappers/swap/LegacyCantoSwapWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts-4.5.0/token/ERC20/utils/SafeERC20.sol\";\n\ninterface ISynapse {\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n\ninterface ICantoDex {\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @notice Contract mimicking Saddle swap interface to connect following pools:\n * - Synapse    nUSD/NOTE\n * - CantoDex   NOTE/USDC\n * - CantoDex   NOTE/USDT\n * Swaps between \"disconnected\" coins are routed through NOTE.\n */\ncontract LegacyCantoSwapWrapper {\n    using SafeERC20 for IERC20;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              CONSTANTS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Token ordering is nUSD, NOTE (for backwards compatibility),\n     * then all remaining tokens sorted alphabetically.\n     * (index: token)\n     * 0: nUSD\n     * 1: NOTE\n     * 2: USDC\n     * 3: USDT\n     */\n\n    // Synapse-bridged token: nUSD\n    IERC20 internal constant NUSD = IERC20(0xD8836aF2e565D3Befce7D906Af63ee45a57E8f80);\n    // Canto native token: NOTE\n    IERC20 internal constant NOTE = IERC20(0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503);\n    // Gravity-bridged token: USDC\n    IERC20 internal constant USDC = IERC20(0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd);\n    // Gravity-bridged token: USDT\n    IERC20 internal constant USDT = IERC20(0xd567B3d7B8FE3C79a1AD8dA978812cfC4Fa05e75);\n\n    uint256 internal constant NUSD_INDEX = 0;\n    uint256 internal constant NOTE_INDEX = 1;\n    uint256 internal constant USDC_INDEX = 2;\n    uint256 internal constant USDT_INDEX = 3;\n    uint256 internal constant COINS = 4;\n\n    /// @notice Synapse nUSD/NOTE\n    address internal constant SYNAPSE_NUSD_POOL = 0x07379565cD8B0CaE7c60Dc78e7f601b34AF2A21c;\n    /// @notice CantoDEX NOTE/USDC\n    address internal constant CANTO_DEX_USDC_POOL = 0x9571997a66D63958e1B3De9647C22bD6b9e7228c;\n    /// @notice CantoDEX NOTE/USDT\n    address internal constant CANTO_DEX_USDT_POOL = 0x35DB1f3a6A6F07f82C76fCC415dB6cFB1a7df833;\n\n    uint256 internal constant MAX_UINT = type(uint256).max;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             CONSTRUCTOR                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    constructor() {\n        // Approve spending by Synapse Pool\n        NUSD.safeApprove(SYNAPSE_NUSD_POOL, MAX_UINT);\n        NOTE.safeApprove(SYNAPSE_NUSD_POOL, MAX_UINT);\n        // CantoDEX pools don't need approvals\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Wrapper for ISaddle.swap()\n     * @param tokenIndexFrom    the token the user wants to swap from\n     * @param tokenIndexTo      the token the user wants to swap to\n     * @param dx                the amount of tokens the user wants to swap from\n     * @param minDy             the min amount the user would like to receive, or revert.\n     * @param deadline          latest timestamp to accept this transaction\n     * @return amountOut        amount of tokens bought\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256 amountOut) {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"Deadline not met\");\n        require(tokenIndexFrom < COINS && tokenIndexTo < COINS && tokenIndexFrom != tokenIndexTo, \"Swap not supported\");\n        IERC20 tokenFrom = _getToken(tokenIndexFrom);\n        // Record balance before transfer\n        uint256 balanceBefore = tokenFrom.balanceOf(address(this));\n        // First, pull tokens from the user\n        tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\n        // Use actual transferred amount for the swap\n        dx = tokenFrom.balanceOf(address(this)) - balanceBefore;\n        // Check if direct swap is possible\n        address pool = _getDirectSwap(tokenIndexFrom, tokenIndexTo);\n        if (pool != address(0)) {\n            amountOut = _directSwap(pool, tokenIndexFrom, tokenIndexTo, dx, minDy, msg.sender);\n        } else {\n            // First, perform tokenFrom -> NOTE swap, recipient is this contract\n            pool = _getDirectSwap(tokenIndexFrom, NOTE_INDEX);\n            // Don't check minAmountOut\n            amountOut = _directSwap(pool, tokenIndexFrom, NOTE_INDEX, dx, 0, address(this));\n            // Then, perform NOTE -> tokenTo swap, recipient is the user\n            pool = _getDirectSwap(NOTE_INDEX, tokenIndexTo);\n            // Check minAmountOut\n            amountOut = _directSwap(pool, NOTE_INDEX, tokenIndexTo, amountOut, minDy, msg.sender);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Wrapper for ISaddle.calculateSwap()\n     * @param tokenIndexFrom    the token the user wants to sell\n     * @param tokenIndexTo      the token the user wants to buy\n     * @param dx                the amount of tokens the user wants to sell. If the token charges\n     *                          a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amountOut        amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256 amountOut) {\n        if (tokenIndexFrom == tokenIndexTo) return 0;\n        // Check if direct swap is possible\n        address pool = _getDirectSwap(tokenIndexFrom, tokenIndexTo);\n        if (pool != address(0)) {\n            amountOut = _getDirectAmountOut(pool, tokenIndexFrom, tokenIndexTo, dx);\n        } else {\n            // First, get tokenFrom -> NOTE quote\n            pool = _getDirectSwap(tokenIndexFrom, NOTE_INDEX);\n            amountOut = _getDirectAmountOut(pool, tokenIndexFrom, NOTE_INDEX, dx);\n            // Then, get NOTE -> tokenTo quote\n            pool = _getDirectSwap(NOTE_INDEX, tokenIndexTo);\n            amountOut = _getDirectAmountOut(pool, NOTE_INDEX, tokenIndexTo, amountOut);\n        }\n    }\n\n    /**\n     * @notice Wrapper for ISaddle.getToken()\n     * @param index     the index of the token\n     * @return token    address of the token at given index\n     */\n    function getToken(uint8 index) external pure returns (IERC20 token) {\n        token = _getToken(index);\n        require(address(token) != address(0), \"Out of range\");\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Performs a swap between tokens through given pool,\n     * assuming tokens to sell are already in this contract.\n     * @param pool          Pool to execute the swap through\n     * @param indexFrom     Index of token to sell (see _getToken())\n     * @param indexTo       Index of token to buy (see _getToken())\n     * @param amountIn      Amount of tokens to sell\n     * @param minAmountOut  Minimum amount of tokens to buy, or tx will revert\n     * @param recipient     Address to transfer bought tokens to\n     * @return amountOut    Amount of token bought\n     */\n    function _directSwap(\n        address pool,\n        uint256 indexFrom,\n        uint256 indexTo,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        address recipient\n    ) internal returns (uint256 amountOut) {\n        if (pool == SYNAPSE_NUSD_POOL) {\n            // Perform a swap through Synapse pool: check output amount, but don't check timestamp\n            // Indexes in Synapse pool match the indexes in SwapWrapper\n            amountOut = ISynapse(pool).swap({\n                tokenIndexFrom: uint8(indexFrom),\n                tokenIndexTo: uint8(indexTo),\n                dx: amountIn,\n                minDy: minAmountOut,\n                deadline: MAX_UINT\n            });\n            // Transfer tokens to recipient, if needed\n            if (recipient != address(this)) {\n                _getToken(indexTo).safeTransfer(recipient, amountOut);\n            }\n        } else if (pool == CANTO_DEX_USDC_POOL || pool == CANTO_DEX_USDT_POOL) {\n            // Get starting token\n            IERC20 tokenFrom = _getToken(indexFrom);\n            // Get a quote, and check it against minimum amount out\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\n            require(amountOut >= minAmountOut, \"Swap didn't result in min tokens\");\n            // Transfer starting token to Pair contract\n            tokenFrom.safeTransfer(address(pool), amountIn);\n            // NOTE is token0 in both NOTE/USDC and NOTE/USDT pool,\n            // because NOTE address is lexicographically smaller\n            (uint256 amount0Out, uint256 amount1Out) = (indexFrom == NOTE_INDEX)\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            // Perform a swap, transfer the bought token to the recipient directly\n            ICantoDex(pool).swap(amount0Out, amount1Out, recipient, bytes(\"\"));\n        } else {\n            // Sanity check: should never reach this\n            assert(false);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get a quote for a swap between two tokens via a given pool.\n     * @param pool          Pool to execute the swap through\n     * @param indexFrom     Index of token to sell (see _getToken())\n     * @param indexTo       Index of token to buy (see _getToken())\n     * @param amountIn      Amount of tokens to sell\n     * @return amountOut    Quote for amount of tokens to buy\n     */\n    function _getDirectAmountOut(\n        address pool,\n        uint256 indexFrom,\n        uint256 indexTo,\n        uint256 amountIn\n    ) internal view returns (uint256 amountOut) {\n        // First, check input amount\n        if (amountIn == 0) return 0;\n        if (pool == SYNAPSE_NUSD_POOL) {\n            // Indexes in Synapse pool match the indexes in SwapWrapper\n            amountOut = ISynapse(pool).calculateSwap(uint8(indexFrom), uint8(indexTo), amountIn);\n        } else if (pool == CANTO_DEX_USDC_POOL || pool == CANTO_DEX_USDT_POOL) {\n            // Get starting token\n            IERC20 tokenFrom = _getToken(indexFrom);\n            // Get a quote\n            amountOut = ICantoDex(pool).getAmountOut(amountIn, address(tokenFrom));\n        }\n        /// @dev amountOut is 0 if direct swap is not supported\n    }\n\n    /**\n     * @notice Gets pool address for direct swap between two tokens.\n     * @dev Returns address(0) if swap is not possible.\n     * @param indexFrom    Index of token to sell (see _getToken())\n     * @param indexTo      Index of token to buy (see _getToken())\n     * @return pool         Pool address that can do tokenFrom -> tokenTo swap\n     */\n    function _getDirectSwap(uint256 indexFrom, uint256 indexTo) internal pure returns (address pool) {\n        if (indexFrom == NOTE_INDEX) {\n            // Get pool for NOTE -> * swap\n            pool = _getDirectSwapNOTE(indexTo);\n        } else if (indexTo == NOTE_INDEX) {\n            // Get pool for * -> NOTE swap\n            pool = _getDirectSwapNOTE(indexFrom);\n        }\n        /// @dev pool is address(0) if direct swap is not supported.\n    }\n\n    /**\n     * @notice Gets token represented by a given index in this contract.\n     * @dev Returns address(0) if token index is out of bounds.\n     * @param tokenIndex    This contract's index of token\n     * @return token        Token represented by `tokenIndex`\n     */\n    function _getToken(uint256 tokenIndex) internal pure returns (IERC20 token) {\n        if (tokenIndex == NUSD_INDEX) {\n            token = NUSD;\n        } else if (tokenIndex == NOTE_INDEX) {\n            token = NOTE;\n        } else if (tokenIndex == USDC_INDEX) {\n            token = USDC;\n        } else if (tokenIndex == USDT_INDEX) {\n            token = USDT;\n        }\n        /// @dev token is IERC20(address(0)) for unsupported indexes\n    }\n\n    /**\n     * @notice Gets pool address for direct swap between NOTE and a given token.\n     * @dev Returns address(0) if swap is not possible.\n     * @param tokenIndex   Index of token to swap (see _getToken())\n     * @return pool         Pool address that can do `tokenIndex` <> NOTE swap\n     */\n    function _getDirectSwapNOTE(uint256 tokenIndex) internal pure returns (address pool) {\n        if (tokenIndex == NUSD_INDEX) {\n            // nUSD <> NOTE is routed through Synapse\n            pool = SYNAPSE_NUSD_POOL;\n        } else if (tokenIndex == USDC_INDEX) {\n            // USDC <> NOTE is routed through CantoDEX\n            pool = CANTO_DEX_USDC_POOL;\n        } else if (tokenIndex == USDT_INDEX) {\n            // USDT <> NOTE is routed through CantoDEX\n            pool = CANTO_DEX_USDT_POOL;\n        }\n        /// @dev pool is address(0) if tokenIndex is NOTE_INDEX, or out of range\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/messaging/dfk/inventory/InventoryItem.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-4.5.0/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\n/// @title Base class for Inventory Items.\n/// @author Frisky Fox - Defi Kingdoms\ncontract InventoryItem is ERC20PresetMinterPauser {\n    constructor(string memory _name, string memory _symbol) ERC20PresetMinterPauser(_name, _symbol) {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return 0;\n    }\n}\n"
    },
    "contracts/messaging/dfk/inventory/GaiaTears.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./InventoryItem.sol\";\n\n/// @title Gaia's Tears.\n/// @author Frisky Fox - Defi Kingdoms\ncontract GaiaTears is InventoryItem {\n    constructor() InventoryItem(\"Gaia's Tears\", \"DFKTEARS\") {}\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/messaging/interfaces/ISynMessagingReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/messaging/dfk/StatScienceUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./random/IRandomGenerator.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/access/AccessControlUpgradeable.sol\";\n\nimport \"./libs/LibGeneScience.sol\";\nimport \"./IHeroCoreUpgradeable.sol\";\n\nimport {Hero, HeroStats, HeroStatGrowth, HeroProfessions} from \"./types/HeroTypes.sol\";\nimport {HeroCrystal} from \"./types/CrystalTypes.sol\";\nimport {RandomInputs} from \"./types/RandomTypes.sol\";\nimport \"./types/JobTiers.sol\";\n\n/// @title StatScience contains the logic to calculate starting stats.\n/// @author Frisky Fox - Defi Kingdoms\ncontract StatScienceUpgradeable is AccessControlUpgradeable {\n    /// CONTRACTS ///\n    IRandomGenerator randomGenerator;\n\n    /// ROLES ///\n    bytes32 public constant WHITELIST_ROLE = keccak256(\"WHITELIST_ROLE\");\n\n    constructor(address _randomGeneratorAddress) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(WHITELIST_ROLE, msg.sender);\n\n        randomGenerator = IRandomGenerator(_randomGeneratorAddress);\n    }\n\n    /// @dev Gets the job tier for genes.\n    function getJobTier(uint8 _class) public pure returns (JobTier) {\n        if (_class > 29) {\n            return JobTier.TRANSCENDENT;\n        }\n        if (_class > 27) {\n            return JobTier.EXALTED;\n        }\n        if (_class > 23) {\n            return JobTier.ELITE;\n        }\n        if (_class > 15) {\n            return JobTier.ADVANCED;\n        }\n        return JobTier.NORMAL;\n    }\n\n    function getGene(uint256 _genes, uint8 _position) public pure returns (uint8) {\n        uint8[] memory statTraits = LibGeneScience.decode(_genes);\n        return statTraits[_position];\n    }\n\n    function generateStats(\n        uint256 _statGenes,\n        HeroCrystal memory _crystal,\n        Rarity _rarity,\n        uint256 _crystalId\n    ) external onlyRole(WHITELIST_ROLE) returns (HeroStats memory) {\n        uint8[11][31] memory classBaseStats;\n\n        classBaseStats[0] = [11, 5, 5, 7, 7, 9, 8, 8, 150, 25, 25]; // warrior\n        classBaseStats[1] = [10, 5, 6, 7, 6, 10, 10, 6, 140, 35, 25]; // knight\n        classBaseStats[2] = [7, 6, 7, 10, 10, 6, 6, 8, 135, 40, 25]; // thief\n        classBaseStats[3] = [7, 7, 6, 8, 7, 6, 7, 12, 135, 40, 25]; // archer\n        classBaseStats[4] = [5, 10, 13, 7, 6, 6, 7, 6, 110, 65, 25]; // priest\n        classBaseStats[5] = [5, 12, 12, 7, 6, 6, 6, 6, 100, 75, 25]; // wizard\n        classBaseStats[6] = [8, 6, 8, 6, 8, 8, 8, 8, 135, 40, 25]; // monk\n        classBaseStats[7] = [9, 5, 5, 10, 7, 8, 7, 9, 145, 30, 25]; // pirate\n        classBaseStats[16] = [10, 6, 10, 7, 6, 10, 10, 6, 160, 40, 25]; // paladin\n        classBaseStats[17] = [14, 8, 6, 6, 6, 11, 7, 7, 150, 50, 25]; // darkknight\n        classBaseStats[18] = [6, 14, 12, 7, 7, 6, 6, 7, 120, 80, 25]; // summoner\n        classBaseStats[19] = [7, 7, 6, 10, 12, 7, 6, 10, 140, 60, 25]; // ninja\n        classBaseStats[24] = [11, 7, 9, 8, 8, 8, 10, 9, 175, 50, 25]; // dragoon\n        classBaseStats[25] = [6, 15, 15, 7, 8, 7, 6, 6, 125, 100, 25]; // sage\n        classBaseStats[28] = [15, 8, 8, 7, 8, 10, 11, 8, 200, 50, 25]; // dreadknight\n\n        uint8 class = getGene(_statGenes, 44); // Class is at position 44.\n        HeroStats memory heroStats = HeroStats({\n            strength: classBaseStats[class][0],\n            intelligence: classBaseStats[class][1],\n            wisdom: classBaseStats[class][2],\n            luck: classBaseStats[class][3],\n            agility: classBaseStats[class][4],\n            vitality: classBaseStats[class][5],\n            endurance: classBaseStats[class][6],\n            dexterity: classBaseStats[class][7],\n            hp: classBaseStats[class][8],\n            mp: classBaseStats[class][9],\n            stamina: classBaseStats[class][10]\n        });\n\n        // Augment with the statboost genes.\n        uint8 statBonusGene = getGene(_statGenes, 16); // Stat bonus gene is at position 16.\n        if (statBonusGene == 0) {\n            heroStats.strength = heroStats.strength + 2;\n        }\n        if (statBonusGene == 2) {\n            heroStats.agility = heroStats.agility + 2;\n        }\n        if (statBonusGene == 4) {\n            heroStats.intelligence = heroStats.intelligence + 2;\n        }\n        if (statBonusGene == 6) {\n            heroStats.wisdom = heroStats.wisdom + 2;\n        }\n        if (statBonusGene == 8) {\n            heroStats.luck = heroStats.luck + 2;\n        }\n        if (statBonusGene == 10) {\n            heroStats.vitality = heroStats.vitality + 2;\n        }\n        if (statBonusGene == 12) {\n            heroStats.endurance = heroStats.endurance + 2;\n        }\n        if (statBonusGene == 14) {\n            heroStats.dexterity = heroStats.dexterity + 2;\n        }\n\n        // Add Rarity\n        (heroStats, ) = addRarityBonus(heroStats, _rarity, _crystal, _crystalId);\n\n        // Augment with tears.\n        heroStats = _augmentStatTears(heroStats, _crystal);\n\n        // TODO Augment with bonus item.\n\n        return heroStats;\n    }\n\n    function _addMutualExclusiveStatBonuses(\n        HeroStats memory _heroStats,\n        uint8[8] memory _statsIncreased,\n        uint8 _numStats,\n        uint8 _boostAmount,\n        HeroCrystal memory _crystal,\n        uint256 _crystalId\n    ) internal returns (HeroStats memory, uint8[8] memory) {\n        uint8[8] memory statsArray = [0, 1, 2, 3, 4, 5, 6, 7];\n        for (uint256 i = 0; i < _numStats; i++) {\n            // Choose a random index between 0 and 7 - i so that it decreases each time it runs.\n            uint256 randomIndex = IRandomGenerator(randomGenerator).getRandom(\n                RandomInputs(0, (7 - i), _crystal.createdBlock, 5, _crystalId)\n            );\n\n            // Grab the stat from the random index.\n            uint8 randomStat = statsArray[randomIndex];\n\n            // Take the stat at the end of the limit and swap it with this one.\n            statsArray[randomIndex] = statsArray[7 - i];\n\n            // Increase the stat by the boost amount.\n            _heroStats = augmentStat(_heroStats, randomStat, _boostAmount);\n            _statsIncreased[randomStat] += _boostAmount;\n        }\n\n        return (_heroStats, _statsIncreased);\n    }\n\n    function addRarityBonus(\n        HeroStats memory _heroStats,\n        Rarity _rarity,\n        HeroCrystal memory _crystal,\n        uint256 _crystalId\n    ) public onlyRole(WHITELIST_ROLE) returns (HeroStats memory, uint8[8] memory) {\n        uint8[8] memory statsIncreased;\n        if (_rarity == Rarity.MYTHIC) {\n            // +2 to three random, mutually exclusive stats\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                3,\n                2,\n                _crystal,\n                _crystalId\n            );\n            // then +1 to three random, mutually exclusive stats\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                3,\n                1,\n                _crystal,\n                _crystalId\n            );\n            // then +1 to a random stat.\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                1,\n                1,\n                _crystal,\n                _crystalId\n            );\n        } else if (_rarity == Rarity.LEGENDARY) {\n            // +2 to one random stat,\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                1,\n                2,\n                _crystal,\n                _crystalId\n            );\n            // then +1 to three random, mutually exclusive stats\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                3,\n                1,\n                _crystal,\n                _crystalId\n            );\n            // then an additional +1 to two random stat, mutually exclusive stats.\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                2,\n                1,\n                _crystal,\n                _crystalId\n            );\n        } else if (_rarity == Rarity.RARE) {\n            // +1 to three random, mutually exclusive stats\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                3,\n                1,\n                _crystal,\n                _crystalId\n            );\n            // then an additional +1 to a random stat (including any stats that received a bonus already)\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                1,\n                1,\n                _crystal,\n                _crystalId\n            );\n        } else if (_rarity == Rarity.UNCOMMON) {\n            // +1 to two random, mutually exclusive stats\n            (_heroStats, statsIncreased) = _addMutualExclusiveStatBonuses(\n                _heroStats,\n                statsIncreased,\n                2,\n                1,\n                _crystal,\n                _crystalId\n            );\n        }\n\n        return (_heroStats, statsIncreased);\n    }\n\n    function _augmentStatTears(\n        HeroStats memory _stats,\n        HeroCrystal memory /*_crystal*/\n    ) internal pure returns (HeroStats memory) {\n        // TODO - Augment the stats based on the tears from each parent.\n        // To do this effectively, we need to load both parents.\n        // Hero memory summoner = heroCore.getHero(_crystal.summonerId);\n        // Hero memory assistant = heroCore.getHero(_crystal.assistantId);\n\n        // Get the bonus for each parent based on their tears and job level.\n\n        /*\n\n        Each parent can provide bonuses to the Stats, PrimeStatUp, and SubStatUp arrays. \n        Bonuses are based on the level of each parent and the amount of Gaia’s Tears used to make the summoning egg. \n        Players can spend +10 Gaia’s Tears for each step of 5 levels each hero has reached.\n        The Gaia’s tear bonuses follow a specific alternating pattern, and loop back to the beginning from the end:\n\n        +(1 + loopCount) to stat matching highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of highest parent stat\n        +(1 + loopCount) to stat matching second highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of second highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of second highest parent stat\n        +(1 + loopCount) to stat matching third highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of third highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of third highest parent stat\n\n        */\n\n        return _stats;\n    }\n\n    function augmentStat(\n        HeroStats memory _stats,\n        uint256 _stat,\n        uint8 _increase\n    ) public pure returns (HeroStats memory) {\n        if (_stat == 0) {\n            _stats.strength = _stats.strength + _increase;\n        } else if (_stat == 1) {\n            _stats.agility = _stats.agility + _increase;\n        } else if (_stat == 2) {\n            _stats.intelligence = _stats.intelligence + _increase;\n        } else if (_stat == 3) {\n            _stats.wisdom = _stats.wisdom + _increase;\n        } else if (_stat == 4) {\n            _stats.luck = _stats.luck + _increase;\n        } else if (_stat == 5) {\n            _stats.vitality = _stats.vitality + _increase;\n        } else if (_stat == 6) {\n            _stats.endurance = _stats.endurance + _increase;\n        } else if (_stat == 7) {\n            _stats.dexterity = _stats.dexterity + _increase;\n        } else if (_stat == 8) {\n            _stats.hp = _stats.hp + _increase;\n        } else if (_stat == 9) {\n            _stats.mp = _stats.mp + _increase;\n        } else if (_stat == 10) {\n            _stats.stamina = _stats.stamina + _increase;\n        }\n        return _stats;\n    }\n\n    function generateStatGrowth(\n        uint256 _statGenes,\n        HeroCrystal memory, /*_crystal*/\n        Rarity, /*_rarity*/\n        bool _isPrimary\n    ) external pure returns (HeroStatGrowth memory) {\n        uint16[14][31] memory classStatGrowth;\n\n        classStatGrowth[0] = [7500, 2000, 2000, 3500, 5000, 6500, 6500, 7000, 1500, 4000, 4500, 5000, 3500, 1500]; // warrior\n        classStatGrowth[1] = [7000, 2000, 2500, 3500, 4500, 7500, 7500, 5500, 1500, 3500, 5000, 4000, 4000, 2000]; // knight\n        classStatGrowth[2] = [5500, 2500, 3500, 6500, 7000, 5000, 4500, 5500, 2500, 5000, 2500, 3000, 4000, 3000]; // thief\n        classStatGrowth[3] = [5500, 4000, 2500, 4000, 5000, 5000, 6000, 8000, 2500, 5000, 2500, 3000, 4000, 3000]; // archer\n        classStatGrowth[4] = [3000, 7000, 8000, 4000, 4000, 5000, 6000, 3000, 3500, 4000, 2500, 1500, 3500, 5000]; // priest\n        classStatGrowth[5] = [3000, 8000, 8000, 4000, 4000, 5000, 5000, 3000, 3500, 4000, 2500, 1500, 3500, 5000]; // wizard\n        classStatGrowth[6] = [6000, 2500, 5000, 3000, 6000, 6000, 5500, 6000, 2500, 3500, 4000, 3000, 4000, 3000]; // monk\n        classStatGrowth[7] = [7000, 2000, 2000, 5500, 5000, 6000, 5500, 7000, 1500, 4500, 4000, 4500, 4000, 1500]; // pirate\n        classStatGrowth[16] = [8000, 3000, 6500, 4000, 3500, 8000, 8000, 4000, 1000, 4000, 5000, 2500, 4000, 3500]; // paladin\n        classStatGrowth[17] = [8500, 7000, 3500, 3500, 3500, 7500, 6000, 5500, 2000, 5500, 2500, 2000, 4000, 4000]; // darkknight\n        classStatGrowth[18] = [4500, 8500, 8500, 4000, 5000, 5000, 5000, 4500, 4000, 4000, 2000, 1500, 3500, 5000]; // summoner\n        classStatGrowth[19] = [5000, 5000, 4000, 6000, 8500, 5000, 4000, 7500, 2500, 5000, 2500, 2500, 5000, 2500]; // ninja\n        classStatGrowth[24] = [8000, 5000, 6000, 5000, 6500, 6000, 7000, 6500, 1500, 3500, 5000, 3500, 4500, 2000]; // dragoon\n        classStatGrowth[25] = [4000, 9000, 9000, 5500, 7500, 6000, 5000, 4000, 4000, 3500, 2500, 1000, 3000, 6000]; // sage\n        classStatGrowth[28] = [8500, 6500, 6500, 6000, 6000, 6500, 7500, 7500, 1000, 4000, 5000, 2500, 5000, 2500]; // dreadknight\n\n        // TODO - Augment this with the tears from each parent, as well as their growthstats.\n\n        /*\n\n        Each parent can provide bonuses to the Stats, PrimeStatUp, and SubStatUp arrays. \n        Bonuses are based on the level of each parent and the amount of Gaia’s Tears used to make the summoning egg. \n        Players can spend +10 Gaia’s Tears for each step of 5 levels each hero has reached.\n        The Gaia’s tear bonuses follow a specific alternating pattern, and loop back to the beginning from the end:\n\n        +(1 + loopCount) to stat matching highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of highest parent stat\n        +(1 + loopCount) to stat matching second highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of second highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of second highest parent stat\n        +(1 + loopCount) to stat matching third highest parent stat\n        +(1 + loopCount)% to primary stat increase rate of third highest parent stat\n        +(2 + loopCount)% to secondary stat increase rate of third highest parent stat\n\n        */\n\n        uint8 class;\n\n        if (_isPrimary) {\n            class = getGene(_statGenes, 44); // Class is position 44\n        } else {\n            class = getGene(_statGenes, 40); // Subclass is position 40\n        }\n\n        HeroStatGrowth memory statGrowth = HeroStatGrowth({\n            strength: classStatGrowth[class][0],\n            intelligence: classStatGrowth[class][1],\n            wisdom: classStatGrowth[class][2],\n            luck: classStatGrowth[class][3],\n            agility: classStatGrowth[class][4],\n            vitality: classStatGrowth[class][5],\n            endurance: classStatGrowth[class][6],\n            dexterity: classStatGrowth[class][7],\n            hpSm: classStatGrowth[class][8],\n            hpRg: classStatGrowth[class][9],\n            hpLg: classStatGrowth[class][10],\n            mpSm: classStatGrowth[class][11],\n            mpRg: classStatGrowth[class][12],\n            mpLg: classStatGrowth[class][13]\n        });\n\n        // If this is for secondary, go through and divide each stat by 4.\n        if (!_isPrimary) {\n            statGrowth.strength = statGrowth.strength / 4;\n            statGrowth.intelligence = statGrowth.intelligence / 4;\n            statGrowth.wisdom = statGrowth.wisdom / 4;\n            statGrowth.luck = statGrowth.luck / 4;\n            statGrowth.agility = statGrowth.agility / 4;\n            statGrowth.vitality = statGrowth.vitality / 4;\n            statGrowth.endurance = statGrowth.endurance / 4;\n            statGrowth.dexterity = statGrowth.dexterity / 4;\n            statGrowth.hpSm = statGrowth.hpSm / 4;\n            statGrowth.hpRg = statGrowth.hpRg / 4;\n            statGrowth.hpLg = statGrowth.hpLg / 4;\n            statGrowth.mpSm = statGrowth.mpSm / 4;\n            statGrowth.mpRg = statGrowth.mpRg / 4;\n            statGrowth.mpLg = statGrowth.mpLg / 4;\n        }\n\n        // Augment this with the stat boost genes.\n        uint16 boostAmount = 200;\n\n        if (!_isPrimary) {\n            boostAmount = 400;\n        }\n\n        uint8 statBoostGene = getGene(_statGenes, 12); // Stat boost gene is at position 12.\n        if (statBoostGene == 0) {\n            statGrowth.strength = statGrowth.strength + boostAmount;\n        }\n        if (statBoostGene == 2) {\n            statGrowth.agility = statGrowth.agility + boostAmount;\n        }\n        if (statBoostGene == 4) {\n            statGrowth.intelligence = statGrowth.intelligence + boostAmount;\n        }\n        if (statBoostGene == 6) {\n            statGrowth.wisdom = statGrowth.wisdom + boostAmount;\n        }\n        if (statBoostGene == 8) {\n            statGrowth.luck = statGrowth.luck + boostAmount;\n        }\n        if (statBoostGene == 10) {\n            statGrowth.vitality = statGrowth.vitality + boostAmount;\n        }\n        if (statBoostGene == 12) {\n            statGrowth.endurance = statGrowth.endurance + boostAmount;\n        }\n        if (statBoostGene == 14) {\n            statGrowth.dexterity = statGrowth.dexterity + boostAmount;\n        }\n\n        return statGrowth;\n    }\n}\n"
    },
    "contracts/messaging/dfk/random/IRandomGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RandomInputs} from \"../types/RandomTypes.sol\";\n\ninterface IRandomGenerator {\n    function getRandom(RandomInputs memory _inputs) external returns (uint256);\n}\n"
    },
    "contracts/messaging/dfk/libs/LibGeneScience.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title GeneScience implements the trait calculation for new genes\n/// @author Axiom Zen, Dieter Shirley <dete@axiomzen.co> (https://github.com/dete), Fabiano P. Soriani <fabianosoriani@gmail.com> (https://github.com/flockonus), Jordan Schalm <jordan.schalm@gmail.com> (https://github.com/jordanschalm), Defi Crafter <deficrafter@protonmail.com> (https://github.com/deficrafter)\nlibrary LibGeneScience {\n    /// @dev given a characteristic and 2 genes (unsorted) - returns > 0 if the genes ascended, that's the value\n    /// @param trait1 any trait of that characteristic\n    /// @param trait2 any trait of that characteristic\n    /// @param rand is expected to be a 3 bits number (0~7)\n    /// @return ascension -1 if didnt match any ascention, OR a number from 0 to 30 for the ascended trait\n    function _ascend(\n        uint8 trait1,\n        uint8 trait2,\n        uint256 rand\n    ) internal pure returns (uint8 ascension) {\n        ascension = 0;\n\n        uint8 smallT = trait1;\n        uint8 bigT = trait2;\n\n        if (smallT > bigT) {\n            bigT = trait1;\n            smallT = trait2;\n        }\n\n        if ((bigT - smallT == 1) && smallT % 2 == 0) {\n            // The rand argument is expected to be a random number 0-7.\n            // 1st and 2nd tier: 1/4 chance (rand is 0 or 1)\n            // 3rd and 4th tier: 1/8 chance (rand is 0)\n\n            // must be at least this much to ascend\n            uint256 maxRand;\n            if (smallT < 23) maxRand = 1;\n            else maxRand = 0;\n\n            if (rand <= maxRand) {\n                ascension = (smallT / 2) + 16;\n            }\n        }\n    }\n\n    /// @dev given a number get a slice of any bits, at certain offset\n    /// @param _n a number to be sliced\n    /// @param _nbits how many bits long is the new number\n    /// @param _offset how many bits to skip\n    function _sliceNumber(\n        uint256 _n,\n        uint256 _nbits,\n        uint256 _offset\n    ) private pure returns (uint256) {\n        // mask is made by shifting left an offset number of times\n        uint256 mask = uint256((2**_nbits) - 1) << _offset;\n        // AND n with mask, and trim to max of _nbits bits\n        return uint256((_n & mask) >> _offset);\n    }\n\n    /// @dev Get a 5 bit slice from an input as a number\n    /// @param _input bits, encoded as uint\n    /// @param _slot from 0 to 50\n    function _get5Bits(uint256 _input, uint256 _slot) internal pure returns (uint8) {\n        return uint8(_sliceNumber(_input, uint256(5), _slot * 5));\n    }\n\n    /// @dev Parse a gene and returns all of 12 \"trait stack\" that makes the characteristics\n    /// @param _genes gene\n    /// @return the 48 traits that composes the genetic code, logically divided in stacks of 4, where only the first trait of each stack may express\n    function decode(uint256 _genes) internal pure returns (uint8[] memory) {\n        uint8[] memory traits = new uint8[](48);\n        uint256 i;\n        for (i = 0; i < 48; i++) {\n            traits[i] = _get5Bits(_genes, i);\n        }\n        return traits;\n    }\n\n    /// @dev Given an array of traits return the number that represent genes\n    function encode(uint8[] memory _traits) internal pure returns (uint256 _genes) {\n        _genes = 0;\n        for (uint256 i = 0; i < 48; i++) {\n            _genes = _genes << 5;\n            // bitwise OR trait with _genes\n            _genes = _genes | _traits[47 - i];\n        }\n        return _genes;\n    }\n\n    /// @dev return the expressing traits\n    /// @param _genes the long number expressing cat genes\n    function expressingTraits(uint256 _genes) internal pure returns (uint8[12] memory) {\n        uint8[12] memory express;\n        for (uint256 i = 0; i < 12; i++) {\n            express[i] = _get5Bits(_genes, i * 4);\n        }\n        return express;\n    }\n\n    /// @dev the function as defined in the breeding contract.\n    function mixGenes(\n        uint256 _genes1,\n        uint256 _genes2,\n        uint256 _randomN\n    ) internal pure returns (uint256) {\n        // generate 256 bits of random, using as much entropy as we can from\n        // sources that can't change between calls.\n        _randomN = uint256(keccak256(abi.encodePacked(_randomN, _genes1, _genes2)));\n        uint256 randomIndex = 0;\n\n        uint8[] memory genes1Array = decode(_genes1);\n        uint8[] memory genes2Array = decode(_genes2);\n        // All traits that will belong to baby\n        uint8[] memory babyArray = new uint8[](48);\n        // A pointer to the trait we are dealing with currently\n        uint256 traitPos;\n        // Trait swap value holder\n        uint8 swap;\n        // iterate all 12 characteristics\n        for (uint256 i = 0; i < 12; i++) {\n            // pick 4 traits for characteristic i\n            uint256 j;\n            for (j = 3; j >= 1; j--) {\n                traitPos = (i * 4) + j;\n\n                uint256 rand = _sliceNumber(_randomN, 2, randomIndex); // 0~3\n                randomIndex += 2;\n\n                // 1/4 of a chance of gene swapping forward towards expressing.\n                if (rand == 0) {\n                    // do it for parent 1\n                    swap = genes1Array[traitPos];\n                    genes1Array[traitPos] = genes1Array[traitPos - 1];\n                    genes1Array[traitPos - 1] = swap;\n                }\n\n                rand = _sliceNumber(_randomN, 2, randomIndex); // 0~3\n                randomIndex += 2;\n\n                if (rand == 0) {\n                    // do it for parent 2\n                    swap = genes2Array[traitPos];\n                    genes2Array[traitPos] = genes2Array[traitPos - 1];\n                    genes2Array[traitPos - 1] = swap;\n                }\n            }\n        }\n\n        // DEBUG ONLY - We should have used 72 2-bit slices above for the swapping\n        // which will have consumed 144 bits.\n        // assert(randomIndex == 144);\n\n        // We have 256 - 144 = 112 bits of _randomNess left at this point. We will use up to\n        // four bits for the first slot of each trait (three for the possible ascension, one\n        // to pick between mom and dad if the ascension fails, for a total of 48 bits. The other\n        // traits use one bit to pick between parents (36 gene pairs, 36 genes), leaving us\n        // well within our entropy budget.\n\n        // done shuffling parent genes, now let's decide on choosing trait and if ascending.\n        // NOTE: Ascensions ONLY happen in the \"top slot\" of each characteristic. This saves\n        //  gas and also ensures ascensions only happen when they're visible.\n        for (traitPos = 0; traitPos < 48; traitPos++) {\n            // See if this trait pair should ascend\n            uint8 ascendedTrait = 0;\n\n            // There are two checks here. The first is straightforward, only the trait\n            // in the first slot can ascend. The first slot is zero mod 4.\n            //\n            // The second check is more subtle: Only values that are one apart can ascend,\n            // which is what we check inside the _ascend method. However, this simple mask\n            // and compare is very cheap (9 gas) and will filter out about half of the\n            // non-ascending pairs without a function call.\n            //\n            // The comparison itself just checks that one value is even, and the other\n            // is odd.\n            if ((traitPos % 4 == 0) && (genes1Array[traitPos] & 1) != (genes2Array[traitPos] & 1)) {\n                uint256 rand = _sliceNumber(_randomN, 3, randomIndex);\n                randomIndex += 3;\n\n                ascendedTrait = _ascend(genes1Array[traitPos], genes2Array[traitPos], rand);\n            }\n\n            if (ascendedTrait > 0) {\n                babyArray[traitPos] = uint8(ascendedTrait);\n            } else {\n                // did not ascend, pick one of the parent's traits for the baby\n                // We use the top bit of rand for this (the bottom three bits were used\n                // to check for the ascension itself).\n                uint256 rand = _sliceNumber(_randomN, 1, randomIndex);\n                randomIndex += 1;\n\n                if (rand == 0) {\n                    babyArray[traitPos] = uint8(genes1Array[traitPos]);\n                } else {\n                    babyArray[traitPos] = uint8(genes2Array[traitPos]);\n                }\n            }\n        }\n\n        return encode(babyArray);\n    }\n}\n"
    },
    "contracts/messaging/dfk/IHeroCoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Hero, HeroInfo, HeroState, SummoningInfo, HeroProfessions, Rarity} from \"./types/HeroTypes.sol\";\nimport {HeroCrystal} from \"./types/CrystalTypes.sol\";\n\ninterface IHeroCoreUpgradeable {\n    function bridgeMint(uint256 _id, address _to) external;\n\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\n\n    function MINTER_ROLE() external view returns (bytes32);\n\n    function MODERATOR_ROLE() external view returns (bytes32);\n\n    function PAUSER_ROLE() external view returns (bytes32);\n\n    function STAMINA_ROLE() external view returns (bytes32);\n\n    function HERO_MODERATOR_ROLE() external view returns (bytes32);\n\n    function updateHero(Hero memory _hero) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function assistingAuction() external view returns (address);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function baseCooldown() external view returns (uint256);\n\n    function baseSummonFee() external view returns (uint256);\n\n    function burn(uint256 tokenId) external;\n\n    function calculateSummoningCost(uint256 _heroId) external view returns (uint256);\n\n    function cooldownPerGen() external view returns (uint256);\n\n    function cooldownPerSummon() external view returns (uint256);\n\n    function cooldowns(uint256) external view returns (uint32);\n\n    function createAssistingAuction(\n        uint256 _heroId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    ) external;\n\n    function createHero(\n        uint256 _statGenes,\n        uint256 _visualGenes,\n        Rarity _rarity,\n        bool _shiny,\n        HeroCrystal memory _crystal,\n        uint256 _crystalId\n    ) external returns (uint256);\n\n    function createSaleAuction(\n        uint256 _heroId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    ) external;\n\n    function deductStamina(uint256 _heroId, uint256 _staminaDeduction) external;\n\n    function extractNumber(\n        uint256 randomNumber,\n        uint256 digits,\n        uint256 offset\n    ) external pure returns (uint256 result);\n\n    function geneScience() external view returns (address);\n\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    function getCurrentStamina(uint256 _heroId) external view returns (uint256);\n\n    function getHero(uint256 _id) external view returns (Hero memory);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function increasePerGen() external view returns (uint256);\n\n    function increasePerSummon() external view returns (uint256);\n\n    function initialize(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) external;\n\n    function initialize(address _crystalAddress) external;\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    function isReadyToSummon(uint256 _heroId) external view returns (bool);\n\n    function crystalToken() external view returns (address);\n\n    function mint(address to) external;\n\n    function name() external view returns (string memory);\n\n    function openCrystal(uint256 _crystalId) external returns (uint256);\n\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function pause() external;\n\n    function paused() external view returns (bool);\n\n    function renounceRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) external;\n\n    function saleAuction() external view returns (address);\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function setAssistingAuctionAddress(address _address) external;\n\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) external;\n\n    function setSaleAuctionAddress(address _address) external;\n\n    function setSummonCooldowns(\n        uint256 _baseCooldown,\n        uint256 _cooldownPerSummon,\n        uint256 _cooldownPerGen\n    ) external;\n\n    function setSummonFees(\n        uint256 _baseSummonFee,\n        uint256 _increasePerSummon,\n        uint256 _increasePerGen\n    ) external;\n\n    function setTimePerStamina(uint256 _timePerStamina) external;\n\n    function summonCrystal(\n        uint256 _summonerId,\n        uint256 _assistantId,\n        uint8 _summonerTears,\n        uint8 _assistantTears,\n        address _enhancementStone\n    ) external;\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    function symbol() external view returns (string memory);\n\n    function timePerStamina() external view returns (uint256);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function unpause() external;\n\n    function vrf(uint256 blockNumber) external view returns (bytes32 result);\n}\n"
    },
    "contracts/messaging/dfk/types/HeroTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nenum HeroStatus {\n    OK,\n    KO\n}\n\nenum Rarity {\n    COMMON,\n    UNCOMMON,\n    RARE,\n    LEGENDARY,\n    MYTHIC\n}\n\nstruct HeroStats {\n    uint16 strength;\n    uint16 agility;\n    uint16 intelligence;\n    uint16 wisdom;\n    uint16 luck;\n    uint16 vitality;\n    uint16 endurance;\n    uint16 dexterity;\n    uint16 hp;\n    uint16 mp;\n    uint16 stamina;\n}\n\nstruct HeroStatGrowth {\n    uint16 strength;\n    uint16 agility;\n    uint16 intelligence;\n    uint16 wisdom;\n    uint16 luck;\n    uint16 vitality;\n    uint16 endurance;\n    uint16 dexterity;\n    uint16 hpSm;\n    uint16 hpRg;\n    uint16 hpLg;\n    uint16 mpSm;\n    uint16 mpRg;\n    uint16 mpLg;\n}\n\nstruct SummoningInfo {\n    uint256 summonedTime;\n    // How long until the hero can participate in summoning again.\n    uint256 nextSummonTime;\n    uint256 summonerId;\n    uint256 assistantId;\n    // How many summons the hero has done.\n    uint32 summons;\n    // How many summons can the hero do max.\n    uint32 maxSummons;\n}\n\nstruct HeroInfo {\n    uint256 statGenes;\n    uint256 visualGenes;\n    Rarity rarity;\n    bool shiny;\n    uint16 generation;\n    uint32 firstName;\n    uint32 lastName;\n    uint8 shinyStyle;\n    uint8 class;\n    uint8 subClass;\n}\n\nstruct HeroState {\n    // The time the hero's stamina is full at.\n    uint256 staminaFullAt;\n    // The time the hero's hp is full at.\n    uint256 hpFullAt;\n    // The time the hero's mp is full at.\n    uint256 mpFullAt;\n    // The current level of the hero.\n    uint16 level;\n    // The current XP the hero has towards their next level.\n    uint64 xp;\n    // The current quest a hero is undertaking, if any.\n    address currentQuest;\n    // The skill points the hero can spend.\n    uint8 sp;\n    HeroStatus status;\n}\n\nstruct HeroProfessions {\n    uint16 mining;\n    uint16 gardening;\n    uint16 foraging;\n    uint16 fishing;\n}\n\n/// @dev The main Hero struct.\nstruct Hero {\n    uint256 id;\n    SummoningInfo summoningInfo;\n    HeroInfo info;\n    HeroState state;\n    HeroStats stats;\n    HeroStatGrowth primaryStatGrowth;\n    HeroStatGrowth secondaryStatGrowth;\n    HeroProfessions professions;\n}\n"
    },
    "contracts/messaging/dfk/types/CrystalTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nstruct HeroCrystal {\n    address owner;\n    uint256 summonerId;\n    uint256 assistantId;\n    uint16 generation;\n    uint256 createdBlock;\n    uint256 heroId;\n    uint8 summonerTears;\n    uint8 assistantTears;\n    address enhancementStone;\n    uint32 maxSummons;\n    uint32 firstName;\n    uint32 lastName;\n    uint8 shinyStyle;\n}\n"
    },
    "contracts/messaging/dfk/types/RandomTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct RandomInputs {\n    uint256 min;\n    uint256 max;\n    uint256 initialBlock;\n    uint256 waitBlocks;\n    uint256 uniqueKey;\n}\n"
    },
    "contracts/messaging/dfk/types/JobTiers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nenum JobTier {\n    NORMAL,\n    ADVANCED,\n    ELITE,\n    EXALTED,\n    TRANSCENDENT\n}\n"
    },
    "contracts/messaging/dfk/IStatScienceUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Hero, HeroInfo, HeroState, HeroStats, HeroStatGrowth, SummoningInfo, HeroProfessions, Rarity} from \"./types/HeroTypes.sol\";\n\nimport {HeroCrystal} from \"./types/CrystalTypes.sol\";\nimport {JobTier} from \"./types/JobTiers.sol\";\n\ninterface IStatScienceUpgradeable {\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\n\n    function WHITELIST_ROLE() external view returns (bytes32);\n\n    function augmentStat(\n        HeroStats memory _stats,\n        uint256 _stat,\n        uint8 _increase\n    ) external pure returns (HeroStats memory);\n\n    function generateStatGrowth(\n        uint256 _statGenes,\n        HeroCrystal memory, /*_crystal*/\n        Rarity, /*_rarity*/\n        bool _isPrimary\n    ) external pure returns (HeroStatGrowth memory);\n\n    function generateStats(\n        uint256 _statGenes,\n        HeroCrystal memory _crystal,\n        Rarity _rarity,\n        uint256 _crystalId\n    ) external returns (HeroStats memory);\n\n    function getGene(uint256 _genes, uint8 _position) external pure returns (uint8);\n\n    function getJobTier(uint8 _class) external pure returns (JobTier);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function renounceRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/messaging/dfk/HeroCoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/access/AccessControlUpgradeable.sol\";\nimport \"./IStatScienceUpgradeable.sol\";\nimport {HeroStatus} from \"./types/HeroTypes.sol\";\n\n/// @title Core contract for Heroes.\n/// @author Frisky Fox - Defi Kingdoms\n/// @dev Holds the base structs, events, and data.\ncontract HeroCoreUpgradeable is ERC721EnumerableUpgradeable, PausableUpgradeable, AccessControlUpgradeable {\n    /// ROLES ///\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n    bytes32 public constant HERO_MODERATOR_ROLE = keccak256(\"HERO_MODERATOR_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BRIDGE_ROLE = keccak256(\"BRIDGE_ROLE\");\n    /// STATE ///\n    IStatScienceUpgradeable statScience;\n    mapping(uint256 => Hero) public heroes;\n    uint256 public nextHeroId;\n    /// EVENTS ///\n    /// @dev The HeroSummoned event is fired whenever a new hero is created.\n    event HeroSummoned(\n        address indexed owner,\n        uint256 heroId,\n        uint256 summonerId,\n        uint256 assistantId,\n        uint256 statGenes,\n        uint256 visualGenes\n    );\n    /// @dev The HeroUpdated event is fired whenever a hero is updated.\n    event HeroUpdated(address indexed owner, uint256 heroId, Hero hero);\n\n    /// @dev The initialize function is the constructor for upgradeable contracts.\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _statScience\n    ) public virtual initializer {\n        __ERC721_init(_name, _symbol);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MODERATOR_ROLE, msg.sender);\n        _setupRole(MINTER_ROLE, msg.sender);\n        _setupRole(HERO_MODERATOR_ROLE, msg.sender);\n        statScience = IStatScienceUpgradeable(_statScience);\n        nextHeroId = 1000000000001;\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://api.defikingdoms.com/\";\n    }\n\n    function getUserHeroes(address _address) external view returns (Hero[] memory) {\n        uint256 balance = balanceOf(_address);\n        Hero[] memory heroArr = new Hero[](balance);\n        for (uint256 i = 0; i < balance; i++) {\n            heroArr[i] = getHero(tokenOfOwnerByIndex(_address, i));\n        }\n        return heroArr;\n    }\n\n    /// @dev Gets a hero object.\n    /// @param _id The hero id.\n    function getHero(uint256 _id) public view returns (Hero memory) {\n        return heroes[_id];\n    }\n\n    /// @dev Creates Heroes with the given settings.\n    /// @param _statGenes the encoded genes for the hero stats.\n    /// @param _visualGenes the genes for the appearance.\n    /// @param _rarity the rarity of the hero.\n    /// @param _shiny whether or not the hero is shiny.\n    /// @param _crystal the crystal\n    function createHero(\n        uint256 _statGenes,\n        uint256 _visualGenes,\n        Rarity _rarity,\n        bool _shiny,\n        HeroCrystal memory _crystal,\n        uint256 _crystalId\n    ) public onlyRole(MINTER_ROLE) whenNotPaused returns (uint256) {\n        Hero memory _hero = Hero({\n            id: nextHeroId,\n            info: HeroInfo({\n                statGenes: _statGenes,\n                visualGenes: _visualGenes,\n                rarity: _rarity,\n                shiny: _shiny,\n                generation: _crystal.generation,\n                firstName: _crystal.firstName,\n                lastName: _crystal.lastName,\n                shinyStyle: _crystal.shinyStyle,\n                class: statScience.getGene(_statGenes, 44), // class is position 44\n                subClass: statScience.getGene(_statGenes, 40) // subclass is position 40\n            }),\n            state: HeroState({\n                level: 1,\n                xp: 0,\n                currentQuest: address(0),\n                staminaFullAt: 0,\n                hpFullAt: 0,\n                mpFullAt: 0,\n                sp: 0,\n                status: HeroStatus.OK\n            }),\n            summoningInfo: SummoningInfo({\n                summonedTime: block.timestamp,\n                nextSummonTime: block.timestamp,\n                summonerId: _crystal.summonerId,\n                assistantId: _crystal.assistantId,\n                summons: 0,\n                maxSummons: _crystal.maxSummons\n            }),\n            stats: statScience.generateStats(_statGenes, _crystal, _rarity, _crystalId),\n            primaryStatGrowth: statScience.generateStatGrowth(_statGenes, _crystal, _rarity, true),\n            secondaryStatGrowth: statScience.generateStatGrowth(_statGenes, _crystal, _rarity, false),\n            professions: HeroProfessions({mining: 0, gardening: 0, foraging: 0, fishing: 0})\n        });\n        heroes[nextHeroId] = _hero;\n        nextHeroId++;\n        // emit the summon event\n        emit HeroSummoned(\n            _crystal.owner,\n            _hero.id,\n            uint256(_hero.summoningInfo.summonerId),\n            uint256(_hero.summoningInfo.assistantId),\n            _hero.info.statGenes,\n            _hero.info.visualGenes\n        );\n        // Send the newly created hero to the owner.\n        _mint(_crystal.owner, _hero.id);\n        return _hero.id;\n    }\n\n    /// @dev Saves a hero object to storage.\n    function updateHero(Hero memory _hero) external onlyRole(HERO_MODERATOR_ROLE) whenNotPaused {\n        // Save the hero.\n        heroes[_hero.id] = _hero;\n        emit HeroUpdated(ownerOf(_hero.id), _hero.id, _hero);\n    }\n\n    function bridgeMint(uint256 _id, address _to) external onlyRole(BRIDGE_ROLE) {\n        _mint(_to, _id);\n    }\n\n    // /**\n    //  * @dev See {IERC165-supportsInterface}.\n    //  */\n    // /// TODO find out if this is right, Im not sure\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721EnumerableUpgradeable, AccessControlUpgradeable)\n        returns (bool)\n    {\n        // return interfaceId == type(IHeroTypes).interfaceId || super.supportsInterface(interfaceId);\n        return super.supportsInterface(interfaceId);\n    }\n\n    ///////////////////////////\n    /// @dev ADMIN FUNCTION ///\n    //////////////////////////\n    function pause() public onlyRole(MODERATOR_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(MODERATOR_ROLE) {\n        _unpause();\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/messaging/dfk/auctions/ERC721AuctionBaseUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"./helpers/CrystalFeesUpgradeable.sol\";\n\nimport {Auction} from \"./types/AuctionTypes.sol\";\n\n/// INTERFACES ///\n// import \"../ILandCore.sol\";\n\n/// @title AuctionBase for non-fungible tokens.\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\nabstract contract ERC721AuctionBaseUpgradeable is\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    CrystalFeesUpgradeable,\n    IERC721ReceiverUpgradeable\n{\n    /// ROLES ///\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n    bytes32 public constant BIDDER_ROLE = keccak256(\"BIDDER_ROLE\");\n\n    /// CONTRACTS ///\n    // Reference to contract tracking NFT ownership\n    IERC721Upgradeable public ERC721;\n\n    /// STATE ///\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    mapping(uint256 => Auction) public auctions;\n\n    // Map from token ID to their corresponding auction.\n    mapping(uint256 => uint256) tokenIdToAuction;\n    mapping(address => uint256[]) public userAuctions;\n    mapping(uint256 => uint256) auctionAtIndex;\n\n    uint256 public auctionIdOffset;\n    uint256 public totalAuctions;\n\n    /// EVENTS ///\n    event AuctionCreated(\n        uint256 auctionId,\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        address winner\n    );\n    event AuctionSuccessful(uint256 auctionId, uint256 indexed tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 auctionId, uint256 indexed tokenId);\n\n    function __ERC721AuctionBaseUpgradeable_init(\n        address _ERC721Address,\n        address _crystalAddress,\n        uint256 _cut,\n        uint256 _auctionIdOffset\n    ) internal onlyInitializing {\n        __CrystalFeesUpgradeable_init(_crystalAddress);\n        __Pausable_init();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MODERATOR_ROLE, msg.sender);\n\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 = IERC721Upgradeable(_ERC721Address);\n\n        Auction memory auction = Auction({\n            seller: address(this),\n            tokenId: 0,\n            startingPrice: 0,\n            endingPrice: 0,\n            duration: 0,\n            startedAt: 0,\n            winner: address(0),\n            open: false\n        });\n        auctions[0] = auction;\n\n        auctionIdOffset = _auctionIdOffset;\n        totalAuctions = 1;\n    }\n\n    /////////////////////\n    /// @dev ABSTRACT ///\n    /////////////////////\n\n    /// @dev Creates and begins a new auction. This can either escrow or not depending on implementation\n    /// but should at the very least call _addAuction and check ownership\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _winner - The person who can win, if private. 0 for anyone.\n    function createAuction(\n        uint256 _tokenId,\n        uint128 _startingPrice,\n        uint128 _endingPrice,\n        uint64 _duration,\n        address _winner\n    ) external virtual;\n\n    /// @dev Bids on an open auction, completing the auction if enough JEWELs are supplied.\n    /// @param _tokenId - ID of token to bid on.\n    /// @param _bidAmount The bid amount.\n    function bid(uint256 _tokenId, uint256 _bidAmount) public virtual;\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @notice depending on if the auction is escrow or not this might need to verify ownership\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId) external virtual;\n\n    /////////////////\n    /// @dev CORE ///\n    /////////////////\n\n    /// @dev Bids on an open auction, completing the auction if enough JEWELs are supplied.\n    /// @param _tokenId - ID of token to bid on.\n    /// @param _bidAmount The bid amount.\n    function bidFor(\n        address _bidder,\n        uint256 _tokenId,\n        uint256 _bidAmount\n    ) public virtual whenNotPaused onlyRole(BIDDER_ROLE) {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_bidder, _tokenId, _bidAmount);\n    }\n\n    /////////////////\n    /// @dev VIEW ///\n    /////////////////\n\n    /// @dev Checks if the token is currently on auction.\n    function isOnAuction(uint256 _tokenId) public view returns (bool) {\n        Auction storage auction = auctions[tokenIdToAuction[_tokenId]];\n        return _isOnAuction(auction);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId) public view returns (Auction memory) {\n        require(tokenIdToAuction[_tokenId] != 0, \"Auction does not exist\");\n        uint256 _auctionId = tokenIdToAuction[_tokenId];\n        Auction storage auction = auctions[_auctionId];\n        require(_isOnAuction(auction));\n        return auction;\n    }\n\n    /// @dev single endpoint gets an array of auctions\n    function getAuctions(uint256[] memory _tokenIds) public view returns (Auction[] memory) {\n        Auction[] memory auctionsArr = new Auction[](_tokenIds.length);\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            auctionsArr[i] = getAuction(_tokenIds[i]);\n        }\n        return auctionsArr;\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId) public view returns (uint256) {\n        Auction storage auction = auctions[tokenIdToAuction[_tokenId]];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n    /// @dev returns the accounts auctions\n    function getUserAuctions(address _address) public view returns (uint256[] memory) {\n        return userAuctions[_address];\n    }\n\n    /////////////////////\n    /// @dev INTERNAL ///\n    /////////////////////\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        ERC721.safeTransferFrom(_owner, address(this), _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        ERC721.safeTransferFrom(address(this), _receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes, \"duration\");\n\n        // Enforce prices are not 0\n        require(_auction.startingPrice > 0 && _auction.endingPrice > 0, \"cannot auction for 0\");\n\n        // Make sure it's not already on auction.\n        require(tokenIdToAuction[_tokenId] == 0, \"already on auction\");\n\n        uint256 auctionId = auctionIdOffset + totalAuctions;\n        totalAuctions += 1;\n\n        auctions[auctionId] = _auction;\n\n        tokenIdToAuction[_tokenId] = auctionId;\n\n        auctionAtIndex[_tokenId] = userAuctions[msg.sender].length;\n        userAuctions[msg.sender].push(_tokenId);\n\n        emit AuctionCreated(\n            auctionId,\n            msg.sender,\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _auction.winner\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(\n        uint256 _auctionId,\n        uint256 _tokenId,\n        address _seller\n    ) internal {\n        _removeAuction(_seller, _auctionId, _tokenId);\n        emit AuctionCancelled(_auctionId, _tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(\n        address _bidder,\n        uint256 _tokenId,\n        uint256 _bidAmount\n    ) internal returns (uint256) {\n        // Get a reference to the auction struct\n        uint256 auctionId = tokenIdToAuction[_tokenId];\n\n        if (auctionId == 0) {\n            revert(\"Not on auction\");\n        }\n\n        Auction storage auction = auctions[auctionId];\n\n        // Explicitly check that this auction is currently live.\n        require(_isOnAuction(auction), \"Not on auction.\");\n\n        // Make sure the auction is open.\n        require(auction.open, \"Auction closed\");\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price, \"Bid too low\");\n\n        // If this is a private sale, make sure it only allows the address given.\n        require(auction.winner == address(0) || auction.winner == _bidder, \"private\");\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(auction.seller, auctionId, _tokenId);\n\n        // Transfer proceeds to owner (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Transfer the JEWELs to the ERC721 owner, minus the fee.\n            crystalToken.transferFrom(_bidder, auction.seller, sellerProceeds);\n\n            // Distribute the fee to the various addresses.\n            distributeCrystals(_bidder, auctioneerCut);\n        }\n\n        emit AuctionSuccessful(auctionId, _tokenId, price, _bidder);\n\n        return price;\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0 && _auction.open);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction) internal view returns (uint256) {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (block.timestamp > _auction.startedAt) {\n            secondsPassed = block.timestamp - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(_auction.startingPrice, _auction.endingPrice, _auction.duration, secondsPassed);\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    ) internal pure returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = (totalPriceChange * int256(_secondsPassed)) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the Auction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return (_price * ownerCut) / 10000;\n    }\n\n    function _removeAuction(\n        address _account,\n        uint256 _auctionId,\n        uint256 _tokenId\n    ) internal {\n        // We need to delete the item from the array for the user.\n        // Get the current index of that item.\n        uint256 currentIndex = auctionAtIndex[_tokenId];\n\n        // Put the last item in the array at that index.\n        userAuctions[_account][currentIndex] = userAuctions[_account][userAuctions[_account].length - 1];\n\n        // Remove the last element from the array.\n        userAuctions[_account].pop();\n\n        // Update the crystalAtIndex record for that crystal that was moved.\n        if (userAuctions[_account].length > currentIndex) {\n            auctionAtIndex[userAuctions[_account][currentIndex]] = currentIndex;\n        }\n\n        delete tokenIdToAuction[_tokenId];\n\n        Auction storage auction = auctions[_auctionId];\n        auction.open = false;\n    }\n\n    /**\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public pure override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    //////////////////\n    /// @dev ADMIN ///\n    //////////////////\n\n    /// @dev Sets the addresses and percentages that will receive fees.\n    /// @param _feeAddresses An array of addresses to send fees to.\n    /// @param _feePercents An array of percentages for the addresses to get.\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents)\n        public\n        override\n        onlyRole(MODERATOR_ROLE)\n    {\n        _setFees(_feeAddresses, _feePercents);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId) external whenPaused onlyRole(MODERATOR_ROLE) {\n        uint256 auctionId = tokenIdToAuction[_tokenId];\n        Auction storage auction = auctions[auctionId];\n        require(_isOnAuction(auction));\n        _cancelAuction(auctionId, _tokenId, auction.seller);\n    }\n\n    function pause() public whenNotPaused onlyRole(MODERATOR_ROLE) {\n        _pause();\n    }\n\n    function unpause() public whenPaused onlyRole(MODERATOR_ROLE) {\n        _unpause();\n    }\n}\n"
    },
    "contracts/messaging/dfk/auctions/helpers/CrystalFeesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// INTERFACES ///\n// TEMPORARY: NOT PROD\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable-4.5.0/proxy/utils/Initializable.sol\";\n\n/// @title CrystalFees\n/// @author Frisky Fox - Defi Kingdoms\n/// @dev Functionality that supports paying fees.\nabstract contract CrystalFeesUpgradeable is Initializable {\n    /// CONTRACTS ///\n    IERC20Upgradeable public crystalToken;\n\n    /// STATE ///\n    address[] public feeAddresses;\n    uint256[] public feePercents;\n\n    function __CrystalFeesUpgradeable_init(address _crystalTokenAddress) internal onlyInitializing {\n        crystalToken = IERC20Upgradeable(_crystalTokenAddress);\n    }\n\n    /// @dev Spends CRYSTALs and takes care to send them to the proper places.\n    function distributeCrystals(address _from, uint256 _amount) internal {\n        // Send percentages to different wallets.\n        for (uint256 i = 0; i < feeAddresses.length; i++) {\n            uint256 feeAmount = (feePercents[i] * _amount) / 10000;\n            crystalToken.transferFrom(_from, feeAddresses[i], feeAmount);\n        }\n    }\n\n    /// @dev Sets the addresses and percentages that will receive fees.\n    /// @param _feeAddresses An array of addresses to send fees to.\n    /// @param _feePercents An array of percentages for the addresses to get.\n    function _setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) internal {\n        // Make sure the length of the two arrays match.\n        require(_feeAddresses.length == _feePercents.length, \"length mismatch\");\n\n        // Make sure the percentages all add up to 10000.\n        uint256 total = 0;\n        for (uint256 i = 0; i < _feePercents.length; i++) {\n            total = total + _feePercents[i];\n        }\n\n        require(total == 10000, \"invalid fee amounts\");\n\n        // Set the fees.\n        feePercents = _feePercents;\n        feeAddresses = _feeAddresses;\n    }\n\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) public virtual;\n}\n"
    },
    "contracts/messaging/dfk/auctions/types/AuctionTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nstruct Auction {\n    // Current owner of NFT\n    address seller;\n    uint256 tokenId;\n    // Price (in wei) at beginning of auction\n    uint128 startingPrice;\n    // Price (in wei) at end of auction\n    uint128 endingPrice;\n    // Duration (in seconds) of auction\n    uint64 duration;\n    // Time when auction started\n    // NOTE: 0 if this auction has been concluded\n    uint64 startedAt;\n    // If the winner is set from the start, that means it is a private auction.\n    address winner;\n    bool open;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable-4.5.0/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/messaging/dfk/auctions/HeroAuctionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAssistingAuctionUpgradeable.sol\";\nimport \"./ERC721AuctionBaseUpgradeable.sol\";\n\n/// @title Auction modified for sale of heroes\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract HeroAuctionUpgradeable is ERC721AuctionBaseUpgradeable {\n    /// CONTRACTS ///\n    IAssistingAuctionUpgradeable public assistingAuction; // TODO this makes its underlying contract non upgradeable. any way we can do without this?\n\n    function initialize(\n        address _heroCoreAddress,\n        address _crystalAddress,\n        uint256 _cut,\n        address _assistingAuctionAddress,\n        uint256 _auctionIdOffset\n    ) public initializer {\n        __ERC721AuctionBaseUpgradeable_init(_heroCoreAddress, _crystalAddress, _cut, _auctionIdOffset);\n        assistingAuction = IAssistingAuctionUpgradeable(_assistingAuctionAddress);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    function createAuction(\n        uint256 _tokenId,\n        uint128 _startingPrice,\n        uint128 _endingPrice,\n        uint64 _duration,\n        address _winner\n    ) external override {\n        // Make sure they actually own the hero.\n        require(ERC721.ownerOf(_tokenId) == msg.sender, \"Must own the hero\");\n\n        // Cannot be on a hire auction.\n        require(!assistingAuction.isOnAuction(_tokenId), \"assisting\");\n\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            msg.sender,\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            uint64(block.timestamp),\n            _winner,\n            true\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough CRYSTALs are supplied.\n    /// @param _tokenId - ID of token to bid on.\n    /// @param _bidAmount The bid amount.\n    function bid(uint256 _tokenId, uint256 _bidAmount) public override whenNotPaused {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(msg.sender, _tokenId, _bidAmount);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId) external override {\n        uint256 auctionId = tokenIdToAuction[_tokenId];\n        Auction storage auction = auctions[auctionId];\n\n        require(_isOnAuction(auction), \"not on auction\");\n        require(msg.sender == auction.seller, \"not seller\");\n\n        _cancelAuction(auctionId, _tokenId, auction.seller);\n        _transfer(auction.seller, _tokenId);\n    }\n}\n"
    },
    "contracts/messaging/dfk/auctions/interfaces/IAssistingAuctionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAssistingAuctionUpgradeable {\n    function bid(uint256 _tokenId, uint256 _bidAmount) external;\n\n    function bidFor(\n        address _bidder,\n        uint256 _tokenId,\n        uint256 _bidAmount\n    ) external;\n\n    function cancelAuction(uint256 _tokenId) external;\n\n    function cancelAuctionWhenPaused(uint256 _tokenId) external;\n\n    function isOnAuction(uint256 _tokenId) external returns (bool);\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    ) external;\n\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns (\n            address seller,\n            uint256 startingPrice,\n            uint256 endingPrice,\n            uint256 duration,\n            uint256 startedAt\n        );\n\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256);\n\n    function heroCore() external view returns (address);\n\n    function jewelToken() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownerCut() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function renounceOwnership() external;\n\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) external;\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/messaging/dfk/auctions/AssistingAuctionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721AuctionBaseUpgradeable.sol\";\n\n/// @title Reverse auction modified for assisting\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\ncontract AssistingAuctionUpgradeable is ERC721AuctionBaseUpgradeable {\n    function initialize(\n        address _heroCoreAddress,\n        address _crystalAddress,\n        uint256 _cut,\n        uint256 _auctionIdOffset\n    ) public initializer {\n        __ERC721AuctionBaseUpgradeable_init(_heroCoreAddress, _crystalAddress, _cut, _auctionIdOffset);\n    }\n\n    function createAuction(\n        uint256 _tokenId,\n        uint128 _startingPrice,\n        uint128 _endingPrice,\n        uint64 _duration,\n        address _winner\n    ) external override {\n        // Make sure they actually own the hero.\n        require(ERC721.ownerOf(_tokenId) == msg.sender, \"Must own the hero\");\n\n        Auction memory auction = Auction(\n            msg.sender,\n            _tokenId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            uint64(block.timestamp),\n            _winner,\n            true\n        );\n\n        _addAuction(_tokenId, auction);\n    }\n\n    function bid(uint256, uint256) public view override whenNotPaused {\n        revert(\"cannot bid on assisting auction\");\n    }\n\n    function cancelAuction(uint256 _tokenId) external override {\n        uint256 auctionId = tokenIdToAuction[_tokenId];\n        Auction storage auction = auctions[auctionId];\n\n        require(_isOnAuction(auction), \"not on auction\");\n        require(msg.sender == ERC721.ownerOf(_tokenId) || msg.sender == auction.seller, \"not owner or seller\");\n\n        _cancelAuction(auctionId, _tokenId, auction.seller);\n    }\n}\n"
    },
    "contracts/messaging/dfk/IAssistingAuctionUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IAssistingAuction {\n    function bid(uint256 _tokenId, uint256 _bidAmount) external;\n\n    function bidFor(\n        address _bidder,\n        uint256 _tokenId,\n        uint256 _bidAmount\n    ) external;\n\n    function cancelAuction(uint256 _tokenId) external;\n\n    function cancelAuctionWhenPaused(uint256 _tokenId) external;\n\n    function isOnAuction(uint256 _tokenId) external returns (bool);\n\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    ) external;\n\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns (\n            address seller,\n            uint256 startingPrice,\n            uint256 endingPrice,\n            uint256 duration,\n            uint256 startedAt\n        );\n\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256);\n\n    function heroCore() external view returns (address);\n\n    function jewelToken() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function ownerCut() external view returns (uint256);\n\n    function paused() external view returns (bool);\n\n    function renounceOwnership() external;\n\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) external;\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/messaging/dfk/random/RandomGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RandomInputs} from \"../types/RandomTypes.sol\";\n\ncontract RandomGenerator {\n    constructor() {}\n\n    function getRandom(RandomInputs memory _inputs) external returns (uint256) {\n        return 10;\n    }\n}\n"
    },
    "contracts/messaging/dfk/types/PetTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nstruct PriceTier {\n    uint8 jewelCost;\n    uint16 goldCost;\n    uint8 tearCost;\n    uint32 incubationTime;\n    uint16 shinyChance;\n}\n\nstruct EggTypeCost {\n    address eggAddress;\n    address itemAddress1;\n    uint16 itemAmount1;\n    address itemAddress2;\n    uint16 itemAmount2;\n}\n\nstruct Pet {\n    uint256 id;\n    uint8 originId;\n    string name;\n    uint8 season;\n    uint8 eggType; // 0 = blue, 1 = grey, 2 = green, 3 = yellow, 4 = gold\n    uint8 rarity;\n    uint8 element;\n    uint8 bonusCount;\n    uint8 profBonus;\n    uint8 profBonusScalar;\n    uint8 craftBonus;\n    uint8 craftBonusScalar;\n    uint8 combatBonus;\n    uint8 combatBonusScalar;\n    uint16 appearance;\n    uint8 background;\n    uint8 shiny;\n    uint64 hungryAt;\n    uint64 equippableAt;\n    uint256 equippedTo;\n}\n\nstruct PetOptions {\n    uint8 originId;\n    string name;\n    uint8 season;\n    uint8 eggType;\n    uint8 rarity;\n    uint8 element;\n    uint8 bonusCount;\n    uint8 profBonus;\n    uint8 profBonusScalar;\n    uint8 craftBonus;\n    uint8 craftBonusScalar;\n    uint8 combatBonus;\n    uint8 combatBonusScalar;\n    uint16 appearance;\n    uint8 background;\n    uint8 shiny;\n}\n\nstruct UnhatchedEgg {\n    uint256 id;\n    uint256 petId;\n    address owner;\n    uint8 eggType;\n    uint256 seedblock;\n    uint256 finishTime;\n    uint8 tier; // 0 = Small, 1 = Medium, 2 = Large\n}\n\nstruct PetExchangeData {\n    uint256 id;\n    address owner;\n    uint256 petId1;\n    uint256 petId2;\n    uint256 seedblock;\n    uint256 finishTime;\n    PetExchangeStatus status;\n}\n\nenum PetExchangeStatus {\n    NONE,\n    STARTED,\n    COMPLETED\n}\n"
    },
    "contracts/messaging/dfk/IPetCoreUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Pet, PetOptions, UnhatchedEgg, PriceTier} from \"./types/PetTypes.sol\";\n\ninterface IPetCoreUpgradeable {\n    function getUserPets(address _address) external view returns (Pet[] memory);\n\n    function getPet(uint256 _id) external view returns (Pet memory);\n\n    function hatchPet(PetOptions memory _petOptions, address owner) external returns (uint256);\n\n    function updatePet(Pet memory _pet) external;\n\n    function bridgeMint(uint256 _id, address _to) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) external;\n\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function approve(address to, uint256 tokenId) external;\n}\n"
    },
    "contracts/messaging/dfk/inventory/IInventoryItem.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n"
    },
    "contracts/messaging/AuthVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts-4.5.0/access/Ownable.sol\";\n\ncontract AuthVerifier is Ownable {\n    address public nodegroup;\n\n    constructor(address _nodegroup) {\n        nodegroup = _nodegroup;\n    }\n\n    /**\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\n     * @param _authData A bytes32 address encoded via abi.encode(address)\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails.\n     */\n    function msgAuth(bytes calldata _authData) external view returns (bool authenticated) {\n        address caller = abi.decode(_authData, (address));\n        require(caller == nodegroup, \"Unauthenticated caller\");\n        return true;\n    }\n\n    /**\n     * @notice Permissioned method to support upgrades to the library\n     * @param _nodegroup address which has authentication to execute messages\n     */\n    function setNodeGroup(address _nodegroup) public onlyOwner {\n        nodegroup = _nodegroup;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 5000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}