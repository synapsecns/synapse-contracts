{
  "address": "0x9508BF380c1e6f751D97604732eF1Bae6673f299",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nodegroup",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_authData",
          "type": "bytes"
        }
      ],
      "name": "msgAuth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "authenticated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodegroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nodegroup",
          "type": "address"
        }
      ],
      "name": "setNodeGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc755418f491249b4ecaac73d3ae2fe3e1563613ae6505fcab7cda2ab59584027",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x9508BF380c1e6f751D97604732eF1Bae6673f299",
    "transactionIndex": 0,
    "gasUsed": "567509",
    "logsBloom": "0x
    "blockHash": "0x8b5d4d4a0b083bb42c1565527700d8da9664aa689ce95f15421697578c60373c",
    "transactionHash": "0xc755418f491249b4ecaac73d3ae2fe3e1563613ae6505fcab7cda2ab59584027",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 113451095,
        "transactionHash": "0xc755418f491249b4ecaac73d3ae2fe3e1563613ae6505fcab7cda2ab59584027",
        "address": "0x9508BF380c1e6f751D97604732eF1Bae6673f299",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8b5d4d4a0b083bb42c1565527700d8da9664aa689ce95f15421697578c60373c"
      }
    ],
    "blockNumber": 113451095,
    "cumulativeGasUsed": "567509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAA920f7b9039e556d2442113f1fd339e4927Dd9A"
  ],
  "solcInputHash": "a6d95b0f1ceb1c8465b78597b9aba83f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodegroup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_authData\",\"type\":\"bytes\"}],\"name\":\"msgAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authenticated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodegroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodegroup\",\"type\":\"address\"}],\"name\":\"setNodeGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"msgAuth(bytes)\":{\"params\":{\"_authData\":\"A bytes32 address encoded via abi.encode(address)\"},\"returns\":{\"authenticated\":\"returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNodeGroup(address)\":{\"params\":{\"_nodegroup\":\"address which has authentication to execute messages\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"msgAuth(bytes)\":{\"notice\":\"Authentication library to allow the validator network to execute cross-chain messages.\"},\"setNodeGroup(address)\":{\"notice\":\"Permissioned method to support upgrades to the library\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/AuthVerifier.sol\":\"AuthVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/AuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\ncontract AuthVerifier is Ownable {\\n    address public nodegroup;\\n\\n    constructor(address _nodegroup) {\\n        nodegroup = _nodegroup;\\n    }\\n\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails.\\n     */\\n    function msgAuth(bytes calldata _authData) external view returns (bool authenticated) {\\n        address caller = abi.decode(_authData, (address));\\n        require(caller == nodegroup, \\\"Unauthenticated caller\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) public onlyOwner {\\n        nodegroup = _nodegroup;\\n    }\\n}\\n\",\"keccak256\":\"0xef5f7ec563cbc8f8ffacf3a87b944818199ec7488df993b81e404dc56bc50854\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106ab3803806106ab83398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6105bf806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ee578063f2fde38b1461010c578063f6ea2c901461011f57600080fd5b80632ed1a13414610077578063715018a6146100c15780638b1b3a2d146100cb575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c9610132565b005b6100de6100d93660046104d1565b6101c4565b60405190151581526020016100b8565b60005473ffffffffffffffffffffffffffffffffffffffff16610097565b6100c961011a366004610565565b610264565b6100c961012d366004610565565b610394565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101c2600061045c565b565b6000806101d383850185610565565b60015490915073ffffffffffffffffffffffffffffffffffffffff80831691161461025a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f556e61757468656e746963617465642063616c6c65720000000000000000000060448201526064016101af565b5060019392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b73ffffffffffffffffffffffffffffffffffffffff8116610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101af565b6103918161045c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602083850312156104e457600080fd5b823567ffffffffffffffff808211156104fc57600080fd5b818501915085601f83011261051057600080fd5b81358181111561051f57600080fd5b86602082850101111561053157600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461039157600080fd5b60006020828403121561057757600080fd5b813561058281610543565b939250505056fea2646970667358221220944e5af0aa0cfa163d60d8bbe71267a6178d879f7f1fd3af45959b963b911fb764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100ee578063f2fde38b1461010c578063f6ea2c901461011f57600080fd5b80632ed1a13414610077578063715018a6146100c15780638b1b3a2d146100cb575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c9610132565b005b6100de6100d93660046104d1565b6101c4565b60405190151581526020016100b8565b60005473ffffffffffffffffffffffffffffffffffffffff16610097565b6100c961011a366004610565565b610264565b6100c961012d366004610565565b610394565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101c2600061045c565b565b6000806101d383850185610565565b60015490915073ffffffffffffffffffffffffffffffffffffffff80831691161461025a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f556e61757468656e746963617465642063616c6c65720000000000000000000060448201526064016101af565b5060019392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b73ffffffffffffffffffffffffffffffffffffffff8116610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101af565b6103918161045c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602083850312156104e457600080fd5b823567ffffffffffffffff808211156104fc57600080fd5b818501915085601f83011261051057600080fd5b81358181111561051f57600080fd5b86602082850101111561053157600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461039157600080fd5b60006020828403121561057757600080fd5b813561058281610543565b939250505056fea2646970667358221220944e5af0aa0cfa163d60d8bbe71267a6178d879f7f1fd3af45959b963b911fb764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "msgAuth(bytes)": {
        "params": {
          "_authData": "A bytes32 address encoded via abi.encode(address)"
        },
        "returns": {
          "authenticated": "returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNodeGroup(address)": {
        "params": {
          "_nodegroup": "address which has authentication to execute messages"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "msgAuth(bytes)": {
        "notice": "Authentication library to allow the validator network to execute cross-chain messages."
      },
      "setNodeGroup(address)": {
        "notice": "Permissioned method to support upgrades to the library"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/messaging/AuthVerifier.sol:AuthVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7257,
        "contract": "contracts/messaging/AuthVerifier.sol:AuthVerifier",
        "label": "nodegroup",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}