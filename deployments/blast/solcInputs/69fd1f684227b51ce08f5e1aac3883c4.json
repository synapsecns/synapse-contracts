{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSetUpgradeable.sol\";\nimport \"../utils/AddressUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using AddressUpgradeable for address;\n\n    struct RoleData {\n        EnumerableSetUpgradeable.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                _getChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    function _getChainId() private view returns (uint256 chainId) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5 <0.8.0;\n\nimport \"../token/ERC20/ERC20Upgradeable.sol\";\nimport \"./IERC20PermitUpgradeable.sol\";\nimport \"../cryptography/ECDSAUpgradeable.sol\";\nimport \"../utils/CountersUpgradeable.sol\";\nimport \"./EIP712Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _nonces[owner].current(),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../math/SafeMathUpgradeable.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary CountersUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/drafts/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) internal {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = _getChainId();\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\n        if (_getChainId() == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                _getChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    function _getChainId() private view returns (uint256 chainId) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/drafts/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5 <0.8.0;\n\nimport \"../token/ERC20/ERC20.sol\";\nimport \"./IERC20Permit.sol\";\nimport \"../cryptography/ECDSA.sol\";\nimport \"../utils/Counters.sol\";\nimport \"./EIP712.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping (address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) internal EIP712(name, \"1\") {\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _nonces[owner].current(),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
    },
    "@openzeppelin/contracts/drafts/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address master) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\n        return predictDeterministicAddress(master, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/amm/AaveSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./Swap.sol\";\n\n/**\n * @title AaveSwap - A StableSwap implementation in solidity, integrated with Aave.\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\n * Users can burn pool tokens and withdraw their share of token(s).\n *\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\n * distributed to the LPs.\n *\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\n * stops the ratio of the tokens in the pool from changing.\n * Users can always withdraw their tokens via multi-asset withdraws.\n *\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\n * deployment size.\n */\n\ncontract AaveSwap is Swap {\n    address internal AAVE_REWARDS;\n    address internal AAVE_LENDING_POOL;\n    address internal REWARD_TOKEN;\n    address internal REWARD_RECEIVER;\n    address[] internal AAVE_ASSETS;\n\n    /**\n     * @notice Initializes this Swap contract with the given parameters.\n     * This will also clone a LPToken contract that represents users'\n     * LP positions. The owner of LPToken will be this contract - which means\n     * only this contract is allowed to mint/burn tokens.\n     *\n     * @param _pooledTokens an array of ERC20s this pool will accept\n     * @param decimals the decimals to use for each pooled token,\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\n     * @param lpTokenName the long-form name of the token to be deployed\n     * @param lpTokenSymbol the short symbol for the token to be deployed\n     * @param _a the amplification coefficient * n * (n - 1). See the\n     * StableSwap paper for details\n     * @param _fee default swap fee to be initialized with\n     * @param _adminFee default adminFee to be initialized with\n     * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target\n     */\n    function initialize(\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address lpTokenTargetAddress\n    ) public virtual override initializer {\n        Swap.initialize(\n            _pooledTokens,\n            decimals,\n            lpTokenName,\n            lpTokenSymbol,\n            _a,\n            _fee,\n            _adminFee,\n            lpTokenTargetAddress\n        );\n        AAVE_REWARDS = 0x01D83Fe6A10D2f2B7AF17034343746188272cAc9;\n        AAVE_LENDING_POOL = 0x4F01AeD16D97E3aB5ab2B501154DC9bb0F1A5A2C;\n        REWARD_TOKEN = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n        AAVE_ASSETS = [0x53f7c5869a859F0AeC3D334ee8B4Cf01E3492f21];\n        REWARD_RECEIVER = msg.sender;\n    }\n\n    function setRewardReceiver(address _reward_receiver) external onlyOwner {\n        REWARD_RECEIVER = _reward_receiver;\n    }\n\n    function claimAaveRewards() external {\n        AAVE_REWARDS.call(\n            abi.encodeWithSignature(\n                \"claimRewards(address[],uint256,address)\",\n                AAVE_ASSETS,\n                type(uint256).max,\n                REWARD_RECEIVER\n            )\n        );\n    }\n}\n"
    },
    "contracts/amm/AaveSwapWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./Swap.sol\";\n\ninterface ILendingPool {\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n}\n\n/**\n * @title AaveSwapWrapper\n * @notice A wrapper contract for interacting with aTokens\n */\ncontract AaveSwapWrapper {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    mapping(uint8 => bool) private isUnderlyingIndex;\n\n    // constants\n    uint8 private constant MAX_UINT8 = 2**8 - 1;\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    // immutables\n    Swap public immutable SWAP;\n    LPToken public immutable LP_TOKEN;\n    address public immutable OWNER;\n    IERC20[] public POOLED_TOKENS;\n    IERC20[] public UNDERLYING_TOKENS;\n    ILendingPool public LENDING_POOL;\n\n    constructor(\n        Swap swap,\n        IERC20[] memory underlyingTokens,\n        address lendingPool,\n        address owner\n    ) public {\n        (, , , , , , LPToken lpToken) = swap.swapStorage();\n        for (uint8 i = 0; i < MAX_UINT8; i++) {\n            try swap.getToken(i) returns (IERC20 token) {\n                POOLED_TOKENS.push(token);\n                // Approve pooled tokens to be used by Swap\n                token.approve(address(swap), MAX_UINT256);\n            } catch {\n                break;\n            }\n        }\n\n        for (uint8 i = 0; i < POOLED_TOKENS.length; i++) {\n            if (POOLED_TOKENS[i] == underlyingTokens[i]) {\n                isUnderlyingIndex[i] = true;\n            } else {\n                isUnderlyingIndex[i] = false;\n                underlyingTokens[i].approve(lendingPool, MAX_UINT256);\n            }\n        }\n\n        // Set immutable variables\n        SWAP = swap;\n        LP_TOKEN = lpToken;\n        OWNER = owner;\n        UNDERLYING_TOKENS = underlyingTokens;\n        LENDING_POOL = ILendingPool(lendingPool);\n\n        // Approve LPToken to be used by Swap\n        lpToken.approve(address(swap), MAX_UINT256);\n    }\n\n    /**\n     * @notice Add liquidity to the pool with the given amounts of tokens.\n     * @param amounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of LP token user minted and received\n     */\n    function addLiquidity(\n        uint256[] memory amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256) {\n        // Go through amounts array and transfer respective tokens to this contract.\n        for (uint8 i = 0; i < amounts.length; i++) {\n            uint256 amount = amounts[i];\n            if (amount > 0) {\n                UNDERLYING_TOKENS[i].safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    amount\n                );\n                if (isUnderlyingIndex[i] == false) {\n                    LENDING_POOL.deposit(\n                        address(UNDERLYING_TOKENS[i]),\n                        amount,\n                        address(this),\n                        0\n                    );\n                }\n            }\n        }\n\n        // Add the assets to the pool\n        uint256 lpTokenAmount = SWAP.addLiquidity(amounts, minToMint, deadline);\n        // Send the LPToken to msg.sender\n        IERC20(address(LP_TOKEN)).safeTransfer(msg.sender, lpTokenAmount);\n        return lpTokenAmount;\n    }\n\n    /**\n     * @notice Burn LP tokens to remove liquidity from the pool.\n     * @dev Liquidity can always be removed, even when the pool is paused. Caller\n     * will receive ETH instead of WETH9.\n     * @param amount the amount of LP tokens to burn\n     * @param minAmounts the minimum amounts of each token in the pool\n     *        acceptable for this burn. Useful as a front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amounts of tokens user received\n     */\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory) {\n        // Transfer LPToken from msg.sender to this contract.\n        IERC20(address(LP_TOKEN)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Remove liquidity\n        uint256[] memory amounts = SWAP.removeLiquidity(\n            amount,\n            minAmounts,\n            deadline\n        );\n        // Send the tokens back to the user\n        for (uint8 i = 0; i < amounts.length; i++) {\n            if (isUnderlyingIndex[i] == true) {\n                UNDERLYING_TOKENS[i].safeTransfer(msg.sender, amounts[i]);\n            } else {\n                LENDING_POOL.withdraw(\n                    address(UNDERLYING_TOKENS[i]),\n                    amounts[i],\n                    msg.sender\n                );\n                // underlyingTokens[i].safeTransfer(msg.sender, amounts[i]);\n            }\n        }\n        return amounts;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool all in one token.\n     * @dev Caller will receive ETH instead of WETH9.\n     * @param tokenAmount the amount of the token you want to receive\n     * @param tokenIndex the index of the token you want to receive\n     * @param minAmount the minimum amount to withdraw, otherwise revert\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of chosen token user received\n     */\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256) {\n        // Transfer LPToken from msg.sender to this contract.\n        IERC20(address(LP_TOKEN)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            tokenAmount\n        );\n        // Withdraw via single token\n        uint256 amount = SWAP.removeLiquidityOneToken(\n            tokenAmount,\n            tokenIndex,\n            minAmount,\n            deadline\n        );\n        // Transfer the token to msg.sender accordingly\n        if (isUnderlyingIndex[tokenIndex] == true) {\n            UNDERLYING_TOKENS[tokenIndex].safeTransfer(msg.sender, amount);\n        } else {\n            LENDING_POOL.withdraw(\n                address(UNDERLYING_TOKENS[tokenIndex]),\n                amount,\n                msg.sender\n            );\n        }\n        return amount;\n    }\n\n    /**\n     * @notice Swap two tokens using the underlying pool. If tokenIndexFrom\n     * represents WETH9 in the pool, the caller must set msg.value equal to dx.\n     * If the user is swapping to WETH9 in the pool, the user will receive ETH instead.\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256) {\n        // Transfer tokens from msg.sender to this contract\n        UNDERLYING_TOKENS[tokenIndexFrom].safeTransferFrom(\n            msg.sender,\n            address(this),\n            dx\n        );\n        if (isUnderlyingIndex[tokenIndexFrom] == false) {\n            LENDING_POOL.deposit(\n                address(UNDERLYING_TOKENS[tokenIndexFrom]),\n                dx,\n                address(this),\n                0\n            );\n        }\n        // Execute swap\n        uint256 dy = SWAP.swap(\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            minDy,\n            deadline\n        );\n        // Transfer the swapped tokens to msg.sender\n        if (isUnderlyingIndex[tokenIndexTo] == false) {\n            LENDING_POOL.withdraw(\n                address(UNDERLYING_TOKENS[tokenIndexTo]),\n                dy,\n                msg.sender\n            );\n        } else {\n            UNDERLYING_TOKENS[tokenIndexTo].safeTransfer(msg.sender, dy);\n        }\n        return dy;\n    }\n\n    /**\n     * @notice Rescues any of the ETH, the pooled tokens, or the LPToken that may be stuck\n     * in this contract. Only the OWNER can call this function.\n     */\n    function rescue() external {\n        require(msg.sender == OWNER, \"CALLED_BY_NON_OWNER\");\n        IERC20[] memory tokens = POOLED_TOKENS;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            tokens[i].safeTransfer(\n                msg.sender,\n                tokens[i].balanceOf(address(this))\n            );\n        }\n\n        for (uint256 i = 0; i < UNDERLYING_TOKENS.length; i++) {\n            UNDERLYING_TOKENS[i].safeTransfer(\n                msg.sender,\n                UNDERLYING_TOKENS[i].balanceOf(address(this))\n            );\n        }\n\n        IERC20 lpToken_ = IERC20(address(LP_TOKEN));\n        lpToken_.safeTransfer(msg.sender, lpToken_.balanceOf(address(this)));\n    }\n\n    // VIEW FUNCTIONS\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        return SWAP.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return token amount the user will receive\n     */\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256)\n    {\n        return SWAP.calculateTokenAmount(amounts, deposit);\n    }\n\n    /**\n     * @notice A simple method to calculate amount of each underlying\n     * tokens that is returned upon burning given amount of LP tokens\n     * @param amount the amount of LP tokens that would be burned on withdrawal\n     * @return array of token balances that the user will receive\n     */\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return SWAP.calculateRemoveLiquidity(amount);\n    }\n\n    /**\n     * @notice Calculate the amount of underlying token available to withdraw\n     * when withdrawing via only single token\n     * @param tokenAmount the amount of LP token to burn\n     * @param tokenIndex index of which token will be withdrawn\n     * @return availableTokenAmount calculated amount of underlying token\n     * available to withdraw\n     */\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount) {\n        return SWAP.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\n    }\n\n    /**\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\n     * @param index the index of the token\n     * @return address of the token at given index\n     */\n    function getToken(uint8 index) public view virtual returns (IERC20) {\n        if (index < UNDERLYING_TOKENS.length) {\n            return UNDERLYING_TOKENS[index];\n        } else {\n            revert();\n        }\n    }\n}\n"
    },
    "contracts/amm/AmplificationUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./SwapUtils.sol\";\n\n/**\n * @title AmplificationUtils library\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\n * This library assumes the struct is fully validated.\n */\nlibrary AmplificationUtils {\n    using SafeMath for uint256;\n\n    event RampA(\n        uint256 oldA,\n        uint256 newA,\n        uint256 initialTime,\n        uint256 futureTime\n    );\n    event StopRampA(uint256 currentA, uint256 time);\n\n    // Constant values used in ramping A calculations\n    uint256 public constant A_PRECISION = 100;\n    uint256 public constant MAX_A = 10**6;\n    uint256 private constant MAX_A_CHANGE = 2;\n    uint256 private constant MIN_RAMP_TIME = 7 days;\n\n    /**\n     * @notice Return A, the amplification coefficient * n * (n - 1)\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter\n     */\n    function getA(SwapUtils.Swap storage self) external view returns (uint256) {\n        return _getAPrecise(self).div(A_PRECISION);\n    }\n\n    /**\n     * @notice Return A in its raw precision\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter in its raw precision form\n     */\n    function getAPrecise(SwapUtils.Swap storage self)\n        external\n        view\n        returns (uint256)\n    {\n        return _getAPrecise(self);\n    }\n\n    /**\n     * @notice Return A in its raw precision\n     * @dev See the StableSwap paper for details\n     * @param self Swap struct to read from\n     * @return A parameter in its raw precision form\n     */\n    function _getAPrecise(SwapUtils.Swap storage self)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 t1 = self.futureATime; // time when ramp is finished\n        uint256 a1 = self.futureA; // final A value when ramp is finished\n\n        if (block.timestamp < t1) {\n            uint256 t0 = self.initialATime; // time when ramp is started\n            uint256 a0 = self.initialA; // initial A value when ramp is started\n            if (a1 > a0) {\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\n                return\n                    a0.add(\n                        a1.sub(a0).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\n                    );\n            } else {\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\n                return\n                    a0.sub(\n                        a0.sub(a1).mul(block.timestamp.sub(t0)).div(t1.sub(t0))\n                    );\n            }\n        } else {\n            return a1;\n        }\n    }\n\n    /**\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\n     * the limit range.\n     * @param self Swap struct to update\n     * @param futureA_ the new A to ramp towards\n     * @param futureTime_ timestamp when the new A should be reached\n     */\n    function rampA(\n        SwapUtils.Swap storage self,\n        uint256 futureA_,\n        uint256 futureTime_\n    ) external {\n        require(\n            block.timestamp >= self.initialATime.add(1 days),\n            \"Wait 1 day before starting ramp\"\n        );\n        require(\n            futureTime_ >= block.timestamp.add(MIN_RAMP_TIME),\n            \"Insufficient ramp time\"\n        );\n        require(\n            futureA_ > 0 && futureA_ < MAX_A,\n            \"futureA_ must be > 0 and < MAX_A\"\n        );\n\n        uint256 initialAPrecise = _getAPrecise(self);\n        uint256 futureAPrecise = futureA_.mul(A_PRECISION);\n\n        if (futureAPrecise < initialAPrecise) {\n            require(\n                futureAPrecise.mul(MAX_A_CHANGE) >= initialAPrecise,\n                \"futureA_ is too small\"\n            );\n        } else {\n            require(\n                futureAPrecise <= initialAPrecise.mul(MAX_A_CHANGE),\n                \"futureA_ is too large\"\n            );\n        }\n\n        self.initialA = initialAPrecise;\n        self.futureA = futureAPrecise;\n        self.initialATime = block.timestamp;\n        self.futureATime = futureTime_;\n\n        emit RampA(\n            initialAPrecise,\n            futureAPrecise,\n            block.timestamp,\n            futureTime_\n        );\n    }\n\n    /**\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\n     * cannot be called for another 24 hours\n     * @param self Swap struct to update\n     */\n    function stopRampA(SwapUtils.Swap storage self) external {\n        require(self.futureATime > block.timestamp, \"Ramp is already stopped\");\n\n        uint256 currentA = _getAPrecise(self);\n        self.initialA = currentA;\n        self.futureA = currentA;\n        self.initialATime = block.timestamp;\n        self.futureATime = block.timestamp;\n\n        emit StopRampA(currentA, block.timestamp);\n    }\n}\n"
    },
    "contracts/amm/helper/BaseSwapDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract BaseSwapDeposit is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    ISwap public baseSwap;\n    IERC20[] public baseTokens;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor(ISwap _baseSwap) public {\n        baseSwap = _baseSwap;\n           // Check and approve base level tokens to be deposited to the base Swap contract\n        {\n            uint8 i;\n            for (; i < 32; i++) {\n                try _baseSwap.getToken(i) returns (IERC20 token) {\n                    baseTokens.push(token);\n                    token.safeApprove(address(_baseSwap), MAX_UINT256);\n                } catch {\n                    break;\n                }\n            }\n            require(i > 1, \"baseSwap must have at least 2 tokens\");\n        }\n    }\n\n    // Mutative functions\n\n    /**\n     * @notice Swap two underlying tokens using the meta pool and the base pool\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant returns (uint256) {\n        baseTokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        uint256 tokenToAmount =\n            baseSwap.swap(\n                tokenIndexFrom,\n                tokenIndexTo,\n                dx,\n                minDy,\n                deadline\n            );\n        baseTokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\n        return tokenToAmount;\n    }\n\n     /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256) {\n        return\n            baseSwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n        /**\n     * @notice Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range.\n     * @param index the index of the token\n     * @return address of the token at given index\n     */\n    function getToken(uint256 index) external view returns (IERC20) {\n        require(index < baseTokens.length, \"index out of range\");\n        return baseTokens[index];\n    }\n\n}"
    },
    "contracts/amm/helper/FlashLoanBorrowerExample.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/IFlashLoanReceiver.sol\";\nimport \"../interfaces/ISwapFlashLoan.sol\";\nimport \"hardhat/console.sol\";\n\ncontract FlashLoanBorrowerExample is IFlashLoanReceiver {\n    using SafeMath for uint256;\n\n    // Typical executeOperation function should do the 3 following actions\n    // 1. Check if the flashLoan was successful\n    // 2. Do actions with the borrowed tokens\n    // 3. Repay the debt to the `pool`\n    function executeOperation(\n        address pool,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata params\n    ) external override {\n        // 1. Check if the flashLoan was valid\n        require(\n            IERC20(token).balanceOf(address(this)) >= amount,\n            \"flashloan is broken?\"\n        );\n\n        // 2. Do actions with the borrowed token\n        bytes32 paramsHash = keccak256(params);\n        if (paramsHash == keccak256(bytes(\"dontRepayDebt\"))) {\n            return;\n        } else if (paramsHash == keccak256(bytes(\"reentrancy_addLiquidity\"))) {\n            ISwapFlashLoan(pool).addLiquidity(\n                new uint256[](0),\n                0,\n                block.timestamp\n            );\n        } else if (paramsHash == keccak256(bytes(\"reentrancy_swap\"))) {\n            ISwapFlashLoan(pool).swap(1, 0, 1e6, 0, now);\n        } else if (\n            paramsHash == keccak256(bytes(\"reentrancy_removeLiquidity\"))\n        ) {\n            ISwapFlashLoan(pool).removeLiquidity(1e18, new uint256[](0), now);\n        } else if (\n            paramsHash == keccak256(bytes(\"reentrancy_removeLiquidityOneToken\"))\n        ) {\n            ISwapFlashLoan(pool).removeLiquidityOneToken(1e18, 0, 1e18, now);\n        }\n\n        // 3. Payback debt\n        uint256 totalDebt = amount.add(fee);\n        IERC20(token).transfer(pool, totalDebt);\n    }\n\n    function flashLoan(\n        ISwapFlashLoan swap,\n        IERC20 token,\n        uint256 amount,\n        bytes memory params\n    ) external {\n        swap.flashLoan(address(this), token, amount, params);\n    }\n}\n"
    },
    "contracts/amm/helper/GenericERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Generic ERC20 token\n * @notice This contract simulates a generic ERC20 token that is mintable and burnable.\n */\ncontract GenericERC20 is ERC20, Ownable {\n    /**\n     * @notice Deploy this contract with given name, symbol, and decimals\n     * @dev the caller of this constructor will become the owner of this contract\n     * @param name_ name of this token\n     * @param symbol_ symbol of this token\n     * @param decimals_ number of decimals this token will be based on\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public ERC20(name_, symbol_) {\n        _setupDecimals(decimals_);\n    }\n\n    /**\n     * @notice Mints given amount of tokens to recipient\n     * @dev only owner can call this mint function\n     * @param recipient address of account to receive the tokens\n     * @param amount amount of tokens to mint\n     */\n    function mint(address recipient, uint256 amount) external onlyOwner {\n        require(amount != 0, \"amount == 0\");\n        _mint(recipient, amount);\n    }\n}\n"
    },
    "contracts/amm/helper/test/TestMathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"../../MathUtils.sol\";\n\ncontract TestMathUtils {\n    using MathUtils for uint256;\n\n    function difference(uint256 a, uint256 b) public pure returns (uint256) {\n        return a.difference(b);\n    }\n\n    function within1(uint256 a, uint256 b) public pure returns (bool) {\n        return a.within1(b);\n    }\n}\n"
    },
    "contracts/amm/helper/test/TestSwapReturnValues.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"../../interfaces/ISwap.sol\";\nimport \"hardhat/console.sol\";\n\ncontract TestSwapReturnValues {\n    using SafeMath for uint256;\n\n    ISwap public swap;\n    IERC20 public lpToken;\n    uint8 public n;\n\n    uint256 public constant MAX_INT = 2**256 - 1;\n\n    constructor(\n        ISwap swapContract,\n        IERC20 lpTokenContract,\n        uint8 numOfTokens\n    ) public {\n        swap = swapContract;\n        lpToken = lpTokenContract;\n        n = numOfTokens;\n\n        // Pre-approve tokens\n        for (uint8 i; i < n; i++) {\n            swap.getToken(i).approve(address(swap), MAX_INT);\n        }\n        lpToken.approve(address(swap), MAX_INT);\n    }\n\n    function test_swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) public {\n        uint256 balanceBefore =\n            swap.getToken(tokenIndexTo).balanceOf(address(this));\n        uint256 returnValue =\n            swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, block.timestamp);\n        uint256 balanceAfter =\n            swap.getToken(tokenIndexTo).balanceOf(address(this));\n\n        console.log(\n            \"swap: Expected %s, got %s\",\n            balanceAfter.sub(balanceBefore),\n            returnValue\n        );\n\n        require(\n            returnValue == balanceAfter.sub(balanceBefore),\n            \"swap()'s return value does not match received amount\"\n        );\n    }\n\n    function test_addLiquidity(uint256[] calldata amounts, uint256 minToMint)\n        public\n    {\n        uint256 balanceBefore = lpToken.balanceOf(address(this));\n        uint256 returnValue = swap.addLiquidity(amounts, minToMint, MAX_INT);\n        uint256 balanceAfter = lpToken.balanceOf(address(this));\n\n        console.log(\n            \"addLiquidity: Expected %s, got %s\",\n            balanceAfter.sub(balanceBefore),\n            returnValue\n        );\n\n        require(\n            returnValue == balanceAfter.sub(balanceBefore),\n            \"addLiquidity()'s return value does not match minted amount\"\n        );\n    }\n\n    function test_removeLiquidity(uint256 amount, uint256[] memory minAmounts)\n        public\n    {\n        uint256[] memory balanceBefore = new uint256[](n);\n        uint256[] memory balanceAfter = new uint256[](n);\n\n        for (uint8 i = 0; i < n; i++) {\n            balanceBefore[i] = swap.getToken(i).balanceOf(address(this));\n        }\n\n        uint256[] memory returnValue =\n            swap.removeLiquidity(amount, minAmounts, MAX_INT);\n\n        for (uint8 i = 0; i < n; i++) {\n            balanceAfter[i] = swap.getToken(i).balanceOf(address(this));\n            console.log(\n                \"removeLiquidity: Expected %s, got %s\",\n                balanceAfter[i].sub(balanceBefore[i]),\n                returnValue[i]\n            );\n            require(\n                balanceAfter[i].sub(balanceBefore[i]) == returnValue[i],\n                \"removeLiquidity()'s return value does not match received amounts of tokens\"\n            );\n        }\n    }\n\n    function test_removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount\n    ) public {\n        uint256 balanceBefore = lpToken.balanceOf(address(this));\n        uint256 returnValue =\n            swap.removeLiquidityImbalance(amounts, maxBurnAmount, MAX_INT);\n        uint256 balanceAfter = lpToken.balanceOf(address(this));\n\n        console.log(\n            \"removeLiquidityImbalance: Expected %s, got %s\",\n            balanceBefore.sub(balanceAfter),\n            returnValue\n        );\n\n        require(\n            returnValue == balanceBefore.sub(balanceAfter),\n            \"removeLiquidityImbalance()'s return value does not match burned lpToken amount\"\n        );\n    }\n\n    function test_removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount\n    ) public {\n        uint256 balanceBefore =\n            swap.getToken(tokenIndex).balanceOf(address(this));\n        uint256 returnValue =\n            swap.removeLiquidityOneToken(\n                tokenAmount,\n                tokenIndex,\n                minAmount,\n                MAX_INT\n            );\n        uint256 balanceAfter =\n            swap.getToken(tokenIndex).balanceOf(address(this));\n\n        console.log(\n            \"removeLiquidityOneToken: Expected %s, got %s\",\n            balanceAfter.sub(balanceBefore),\n            returnValue\n        );\n\n        require(\n            returnValue == balanceAfter.sub(balanceBefore),\n            \"removeLiquidityOneToken()'s return value does not match received token amount\"\n        );\n    }\n}\n"
    },
    "contracts/amm/interfaces/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity 0.6.12;\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Nerve fee IFlashLoanReceiver. Modified from Aave's IFlashLoanReceiver interface.\n * https://github.com/aave/aave-protocol/blob/4b4545fb583fd4f400507b10f3c3114f45b8a037/contracts/flashloan/interfaces/IFlashLoanReceiver.sol\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        address pool,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata params\n    ) external;\n}\n"
    },
    "contracts/amm/interfaces/IMetaSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface IMetaSwap {\n    // pool data view functions\n    function getA() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function isGuarded() external view returns (bool);\n\n    // min return calculation functions\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount);\n\n    // state modifying functions\n    function initializeMetaSwap(\n        IERC20[] memory pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 a,\n        uint256 fee,\n        uint256 adminFee,\n        address lpTokenTargetAddress,\n        address baseSwap\n    ) external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function swapStorage()\n        external\n        view\n        returns (\n            uint256 initialA,\n            uint256 futureA,\n            uint256 initialATime,\n            uint256 futureATime,\n            uint256 swapFee,\n            uint256 adminFee,\n            address lpToken\n        );\n}\n"
    },
    "contracts/amm/interfaces/IMetaSwapDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./ISwap.sol\";\nimport \"./IMetaSwap.sol\";\n\ninterface IMetaSwapDeposit {\n    function initialize(\n        ISwap baseSwap_,\n        IMetaSwap metaSwap_,\n        IERC20 metaLPToken_\n    ) external;\n}\n"
    },
    "contracts/amm/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface ISwap {\n    // pool data view functions\n    function getA() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    // min return calculation functions\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount);\n\n    // state modifying functions\n    function initialize(\n        IERC20[] memory pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 a,\n        uint256 fee,\n        uint256 adminFee,\n        address lpTokenTargetAddress\n    ) external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n}\n"
    },
    "contracts/amm/interfaces/ISwapFlashLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./ISwap.sol\";\n\ninterface ISwapFlashLoan is ISwap {\n    function flashLoan(\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes memory params\n    ) external;\n}\n"
    },
    "contracts/amm/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\ninterface IWETH9 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    receive() external payable;\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n}\n"
    },
    "contracts/amm/LPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/ISwap.sol\";\n\n/**\n * @title Liquidity Provider Token\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\n * It is used to represent user's shares when providing liquidity to swap contracts.\n * @dev Only Swap contracts should initialize and own LPToken contracts.\n */\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @notice Initializes this LPToken contract with the given name and symbol\n     * @dev The caller of this function will become the owner. A Swap contract should call this\n     * in its initializer function.\n     * @param name name of this token\n     * @param symbol symbol of this token\n     */\n    function initialize(string memory name, string memory symbol)\n        external\n        initializer\n        returns (bool)\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __Ownable_init_unchained();\n        return true;\n    }\n\n    /**\n     * @notice Mints the given amount of LPToken to the recipient.\n     * @dev only owner can call this mint function\n     * @param recipient address of account to receive the tokens\n     * @param amount amount of tokens to mint\n     */\n    function mint(address recipient, uint256 amount) external onlyOwner {\n        require(amount != 0, \"LPToken: cannot mint 0\");\n        _mint(recipient, amount);\n    }\n\n    /**\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n     * minting and burning. * This assumes the owner is set to a Swap contract's address.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20Upgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n        require(to != address(this), \"LPToken: cannot send to itself\");\n    }\n}\n"
    },
    "contracts/amm/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title MathUtils library\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\n * differences between two uint256.\n */\nlibrary MathUtils {\n    /**\n     * @notice Compares a and b and returns true if the difference between a and b\n     *         is less than 1 or equal to each other.\n     * @param a uint256 to compare with\n     * @param b uint256 to compare with\n     * @return True if the difference between a and b is less than 1 or equal,\n     *         otherwise return false\n     */\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\n        return (difference(a, b) <= 1);\n    }\n\n    /**\n     * @notice Calculates absolute difference between a and b\n     * @param a uint256 to compare with\n     * @param b uint256 to compare with\n     * @return Difference between a and b\n     */\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return a - b;\n        }\n        return b - a;\n    }\n}\n"
    },
    "contracts/amm/OwnerPausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\n\n/**\n * @title OwnerPausable\n * @notice An ownable contract allows the owner to pause and unpause the\n * contract without a delay.\n * @dev Only methods using the provided modifiers will be paused.\n */\nabstract contract OwnerPausableUpgradeable is\n    OwnableUpgradeable,\n    PausableUpgradeable\n{\n    function __OwnerPausable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    /**\n     * @notice Pause the contract. Revert if already paused.\n     */\n    function pause() external onlyOwner {\n        PausableUpgradeable._pause();\n    }\n\n    /**\n     * @notice Unpause the contract. Revert if already unpaused.\n     */\n    function unpause() external onlyOwner {\n        PausableUpgradeable._unpause();\n    }\n}\n"
    },
    "contracts/amm/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./OwnerPausableUpgradeable.sol\";\nimport \"./SwapUtils.sol\";\nimport \"./AmplificationUtils.sol\";\n\n/**\n * @title Swap - A StableSwap implementation in solidity.\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\n * Users can burn pool tokens and withdraw their share of token(s).\n *\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\n * distributed to the LPs.\n *\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\n * stops the ratio of the tokens in the pool from changing.\n * Users can always withdraw their tokens via multi-asset withdraws.\n *\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\n * deployment size.\n */\ncontract Swap is OwnerPausableUpgradeable, ReentrancyGuardUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using SwapUtils for SwapUtils.Swap;\n    using AmplificationUtils for SwapUtils.Swap;\n\n    // Struct storing data responsible for automatic market maker functionalities. In order to\n    // access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol\n    SwapUtils.Swap public swapStorage;\n\n    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\n    // getTokenIndex function also relies on this mapping to retrieve token index.\n    mapping(address => uint8) private tokenIndexes;\n\n    /*** EVENTS ***/\n\n    // events replicated from SwapUtils to make the ABI easier for dumb\n    // clients\n    event TokenSwap(\n        address indexed buyer,\n        uint256 tokensSold,\n        uint256 tokensBought,\n        uint128 soldId,\n        uint128 boughtId\n    );\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 lpTokenSupply\n    );\n    event RemoveLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256 lpTokenSupply\n    );\n    event RemoveLiquidityOne(\n        address indexed provider,\n        uint256 lpTokenAmount,\n        uint256 lpTokenSupply,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 lpTokenSupply\n    );\n    event NewAdminFee(uint256 newAdminFee);\n    event NewSwapFee(uint256 newSwapFee);\n    event RampA(\n        uint256 oldA,\n        uint256 newA,\n        uint256 initialTime,\n        uint256 futureTime\n    );\n    event StopRampA(uint256 currentA, uint256 time);\n\n    /**\n     * @notice Initializes this Swap contract with the given parameters.\n     * This will also clone a LPToken contract that represents users'\n     * LP positions. The owner of LPToken will be this contract - which means\n     * only this contract is allowed to mint/burn tokens.\n     *\n     * @param _pooledTokens an array of ERC20s this pool will accept\n     * @param decimals the decimals to use for each pooled token,\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\n     * @param lpTokenName the long-form name of the token to be deployed\n     * @param lpTokenSymbol the short symbol for the token to be deployed\n     * @param _a the amplification coefficient * n * (n - 1). See the\n     * StableSwap paper for details\n     * @param _fee default swap fee to be initialized with\n     * @param _adminFee default adminFee to be initialized with\n     * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target\n     */\n    function initialize(\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address lpTokenTargetAddress\n    ) public virtual initializer {\n        __OwnerPausable_init();\n        __ReentrancyGuard_init();\n        // Check _pooledTokens and precisions parameter\n        require(_pooledTokens.length > 1, \"_pooledTokens.length <= 1\");\n        require(_pooledTokens.length <= 32, \"_pooledTokens.length > 32\");\n        require(\n            _pooledTokens.length == decimals.length,\n            \"_pooledTokens decimals mismatch\"\n        );\n\n        uint256[] memory precisionMultipliers = new uint256[](decimals.length);\n\n        for (uint8 i = 0; i < _pooledTokens.length; i++) {\n            if (i > 0) {\n                // Check if index is already used. Check if 0th element is a duplicate.\n                require(\n                    tokenIndexes[address(_pooledTokens[i])] == 0 &&\n                        _pooledTokens[0] != _pooledTokens[i],\n                    \"Duplicate tokens\"\n                );\n            }\n            require(\n                address(_pooledTokens[i]) != address(0),\n                \"The 0 address isn't an ERC-20\"\n            );\n            require(\n                decimals[i] <= SwapUtils.POOL_PRECISION_DECIMALS,\n                \"Token decimals exceeds max\"\n            );\n            precisionMultipliers[i] =\n                10 **\n                    uint256(SwapUtils.POOL_PRECISION_DECIMALS).sub(\n                        uint256(decimals[i])\n                    );\n            tokenIndexes[address(_pooledTokens[i])] = i;\n        }\n\n        // Check _a, _fee, _adminFee parameters\n        require(_a < AmplificationUtils.MAX_A, \"_a exceeds maximum\");\n        require(_fee < SwapUtils.MAX_SWAP_FEE, \"_fee exceeds maximum\");\n        require(\n            _adminFee < SwapUtils.MAX_ADMIN_FEE,\n            \"_adminFee exceeds maximum\"\n        );\n\n        // Clone and initialize a LPToken contract\n        LPToken lpToken = LPToken(Clones.clone(lpTokenTargetAddress));\n        require(\n            lpToken.initialize(lpTokenName, lpTokenSymbol),\n            \"could not init lpToken clone\"\n        );\n\n        // Initialize swapStorage struct\n        swapStorage.lpToken = lpToken;\n        swapStorage.pooledTokens = _pooledTokens;\n        swapStorage.tokenPrecisionMultipliers = precisionMultipliers;\n        swapStorage.balances = new uint256[](_pooledTokens.length);\n        swapStorage.initialA = _a.mul(AmplificationUtils.A_PRECISION);\n        swapStorage.futureA = _a.mul(AmplificationUtils.A_PRECISION);\n        // swapStorage.initialATime = 0;\n        // swapStorage.futureATime = 0;\n        swapStorage.swapFee = _fee;\n        swapStorage.adminFee = _adminFee;\n    }\n\n    /*** MODIFIERS ***/\n\n    /**\n     * @notice Modifier to check deadline against current timestamp\n     * @param deadline latest timestamp to accept this transaction\n     */\n    modifier deadlineCheck(uint256 deadline) {\n        require(block.timestamp <= deadline, \"Deadline not met\");\n        _;\n    }\n\n    /*** VIEW FUNCTIONS ***/\n\n    /**\n     * @notice Return A, the amplification coefficient * n * (n - 1)\n     * @dev See the StableSwap paper for details\n     * @return A parameter\n     */\n    function getA() external view virtual returns (uint256) {\n        return swapStorage.getA();\n    }\n\n    /**\n     * @notice Return A in its raw precision form\n     * @dev See the StableSwap paper for details\n     * @return A parameter in its raw precision form\n     */\n    function getAPrecise() external view virtual returns (uint256) {\n        return swapStorage.getAPrecise();\n    }\n\n    /**\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\n     * @param index the index of the token\n     * @return address of the token at given index\n     */\n    function getToken(uint8 index) public view virtual returns (IERC20) {\n        require(index < swapStorage.pooledTokens.length, \"Out of range\");\n        return swapStorage.pooledTokens[index];\n    }\n\n    /**\n     * @notice Return the index of the given token address. Reverts if no matching\n     * token is found.\n     * @param tokenAddress address of the token\n     * @return the index of the given token address\n     */\n    function getTokenIndex(address tokenAddress)\n        public\n        view\n        virtual\n        returns (uint8)\n    {\n        uint8 index = tokenIndexes[tokenAddress];\n        require(\n            address(getToken(index)) == tokenAddress,\n            \"Token does not exist\"\n        );\n        return index;\n    }\n\n    /**\n     * @notice Return current balance of the pooled token at given index\n     * @param index the index of the token\n     * @return current balance of the pooled token at given index with token's native precision\n     */\n    function getTokenBalance(uint8 index)\n        external\n        view\n        virtual\n        returns (uint256)\n    {\n        require(index < swapStorage.pooledTokens.length, \"Index out of range\");\n        return swapStorage.balances[index];\n    }\n\n    /**\n     * @notice Get the virtual price, to help calculate profit\n     * @return the virtual price, scaled to the POOL_PRECISION_DECIMALS\n     */\n    function getVirtualPrice() external view virtual returns (uint256) {\n        return swapStorage.getVirtualPrice();\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        return swapStorage.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return token amount the user will receive\n     */\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        virtual\n        returns (uint256)\n    {\n        return swapStorage.calculateTokenAmount(amounts, deposit);\n    }\n\n    /**\n     * @notice A simple method to calculate amount of each underlying\n     * tokens that is returned upon burning given amount of LP tokens\n     * @param amount the amount of LP tokens that would be burned on withdrawal\n     * @return array of token balances that the user will receive\n     */\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        virtual\n        returns (uint256[] memory)\n    {\n        return swapStorage.calculateRemoveLiquidity(amount);\n    }\n\n    /**\n     * @notice Calculate the amount of underlying token available to withdraw\n     * when withdrawing via only single token\n     * @param tokenAmount the amount of LP token to burn\n     * @param tokenIndex index of which token will be withdrawn\n     * @return availableTokenAmount calculated amount of underlying token\n     * available to withdraw\n     */\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view virtual returns (uint256 availableTokenAmount) {\n        return swapStorage.calculateWithdrawOneToken(tokenAmount, tokenIndex);\n    }\n\n    /**\n     * @notice This function reads the accumulated amount of admin fees of the token with given index\n     * @param index Index of the pooled token\n     * @return admin's token balance in the token's precision\n     */\n    function getAdminBalance(uint256 index)\n        external\n        view\n        virtual\n        returns (uint256)\n    {\n        return swapStorage.getAdminBalance(index);\n    }\n\n    /*** STATE MODIFYING FUNCTIONS ***/\n\n    /**\n     * @notice Swap two tokens using this pool\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return swapStorage.swap(tokenIndexFrom, tokenIndexTo, dx, minDy);\n    }\n\n    /**\n     * @notice Add liquidity to the pool with the given amounts of tokens\n     * @param amounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of LP token user minted and received\n     */\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return swapStorage.addLiquidity(amounts, minToMint);\n    }\n\n    /**\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\n     * over period of 4 weeks since last deposit will apply.\n     * @dev Liquidity can always be removed, even when the pool is paused.\n     * @param amount the amount of LP tokens to burn\n     * @param minAmounts the minimum amounts of each token in the pool\n     *        acceptable for this burn. Useful as a front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amounts of tokens user received\n     */\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        deadlineCheck(deadline)\n        returns (uint256[] memory)\n    {\n        return swapStorage.removeLiquidity(amount, minAmounts);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\n     * over period of 4 weeks since last deposit will apply.\n     * @param tokenAmount the amount of the token you want to receive\n     * @param tokenIndex the index of the token you want to receive\n     * @param minAmount the minimum amount to withdraw, otherwise revert\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of chosen token user received\n     */\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return\n            swapStorage.removeLiquidityOneToken(\n                tokenAmount,\n                tokenIndex,\n                minAmount\n            );\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, weighted differently than the\n     * pool's current balances. Withdraw fee that decays linearly\n     * over period of 4 weeks since last deposit will apply.\n     * @param amounts how much of each token to withdraw\n     * @param maxBurnAmount the max LP token provider is willing to pay to\n     * remove liquidity. Useful as a front-running mitigation.\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of LP tokens burned\n     */\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\n    }\n\n    /*** ADMIN FUNCTIONS ***/\n\n    /**\n     * @notice Withdraw all admin fees to the contract owner\n     */\n    function withdrawAdminFees() external onlyOwner {\n        swapStorage.withdrawAdminFees(owner());\n    }\n\n    /**\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\n     * @param newAdminFee new admin fee to be applied on future transactions\n     */\n    function setAdminFee(uint256 newAdminFee) external onlyOwner {\n        swapStorage.setAdminFee(newAdminFee);\n    }\n\n    /**\n     * @notice Update the swap fee to be applied on swaps\n     * @param newSwapFee new swap fee to be applied on future transactions\n     */\n    function setSwapFee(uint256 newSwapFee) external onlyOwner {\n        swapStorage.setSwapFee(newSwapFee);\n    }\n\n    /**\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\n     * the limit range.\n     * @param futureA the new A to ramp towards\n     * @param futureTime timestamp when the new A should be reached\n     */\n    function rampA(uint256 futureA, uint256 futureTime) external onlyOwner {\n        swapStorage.rampA(futureA, futureTime);\n    }\n\n    /**\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\n     */\n    function stopRampA() external onlyOwner {\n        swapStorage.stopRampA();\n    }\n}\n"
    },
    "contracts/amm/SwapDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./interfaces/ISwap.sol\";\n\ncontract SwapDeployer is Ownable {\n    event NewSwapPool(\n        address indexed deployer,\n        address swapAddress,\n        IERC20[] pooledTokens\n    );\n\n    constructor() public Ownable() {}\n\n    function deploy(\n        address swapAddress,\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address lpTokenTargetAddress\n    ) external returns (address) {\n        address swapClone = Clones.clone(swapAddress);\n        ISwap(swapClone).initialize(\n            _pooledTokens,\n            decimals,\n            lpTokenName,\n            lpTokenSymbol,\n            _a,\n            _fee,\n            _adminFee,\n            lpTokenTargetAddress\n        );\n        Ownable(swapClone).transferOwnership(owner());\n        emit NewSwapPool(msg.sender, swapClone, _pooledTokens);\n        return swapClone;\n    }\n}\n"
    },
    "contracts/amm/SwapEthWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./Swap.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\n/**\n * @title SwapEthWrapper\n * @notice A wrapper contract for Swap contracts that have WETH as one of the pooled tokens.\n * @author Jongseung Lim (@weeb_mcgee)\n */\ncontract SwapEthWrapper {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // constants\n    uint8 private constant MAX_UINT8 = 2**8 - 1;\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    // immutables\n    Swap public immutable SWAP;\n    LPToken public immutable LP_TOKEN;\n    address payable public immutable WETH_ADDRESS;\n    address public immutable OWNER;\n    uint8 public immutable WETH_INDEX;\n\n    IERC20[] public pooledTokens;\n\n    /**\n     * @notice Deploys this contract with given WETH9 address and Swap address. It will attempt to\n     * fetch information about the given Swap pool. If the Swap pool does not contain WETH9,\n     * this call will be reverted. Owner address must be given so that `rescue()` function\n     * can be limited.\n     * @param wethAddress address to the WETH9 contract\n     * @param swap address to the Swap contract that has WETH9 as one of the tokens\n     * @param owner address that will be allowed to call `rescue()`\n     */\n    constructor(\n        address payable wethAddress,\n        Swap swap,\n        address owner\n    ) public {\n        (, , , , , , LPToken lpToken) = swap.swapStorage();\n        uint8 wethIndex = MAX_UINT8;\n\n        for (uint8 i = 0; i < MAX_UINT8; i++) {\n            try swap.getToken(i) returns (IERC20 token) {\n                pooledTokens.push(token);\n                if (address(token) == wethAddress) {\n                    wethIndex = i;\n                }\n                // Approve pooled tokens to be used by Swap\n                token.approve(address(swap), MAX_UINT256);\n            } catch {\n                break;\n            }\n        }\n        require(wethIndex != MAX_UINT8, \"WETH was not found in the swap pool\");\n\n        // Set immutable variables\n        WETH_INDEX = wethIndex;\n        WETH_ADDRESS = wethAddress;\n        SWAP = swap;\n        LP_TOKEN = lpToken;\n        OWNER = owner;\n\n        // Approve LPToken to be used by Swap\n        lpToken.approve(address(swap), MAX_UINT256);\n    }\n\n    /**\n     * @notice Add liquidity to the pool with the given amounts of tokens.\n     * @dev The msg.value of this call should match the value in amounts array\n     * in position of WETH9.\n     * @param amounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of LP token user minted and received\n     */\n    function addLiquidity(\n        uint256[] memory amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        // If using ETH, deposit them to WETH.\n        require(msg.value == amounts[WETH_INDEX], \"INCORRECT_MSG_VALUE\");\n        if (msg.value > 0) {\n            IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        }\n        // Go through amounts array and transfer respective tokens to this contract.\n        for (uint256 i = 0; i < amounts.length; i++) {\n            uint256 amount = amounts[i];\n            if (i != WETH_INDEX && amount > 0) {\n                pooledTokens[i].safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    amount\n                );\n            }\n        }\n        // Add the assets to the pool\n        uint256 lpTokenAmount = SWAP.addLiquidity(amounts, minToMint, deadline);\n        // Send the LPToken to msg.sender\n        IERC20(address(LP_TOKEN)).safeTransfer(msg.sender, lpTokenAmount);\n        return lpTokenAmount;\n    }\n\n    /**\n     * @notice Burn LP tokens to remove liquidity from the pool.\n     * @dev Liquidity can always be removed, even when the pool is paused. Caller\n     * will receive ETH instead of WETH9.\n     * @param amount the amount of LP tokens to burn\n     * @param minAmounts the minimum amounts of each token in the pool\n     *        acceptable for this burn. Useful as a front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     * @return amounts of tokens user received\n     */\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory) {\n        // Transfer LPToken from msg.sender to this contract.\n        IERC20(address(LP_TOKEN)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Remove liquidity\n        uint256[] memory amounts = SWAP.removeLiquidity(\n            amount,\n            minAmounts,\n            deadline\n        );\n        // Send the tokens back to the user\n        for (uint256 i = 0; i < amounts.length; i++) {\n            if (i != WETH_INDEX) {\n                pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n            } else {\n                IWETH9(WETH_ADDRESS).withdraw(amounts[i]);\n                // slither-disable-next-line arbitrary-send\n                (bool success, ) = msg.sender.call{value: amounts[i]}(\"\");\n                require(success, \"ETH_TRANSFER_FAILED\");\n            }\n        }\n        return amounts;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool all in one token.\n     * @dev Caller will receive ETH instead of WETH9.\n     * @param tokenAmount the amount of the token you want to receive\n     * @param tokenIndex the index of the token you want to receive\n     * @param minAmount the minimum amount to withdraw, otherwise revert\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of chosen token user received\n     */\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256) {\n        // Transfer LPToken from msg.sender to this contract.\n        IERC20(address(LP_TOKEN)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            tokenAmount\n        );\n        // Withdraw via single token\n        uint256 amount = SWAP.removeLiquidityOneToken(\n            tokenAmount,\n            tokenIndex,\n            minAmount,\n            deadline\n        );\n        // Transfer the token to msg.sender accordingly\n        if (tokenIndex != WETH_INDEX) {\n            pooledTokens[tokenIndex].safeTransfer(msg.sender, amount);\n        } else {\n            IWETH9(WETH_ADDRESS).withdraw(amount);\n            // slither-disable-next-line arbitrary-send\n            (bool success, ) = msg.sender.call{value: amount}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n        }\n        return amount;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, weighted differently than the\n     * pool's current balances.\n     * @dev Caller will receive ETH instead of WETH9.\n     * @param amounts how much of each token to withdraw\n     * @param maxBurnAmount the max LP token provider is willing to pay to\n     * remove liquidity. Useful as a front-running mitigation.\n     * @param deadline latest timestamp to accept this transaction\n     * @return amount of LP tokens burned\n     */\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256) {\n        // Transfer LPToken from msg.sender to this contract.\n        IERC20(address(LP_TOKEN)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            maxBurnAmount\n        );\n        // Withdraw in imbalanced ratio\n        uint256 burnedLpTokenAmount = SWAP.removeLiquidityImbalance(\n            amounts,\n            maxBurnAmount,\n            deadline\n        );\n        // Send the tokens back to the user\n        for (uint256 i = 0; i < amounts.length; i++) {\n            if (i != WETH_INDEX) {\n                pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n            } else {\n                IWETH9(WETH_ADDRESS).withdraw(amounts[i]);\n                // slither-disable-next-line arbitrary-send\n                (bool success, ) = msg.sender.call{value: amounts[i]}(\"\");\n                require(success, \"ETH_TRANSFER_FAILED\");\n            }\n        }\n        // Send any extra LP tokens back as well\n        uint256 extraLpTokenAmount = maxBurnAmount.sub(burnedLpTokenAmount);\n        if (extraLpTokenAmount > 0) {\n            IERC20(address(LP_TOKEN)).safeTransfer(\n                msg.sender,\n                extraLpTokenAmount\n            );\n        }\n        return burnedLpTokenAmount;\n    }\n\n    /**\n     * @notice Swap two tokens using the underlying pool. If tokenIndexFrom\n     * represents WETH9 in the pool, the caller must set msg.value equal to dx.\n     * If the user is swapping to WETH9 in the pool, the user will receive ETH instead.\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable returns (uint256) {\n        // Transfer tokens from msg.sender to this contract\n        if (tokenIndexFrom != WETH_INDEX) {\n            IERC20(pooledTokens[tokenIndexFrom]).safeTransferFrom(\n                msg.sender,\n                address(this),\n                dx\n            );\n        } else {\n            require(msg.value == dx, \"INCORRECT_MSG_VALUE\");\n            IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        }\n        // Execute swap\n        uint256 dy = SWAP.swap(\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            minDy,\n            deadline\n        );\n        // Transfer the swapped tokens to msg.sender\n        if (tokenIndexTo != WETH_INDEX) {\n            IERC20(pooledTokens[tokenIndexTo]).safeTransfer(msg.sender, dy);\n        } else {\n            IWETH9(WETH_ADDRESS).withdraw(dy);\n            // slither-disable-next-line arbitrary-send\n            (bool success, ) = msg.sender.call{value: dy}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n        }\n        return dy;\n    }\n\n    /**\n     * @notice Rescues any of the ETH, the pooled tokens, or the LPToken that may be stuck\n     * in this contract. Only the OWNER can call this function.\n     */\n    function rescue() external {\n        require(msg.sender == OWNER, \"CALLED_BY_NON_OWNER\");\n        IERC20[] memory tokens = pooledTokens;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            tokens[i].safeTransfer(\n                msg.sender,\n                tokens[i].balanceOf(address(this))\n            );\n        }\n        IERC20 lpToken_ = IERC20(address(LP_TOKEN));\n        lpToken_.safeTransfer(msg.sender, lpToken_.balanceOf(address(this)));\n        // slither-disable-next-line arbitrary-send\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    receive() external payable {}\n\n    // VIEW FUNCTIONS\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return token amount the user will receive\n     */\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256)\n    {\n        return SWAP.calculateTokenAmount(amounts, deposit);\n    }\n\n    /**\n     * @notice A simple method to calculate amount of each underlying\n     * tokens that is returned upon burning given amount of LP tokens\n     * @param amount the amount of LP tokens that would be burned on withdrawal\n     * @return array of token balances that the user will receive\n     */\n    function calculateRemoveLiquidity(uint256 amount)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return SWAP.calculateRemoveLiquidity(amount);\n    }\n\n    /**\n     * @notice Calculate the amount of underlying token available to withdraw\n     * when withdrawing via only single token\n     * @param tokenAmount the amount of LP token to burn\n     * @param tokenIndex index of which token will be withdrawn\n     * @return availableTokenAmount calculated amount of underlying token\n     * available to withdraw\n     */\n    function calculateRemoveLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 availableTokenAmount) {\n        return SWAP.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\n    }\n}\n"
    },
    "contracts/amm/SwapFlashLoan.sol": {
      "content": "// SPDX-License-Identifier: MIT WITH AGPL-3.0-only\n\npragma solidity 0.6.12;\n\nimport \"./Swap.sol\";\nimport \"./interfaces/IFlashLoanReceiver.sol\";\n\n/**\n * @title Swap - A StableSwap implementation in solidity.\n * @notice This contract is responsible for custody of closely pegged assets (eg. group of stablecoins)\n * and automatic market making system. Users become an LP (Liquidity Provider) by depositing their tokens\n * in desired ratios for an exchange of the pool token that represents their share of the pool.\n * Users can burn pool tokens and withdraw their share of token(s).\n *\n * Each time a swap between the pooled tokens happens, a set fee incurs which effectively gets\n * distributed to the LPs.\n *\n * In case of emergencies, admin can pause additional deposits, swaps, or single-asset withdraws - which\n * stops the ratio of the tokens in the pool from changing.\n * Users can always withdraw their tokens via multi-asset withdraws.\n *\n * @dev Most of the logic is stored as a library `SwapUtils` for the sake of reducing contract's\n * deployment size.\n */\ncontract SwapFlashLoan is Swap {\n    // Total fee that is charged on all flashloans in BPS. Borrowers must repay the amount plus the flash loan fee.\n    // This fee is split between the protocol and the pool.\n    uint256 public flashLoanFeeBPS;\n    // Share of the flash loan fee that goes to the protocol in BPS. A portion of each flash loan fee is allocated\n    // to the protocol rather than the pool.\n    uint256 public protocolFeeShareBPS;\n    // Max BPS for limiting flash loan fee settings.\n    uint256 public constant MAX_BPS = 10000;\n\n    /*** EVENTS ***/\n    event FlashLoan(\n        address indexed receiver,\n        uint8 tokenIndex,\n        uint256 amount,\n        uint256 amountFee,\n        uint256 protocolFee\n    );\n\n    /**\n     * @notice Initializes this Swap contract with the given parameters.\n     * This will also clone a LPToken contract that represents users'\n     * LP positions. The owner of LPToken will be this contract - which means\n     * only this contract is allowed to mint/burn tokens.\n     *\n     * @param _pooledTokens an array of ERC20s this pool will accept\n     * @param decimals the decimals to use for each pooled token,\n     * eg 8 for WBTC. Cannot be larger than POOL_PRECISION_DECIMALS\n     * @param lpTokenName the long-form name of the token to be deployed\n     * @param lpTokenSymbol the short symbol for the token to be deployed\n     * @param _a the amplification coefficient * n * (n - 1). See the\n     * StableSwap paper for details\n     * @param _fee default swap fee to be initialized with\n     * @param _adminFee default adminFee to be initialized with\n     * @param lpTokenTargetAddress the address of an existing LPToken contract to use as a target\n     */\n    function initialize(\n        IERC20[] memory _pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 _a,\n        uint256 _fee,\n        uint256 _adminFee,\n        address lpTokenTargetAddress\n    ) public virtual override initializer {\n        Swap.initialize(\n            _pooledTokens,\n            decimals,\n            lpTokenName,\n            lpTokenSymbol,\n            _a,\n            _fee,\n            _adminFee,\n            lpTokenTargetAddress\n        );\n        flashLoanFeeBPS = 8; // 8 bps\n        protocolFeeShareBPS = 0; // 0 bps\n    }\n\n    /*** STATE MODIFYING FUNCTIONS ***/\n\n    /**\n     * @notice Borrow the specified token from this pool for this transaction only. This function will call\n     * `IFlashLoanReceiver(receiver).executeOperation` and the `receiver` must return the full amount of the token\n     * and the associated fee by the end of the callback transaction. If the conditions are not met, this call\n     * is reverted.\n     * @param receiver the address of the receiver of the token. This address must implement the IFlashLoanReceiver\n     * interface and the callback function `executeOperation`.\n     * @param token the protocol fee in bps to be applied on the total flash loan fee\n     * @param amount the total amount to borrow in this transaction\n     * @param params optional data to pass along to the callback function\n     */\n    function flashLoan(\n        address receiver,\n        IERC20 token,\n        uint256 amount,\n        bytes memory params\n    ) external nonReentrant {\n        uint8 tokenIndex = getTokenIndex(address(token));\n        uint256 availableLiquidityBefore = token.balanceOf(address(this));\n        uint256 protocolBalanceBefore = availableLiquidityBefore.sub(\n            swapStorage.balances[tokenIndex]\n        );\n        require(\n            amount > 0 && availableLiquidityBefore >= amount,\n            \"invalid amount\"\n        );\n\n        // Calculate the additional amount of tokens the pool should end up with\n        uint256 amountFee = amount.mul(flashLoanFeeBPS).div(10000);\n        // Calculate the portion of the fee that will go to the protocol\n        uint256 protocolFee = amountFee.mul(protocolFeeShareBPS).div(10000);\n        require(amountFee > 0, \"amount is small for a flashLoan\");\n\n        // Transfer the requested amount of tokens\n        token.safeTransfer(receiver, amount);\n\n        // Execute callback function on receiver\n        IFlashLoanReceiver(receiver).executeOperation(\n            address(this),\n            address(token),\n            amount,\n            amountFee,\n            params\n        );\n\n        uint256 availableLiquidityAfter = token.balanceOf(address(this));\n        require(\n            availableLiquidityAfter >= availableLiquidityBefore.add(amountFee),\n            \"flashLoan fee is not met\"\n        );\n\n        swapStorage.balances[tokenIndex] = availableLiquidityAfter\n        .sub(protocolBalanceBefore)\n        .sub(protocolFee);\n        emit FlashLoan(receiver, tokenIndex, amount, amountFee, protocolFee);\n    }\n\n    /*** ADMIN FUNCTIONS ***/\n\n    /**\n     * @notice Updates the flash loan fee parameters. This function can only be called by the owner.\n     * @param newFlashLoanFeeBPS the total fee in bps to be applied on future flash loans\n     * @param newProtocolFeeShareBPS the protocol fee in bps to be applied on the total flash loan fee\n     */\n    function setFlashLoanFees(\n        uint256 newFlashLoanFeeBPS,\n        uint256 newProtocolFeeShareBPS\n    ) external onlyOwner {\n        require(\n            newFlashLoanFeeBPS > 0 &&\n                newFlashLoanFeeBPS <= MAX_BPS &&\n                newProtocolFeeShareBPS <= MAX_BPS,\n            \"fees are not in valid range\"\n        );\n        flashLoanFeeBPS = newFlashLoanFeeBPS;\n        protocolFeeShareBPS = newProtocolFeeShareBPS;\n    }\n}\n"
    },
    "contracts/amm/SwapUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./AmplificationUtils.sol\";\nimport \"./LPToken.sol\";\nimport \"./MathUtils.sol\";\n\n/**\n * @title SwapUtils library\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\n * Admin functions should be protected within contracts using this library.\n */\nlibrary SwapUtils {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using MathUtils for uint256;\n\n    /*** EVENTS ***/\n\n    event TokenSwap(\n        address indexed buyer,\n        uint256 tokensSold,\n        uint256 tokensBought,\n        uint128 soldId,\n        uint128 boughtId\n    );\n    event AddLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 lpTokenSupply\n    );\n    event RemoveLiquidity(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256 lpTokenSupply\n    );\n    event RemoveLiquidityOne(\n        address indexed provider,\n        uint256 lpTokenAmount,\n        uint256 lpTokenSupply,\n        uint256 boughtId,\n        uint256 tokensBought\n    );\n    event RemoveLiquidityImbalance(\n        address indexed provider,\n        uint256[] tokenAmounts,\n        uint256[] fees,\n        uint256 invariant,\n        uint256 lpTokenSupply\n    );\n    event NewAdminFee(uint256 newAdminFee);\n    event NewSwapFee(uint256 newSwapFee);\n\n    struct Swap {\n        // variables around the ramp management of A,\n        // the amplification coefficient * n * (n - 1)\n        // see https://www.curve.fi/stableswap-paper.pdf for details\n        uint256 initialA;\n        uint256 futureA;\n        uint256 initialATime;\n        uint256 futureATime;\n        // fee calculation\n        uint256 swapFee;\n        uint256 adminFee;\n        LPToken lpToken;\n        // contract references for all tokens being pooled\n        IERC20[] pooledTokens;\n        // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\n        // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\n        // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\n        uint256[] tokenPrecisionMultipliers;\n        // the pool balance of each token, in the token's precision\n        // the contract's actual token balance might differ\n        uint256[] balances;\n    }\n\n    // Struct storing variables used in calculations in the\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\n    struct CalculateWithdrawOneTokenDYInfo {\n        uint256 d0;\n        uint256 d1;\n        uint256 newY;\n        uint256 feePerToken;\n        uint256 preciseA;\n    }\n\n    // Struct storing variables used in calculations in the\n    // {add,remove}Liquidity functions to avoid stack too deep errors\n    struct ManageLiquidityInfo {\n        uint256 d0;\n        uint256 d1;\n        uint256 d2;\n        uint256 preciseA;\n        LPToken lpToken;\n        uint256 totalSupply;\n        uint256[] balances;\n        uint256[] multipliers;\n    }\n\n    // the precision all pools tokens will be converted to\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\n\n    // the denominator used to calculate admin and LP fees. For example, an\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    // Max swap fee is 1% or 100bps of each swap\n    uint256 public constant MAX_SWAP_FEE = 10**8;\n\n    // Max adminFee is 100% of the swapFee\n    // adminFee does not add additional fee on top of swapFee\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\n    // users but only on the earnings of LPs\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\n\n    // Constant value used as max loop limit\n    uint256 private constant MAX_LOOP_LIMIT = 256;\n\n    /*** VIEW & PURE FUNCTIONS ***/\n\n    function _getAPrecise(Swap storage self) internal view returns (uint256) {\n        return AmplificationUtils._getAPrecise(self);\n    }\n\n    /**\n     * @notice Calculate the dy, the amount of selected token that user receives and\n     * the fee of withdrawing in one token\n     * @param tokenAmount the amount to withdraw in the pool's precision\n     * @param tokenIndex which token will be withdrawn\n     * @param self Swap struct to read from\n     * @return the amount of token user will receive\n     */\n    function calculateWithdrawOneToken(\n        Swap storage self,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256) {\n        (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\n            self,\n            tokenAmount,\n            tokenIndex,\n            self.lpToken.totalSupply()\n        );\n        return availableTokenAmount;\n    }\n\n    function _calculateWithdrawOneToken(\n        Swap storage self,\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 totalSupply\n    ) internal view returns (uint256, uint256) {\n        uint256 dy;\n        uint256 newY;\n        uint256 currentY;\n\n        (dy, newY, currentY) = calculateWithdrawOneTokenDY(\n            self,\n            tokenIndex,\n            tokenAmount,\n            totalSupply\n        );\n\n        // dy_0 (without fees)\n        // dy, dy_0 - dy\n\n        uint256 dySwapFee = currentY\n        .sub(newY)\n        .div(self.tokenPrecisionMultipliers[tokenIndex])\n        .sub(dy);\n\n        return (dy, dySwapFee);\n    }\n\n    /**\n     * @notice Calculate the dy of withdrawing in one token\n     * @param self Swap struct to read from\n     * @param tokenIndex which token will be withdrawn\n     * @param tokenAmount the amount to withdraw in the pools precision\n     * @return the d and the new y after withdrawing one token\n     */\n    function calculateWithdrawOneTokenDY(\n        Swap storage self,\n        uint8 tokenIndex,\n        uint256 tokenAmount,\n        uint256 totalSupply\n    )\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // Get the current D, then solve the stableswap invariant\n        // y_i for D - tokenAmount\n        uint256[] memory xp = _xp(self);\n\n        require(tokenIndex < xp.length, \"Token index out of range\");\n\n\n            CalculateWithdrawOneTokenDYInfo memory v\n         = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\n        v.preciseA = _getAPrecise(self);\n        v.d0 = getD(xp, v.preciseA);\n        v.d1 = v.d0.sub(tokenAmount.mul(v.d0).div(totalSupply));\n\n        require(tokenAmount <= xp[tokenIndex], \"Withdraw exceeds available\");\n\n        v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\n\n        uint256[] memory xpReduced = new uint256[](xp.length);\n\n        v.feePerToken = _feePerToken(self.swapFee, xp.length);\n        for (uint256 i = 0; i < xp.length; i++) {\n            uint256 xpi = xp[i];\n            // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\n            // else dxExpected = xp[i] - (xp[i] * d1 / d0)\n            // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\n            xpReduced[i] = xpi.sub(\n                (\n                    (i == tokenIndex)\n                        ? xpi.mul(v.d1).div(v.d0).sub(v.newY)\n                        : xpi.sub(xpi.mul(v.d1).div(v.d0))\n                )\n                .mul(v.feePerToken)\n                .div(FEE_DENOMINATOR)\n            );\n        }\n\n        uint256 dy = xpReduced[tokenIndex].sub(\n            getYD(v.preciseA, tokenIndex, xpReduced, v.d1)\n        );\n        dy = dy.sub(1).div(self.tokenPrecisionMultipliers[tokenIndex]);\n\n        return (dy, v.newY, xp[tokenIndex]);\n    }\n\n    /**\n     * @notice Calculate the price of a token in the pool with given\n     * precision-adjusted balances and a particular D.\n     *\n     * @dev This is accomplished via solving the invariant iteratively.\n     * See the StableSwap paper and Curve.fi implementation for further details.\n     *\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n     * x_1**2 + b*x_1 = c\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\n     *\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\n     * @param tokenIndex Index of token we are calculating for.\n     * @param xp a precision-adjusted set of pool balances. Array should be\n     * the same cardinality as the pool.\n     * @param d the stableswap invariant\n     * @return the price of the token, in the same precision as in xp\n     */\n    function getYD(\n        uint256 a,\n        uint8 tokenIndex,\n        uint256[] memory xp,\n        uint256 d\n    ) internal pure returns (uint256) {\n        uint256 numTokens = xp.length;\n        require(tokenIndex < numTokens, \"Token not found\");\n\n        uint256 c = d;\n        uint256 s;\n        uint256 nA = a.mul(numTokens);\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (i != tokenIndex) {\n                s = s.add(xp[i]);\n                c = c.mul(d).div(xp[i].mul(numTokens));\n                // If we were to protect the division loss we would have to keep the denominator separate\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\n                // c = c * D * D * D * ... overflow!\n            }\n        }\n        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));\n\n        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));\n        uint256 yPrev;\n        uint256 y = d;\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\n            yPrev = y;\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\n            if (y.within1(yPrev)) {\n                return y;\n            }\n        }\n        revert(\"Approximation did not converge\");\n    }\n\n    /**\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\n     * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\n     * as the pool.\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\n     * See the StableSwap paper for details\n     * @return the invariant, at the precision of the pool\n     */\n    function getD(uint256[] memory xp, uint256 a)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 numTokens = xp.length;\n        uint256 s;\n        for (uint256 i = 0; i < numTokens; i++) {\n            s = s.add(xp[i]);\n        }\n        if (s == 0) {\n            return 0;\n        }\n\n        uint256 prevD;\n        uint256 d = s;\n        uint256 nA = a.mul(numTokens);\n\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\n            uint256 dP = d;\n            for (uint256 j = 0; j < numTokens; j++) {\n                dP = dP.mul(d).div(xp[j].mul(numTokens));\n                // If we were to protect the division loss we would have to keep the denominator separate\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\n                // dP = dP * D * D * D * ... overflow!\n            }\n            prevD = d;\n            d = nA\n            .mul(s)\n            .div(AmplificationUtils.A_PRECISION)\n            .add(dP.mul(numTokens))\n            .mul(d)\n            .div(\n                nA\n                .sub(AmplificationUtils.A_PRECISION)\n                .mul(d)\n                .div(AmplificationUtils.A_PRECISION)\n                .add(numTokens.add(1).mul(dP))\n            );\n            if (d.within1(prevD)) {\n                return d;\n            }\n        }\n\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n        // function which does not rely on D.\n        revert(\"D does not converge\");\n    }\n\n    /**\n     * @notice Given a set of balances and precision multipliers, return the\n     * precision-adjusted balances.\n     *\n     * @param balances an array of token balances, in their native precisions.\n     * These should generally correspond with pooled tokens.\n     *\n     * @param precisionMultipliers an array of multipliers, corresponding to\n     * the amounts in the balances array. When multiplied together they\n     * should yield amounts at the pool's precision.\n     *\n     * @return an array of amounts \"scaled\" to the pool's precision\n     */\n    function _xp(\n        uint256[] memory balances,\n        uint256[] memory precisionMultipliers\n    ) internal pure returns (uint256[] memory) {\n        uint256 numTokens = balances.length;\n        require(\n            numTokens == precisionMultipliers.length,\n            \"Balances must match multipliers\"\n        );\n        uint256[] memory xp = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; i++) {\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\n        }\n        return xp;\n    }\n\n    /**\n     * @notice Return the precision-adjusted balances of all tokens in the pool\n     * @param self Swap struct to read from\n     * @return the pool balances \"scaled\" to the pool's precision, allowing\n     * them to be more easily compared.\n     */\n    function _xp(Swap storage self) internal view returns (uint256[] memory) {\n        return _xp(self.balances, self.tokenPrecisionMultipliers);\n    }\n\n    /**\n     * @notice Get the virtual price, to help calculate profit\n     * @param self Swap struct to read from\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\n     */\n    function getVirtualPrice(Swap storage self)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 d = getD(_xp(self), _getAPrecise(self));\n        LPToken lpToken = self.lpToken;\n        uint256 supply = lpToken.totalSupply();\n        if (supply > 0) {\n            return d.mul(10**uint256(POOL_PRECISION_DECIMALS)).div(supply);\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Calculate the new balances of the tokens given the indexes of the token\n     * that is swapped from (FROM) and the token that is swapped to (TO).\n     * This function is used as a helper function to calculate how much TO token\n     * the user should receive on swap.\n     *\n     * @param preciseA precise form of amplification coefficient\n     * @param tokenIndexFrom index of FROM token\n     * @param tokenIndexTo index of TO token\n     * @param x the new total amount of FROM token\n     * @param xp balances of the tokens in the pool\n     * @return the amount of TO token that should remain in the pool\n     */\n    function getY(\n        uint256 preciseA,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 x,\n        uint256[] memory xp\n    ) internal pure returns (uint256) {\n        uint256 numTokens = xp.length;\n        require(\n            tokenIndexFrom != tokenIndexTo,\n            \"Can't compare token to itself\"\n        );\n        require(\n            tokenIndexFrom < numTokens && tokenIndexTo < numTokens,\n            \"Tokens must be in pool\"\n        );\n\n        uint256 d = getD(xp, preciseA);\n        uint256 c = d;\n        uint256 s;\n        uint256 nA = numTokens.mul(preciseA);\n\n        uint256 _x;\n        for (uint256 i = 0; i < numTokens; i++) {\n            if (i == tokenIndexFrom) {\n                _x = x;\n            } else if (i != tokenIndexTo) {\n                _x = xp[i];\n            } else {\n                continue;\n            }\n            s = s.add(_x);\n            c = c.mul(d).div(_x.mul(numTokens));\n            // If we were to protect the division loss we would have to keep the denominator separate\n            // and divide at the end. However this leads to overflow with large numTokens or/and D.\n            // c = c * D * D * D * ... overflow!\n        }\n        c = c.mul(d).mul(AmplificationUtils.A_PRECISION).div(nA.mul(numTokens));\n        uint256 b = s.add(d.mul(AmplificationUtils.A_PRECISION).div(nA));\n        uint256 yPrev;\n        uint256 y = d;\n\n        // iterative approximation\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\n            yPrev = y;\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\n            if (y.within1(yPrev)) {\n                return y;\n            }\n        }\n        revert(\"Approximation did not converge\");\n    }\n\n    /**\n     * @notice Externally calculates a swap between two tokens.\n     * @param self Swap struct to read from\n     * @param tokenIndexFrom the token to sell\n     * @param tokenIndexTo the token to buy\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @return dy the number of tokens the user will get\n     */\n    function calculateSwap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256 dy) {\n        (dy, ) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            self.balances\n        );\n    }\n\n    /**\n     * @notice Internally calculates a swap between two tokens.\n     *\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\n     * using the token contracts.\n     *\n     * @param self Swap struct to read from\n     * @param tokenIndexFrom the token to sell\n     * @param tokenIndexTo the token to buy\n     * @param dx the number of tokens to sell. If the token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @return dy the number of tokens the user will get\n     * @return dyFee the associated fee\n     */\n    function _calculateSwap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256[] memory balances\n    ) internal view returns (uint256 dy, uint256 dyFee) {\n        uint256[] memory multipliers = self.tokenPrecisionMultipliers;\n        uint256[] memory xp = _xp(balances, multipliers);\n        require(\n            tokenIndexFrom < xp.length && tokenIndexTo < xp.length,\n            \"Token index out of range\"\n        );\n        uint256 x = dx.mul(multipliers[tokenIndexFrom]).add(xp[tokenIndexFrom]);\n        uint256 y = getY(\n            _getAPrecise(self),\n            tokenIndexFrom,\n            tokenIndexTo,\n            x,\n            xp\n        );\n        dy = xp[tokenIndexTo].sub(y).sub(1);\n        dyFee = dy.mul(self.swapFee).div(FEE_DENOMINATOR);\n        dy = dy.sub(dyFee).div(multipliers[tokenIndexTo]);\n    }\n\n    /**\n     * @notice A simple method to calculate amount of each underlying\n     * tokens that is returned upon burning given amount of\n     * LP tokens\n     *\n     * @param amount the amount of LP tokens that would to be burned on\n     * withdrawal\n     * @return array of amounts of tokens user will receive\n     */\n    function calculateRemoveLiquidity(Swap storage self, uint256 amount)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return\n            _calculateRemoveLiquidity(\n                self.balances,\n                amount,\n                self.lpToken.totalSupply()\n            );\n    }\n\n    function _calculateRemoveLiquidity(\n        uint256[] memory balances,\n        uint256 amount,\n        uint256 totalSupply\n    ) internal pure returns (uint256[] memory) {\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\n\n        uint256[] memory amounts = new uint256[](balances.length);\n\n        for (uint256 i = 0; i < balances.length; i++) {\n            amounts[i] = balances[i].mul(amount).div(totalSupply);\n        }\n        return amounts;\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param self Swap struct to read from\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision. If a token charges a fee on transfers,\n     * use the amount that gets transferred after the fee.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return if deposit was true, total amount of lp token that will be minted and if\n     * deposit was false, total amount of lp token that will be burned\n     */\n    function calculateTokenAmount(\n        Swap storage self,\n        uint256[] calldata amounts,\n        bool deposit\n    ) external view returns (uint256) {\n        uint256 a = _getAPrecise(self);\n        uint256[] memory balances = self.balances;\n        uint256[] memory multipliers = self.tokenPrecisionMultipliers;\n\n        uint256 d0 = getD(_xp(balances, multipliers), a);\n        for (uint256 i = 0; i < balances.length; i++) {\n            if (deposit) {\n                balances[i] = balances[i].add(amounts[i]);\n            } else {\n                balances[i] = balances[i].sub(\n                    amounts[i],\n                    \"Cannot withdraw more than available\"\n                );\n            }\n        }\n        uint256 d1 = getD(_xp(balances, multipliers), a);\n        uint256 totalSupply = self.lpToken.totalSupply();\n\n        if (deposit) {\n            return d1.sub(d0).mul(totalSupply).div(d0);\n        } else {\n            return d0.sub(d1).mul(totalSupply).div(d0);\n        }\n    }\n\n    /**\n     * @notice return accumulated amount of admin fees of the token with given index\n     * @param self Swap struct to read from\n     * @param index Index of the pooled token\n     * @return admin balance in the token's precision\n     */\n    function getAdminBalance(Swap storage self, uint256 index)\n        external\n        view\n        returns (uint256)\n    {\n        require(index < self.pooledTokens.length, \"Token index out of range\");\n        return\n            self.pooledTokens[index].balanceOf(address(this)).sub(\n                self.balances[index]\n            );\n    }\n\n    /**\n     * @notice internal helper function to calculate fee per token multiplier used in\n     * swap fee calculations\n     * @param swapFee swap fee for the tokens\n     * @param numTokens number of tokens pooled\n     */\n    function _feePerToken(uint256 swapFee, uint256 numTokens)\n        internal\n        pure\n        returns (uint256)\n    {\n        return swapFee.mul(numTokens).div(numTokens.sub(1).mul(4));\n    }\n\n    /*** STATE MODIFYING FUNCTIONS ***/\n\n    /**\n     * @notice swap two tokens in the pool\n     * @param self Swap struct to read from and write to\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @return amount of token user received on swap\n     */\n    function swap(\n        Swap storage self,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256) {\n        {\n            IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\n            require(\n                dx <= tokenFrom.balanceOf(msg.sender),\n                \"Cannot swap more than you own\"\n            );\n            // Transfer tokens first to see if a fee was charged on transfer\n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));\n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\n\n            // Use the actual transferred amount for AMM math\n            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);\n        }\n\n        uint256 dy;\n        uint256 dyFee;\n        uint256[] memory balances = self.balances;\n        (dy, dyFee) = _calculateSwap(\n            self,\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            balances\n        );\n        require(dy >= minDy, \"Swap didn't result in min tokens\");\n\n        uint256 dyAdminFee = dyFee.mul(self.adminFee).div(FEE_DENOMINATOR).div(\n            self.tokenPrecisionMultipliers[tokenIndexTo]\n        );\n\n        self.balances[tokenIndexFrom] = balances[tokenIndexFrom].add(dx);\n        self.balances[tokenIndexTo] = balances[tokenIndexTo].sub(dy).sub(\n            dyAdminFee\n        );\n\n        self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\n\n        emit TokenSwap(msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\n\n        return dy;\n    }\n\n    /**\n     * @notice Add liquidity to the pool\n     * @param self Swap struct to read from and write to\n     * @param amounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\n     * @return amount of LP token user received\n     */\n    function addLiquidity(\n        Swap storage self,\n        uint256[] memory amounts,\n        uint256 minToMint\n    ) external returns (uint256) {\n        IERC20[] memory pooledTokens = self.pooledTokens;\n        require(\n            amounts.length == pooledTokens.length,\n            \"Amounts must match pooled tokens\"\n        );\n\n        // current state\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\n            0,\n            0,\n            0,\n            _getAPrecise(self),\n            self.lpToken,\n            0,\n            self.balances,\n            self.tokenPrecisionMultipliers\n        );\n        v.totalSupply = v.lpToken.totalSupply();\n\n        if (v.totalSupply != 0) {\n            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\n        }\n\n        uint256[] memory newBalances = new uint256[](pooledTokens.length);\n\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\n            require(\n                v.totalSupply != 0 || amounts[i] > 0,\n                \"Must supply all tokens in pool\"\n            );\n\n            // Transfer tokens first to see if a fee was charged on transfer\n            if (amounts[i] != 0) {\n                uint256 beforeBalance = pooledTokens[i].balanceOf(\n                    address(this)\n                );\n                pooledTokens[i].safeTransferFrom(\n                    msg.sender,\n                    address(this),\n                    amounts[i]\n                );\n\n                // Update the amounts[] with actual transfer amount\n                amounts[i] = pooledTokens[i].balanceOf(address(this)).sub(\n                    beforeBalance\n                );\n            }\n\n            newBalances[i] = v.balances[i].add(amounts[i]);\n        }\n\n        // invariant after change\n        v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);\n        require(v.d1 > v.d0, \"D should increase\");\n\n        // updated to reflect fees and calculate the user's LP tokens\n        v.d2 = v.d1;\n        uint256[] memory fees = new uint256[](pooledTokens.length);\n\n        if (v.totalSupply != 0) {\n            uint256 feePerToken = _feePerToken(\n                self.swapFee,\n                pooledTokens.length\n            );\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\n                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);\n                fees[i] = feePerToken\n                .mul(idealBalance.difference(newBalances[i]))\n                .div(FEE_DENOMINATOR);\n                self.balances[i] = newBalances[i].sub(\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\n                );\n                newBalances[i] = newBalances[i].sub(fees[i]);\n            }\n            v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);\n        } else {\n            // the initial depositor doesn't pay fees\n            self.balances = newBalances;\n        }\n\n        uint256 toMint;\n        if (v.totalSupply == 0) {\n            toMint = v.d1;\n        } else {\n            toMint = v.d2.sub(v.d0).mul(v.totalSupply).div(v.d0);\n        }\n\n        require(toMint >= minToMint, \"Couldn't mint min requested\");\n\n        // mint the user's LP tokens\n        v.lpToken.mint(msg.sender, toMint);\n\n        emit AddLiquidity(\n            msg.sender,\n            amounts,\n            fees,\n            v.d1,\n            v.totalSupply.add(toMint)\n        );\n\n        return toMint;\n    }\n\n    /**\n     * @notice Burn LP tokens to remove liquidity from the pool.\n     * @dev Liquidity can always be removed, even when the pool is paused.\n     * @param self Swap struct to read from and write to\n     * @param amount the amount of LP tokens to burn\n     * @param minAmounts the minimum amounts of each token in the pool\n     * acceptable for this burn. Useful as a front-running mitigation\n     * @return amounts of tokens the user received\n     */\n    function removeLiquidity(\n        Swap storage self,\n        uint256 amount,\n        uint256[] calldata minAmounts\n    ) external returns (uint256[] memory) {\n        LPToken lpToken = self.lpToken;\n        IERC20[] memory pooledTokens = self.pooledTokens;\n        require(amount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\n        require(\n            minAmounts.length == pooledTokens.length,\n            \"minAmounts must match poolTokens\"\n        );\n\n        uint256[] memory balances = self.balances;\n        uint256 totalSupply = lpToken.totalSupply();\n\n        uint256[] memory amounts = _calculateRemoveLiquidity(\n            balances,\n            amount,\n            totalSupply\n        );\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            require(amounts[i] >= minAmounts[i], \"amounts[i] < minAmounts[i]\");\n            self.balances[i] = balances[i].sub(amounts[i]);\n            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n        }\n\n        lpToken.burnFrom(msg.sender, amount);\n\n        emit RemoveLiquidity(msg.sender, amounts, totalSupply.sub(amount));\n\n        return amounts;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool all in one token.\n     * @param self Swap struct to read from and write to\n     * @param tokenAmount the amount of the lp tokens to burn\n     * @param tokenIndex the index of the token you want to receive\n     * @param minAmount the minimum amount to withdraw, otherwise revert\n     * @return amount chosen token that user received\n     */\n    function removeLiquidityOneToken(\n        Swap storage self,\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount\n    ) external returns (uint256) {\n        LPToken lpToken = self.lpToken;\n        IERC20[] memory pooledTokens = self.pooledTokens;\n\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \">LP.balanceOf\");\n        require(tokenIndex < pooledTokens.length, \"Token not found\");\n\n        uint256 totalSupply = lpToken.totalSupply();\n\n        (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(\n            self,\n            tokenAmount,\n            tokenIndex,\n            totalSupply\n        );\n\n        require(dy >= minAmount, \"dy < minAmount\");\n\n        self.balances[tokenIndex] = self.balances[tokenIndex].sub(\n            dy.add(dyFee.mul(self.adminFee).div(FEE_DENOMINATOR))\n        );\n        lpToken.burnFrom(msg.sender, tokenAmount);\n        pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\n\n        emit RemoveLiquidityOne(\n            msg.sender,\n            tokenAmount,\n            totalSupply,\n            tokenIndex,\n            dy\n        );\n\n        return dy;\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, weighted differently than the\n     * pool's current balances.\n     *\n     * @param self Swap struct to read from and write to\n     * @param amounts how much of each token to withdraw\n     * @param maxBurnAmount the max LP token provider is willing to pay to\n     * remove liquidity. Useful as a front-running mitigation.\n     * @return actual amount of LP tokens burned in the withdrawal\n     */\n    function removeLiquidityImbalance(\n        Swap storage self,\n        uint256[] memory amounts,\n        uint256 maxBurnAmount\n    ) public returns (uint256) {\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\n            0,\n            0,\n            0,\n            _getAPrecise(self),\n            self.lpToken,\n            0,\n            self.balances,\n            self.tokenPrecisionMultipliers\n        );\n        v.totalSupply = v.lpToken.totalSupply();\n\n        IERC20[] memory pooledTokens = self.pooledTokens;\n\n        require(\n            amounts.length == pooledTokens.length,\n            \"Amounts should match pool tokens\"\n        );\n\n        require(\n            maxBurnAmount <= v.lpToken.balanceOf(msg.sender) &&\n                maxBurnAmount != 0,\n            \">LP.balanceOf\"\n        );\n\n        uint256 feePerToken = _feePerToken(self.swapFee, pooledTokens.length);\n        uint256[] memory fees = new uint256[](pooledTokens.length);\n        {\n            uint256[] memory balances1 = new uint256[](pooledTokens.length);\n            v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\n                balances1[i] = v.balances[i].sub(\n                    amounts[i],\n                    \"Cannot withdraw more than available\"\n                );\n            }\n            v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);\n\n            for (uint256 i = 0; i < pooledTokens.length; i++) {\n                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);\n                uint256 difference = idealBalance.difference(balances1[i]);\n                fees[i] = feePerToken.mul(difference).div(FEE_DENOMINATOR);\n                self.balances[i] = balances1[i].sub(\n                    fees[i].mul(self.adminFee).div(FEE_DENOMINATOR)\n                );\n                balances1[i] = balances1[i].sub(fees[i]);\n            }\n\n            v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);\n        }\n        uint256 tokenAmount = v.d0.sub(v.d2).mul(v.totalSupply).div(v.d0);\n        require(tokenAmount != 0, \"Burnt amount cannot be zero\");\n        tokenAmount = tokenAmount.add(1);\n\n        require(tokenAmount <= maxBurnAmount, \"tokenAmount > maxBurnAmount\");\n\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\n\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\n            pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\n        }\n\n        emit RemoveLiquidityImbalance(\n            msg.sender,\n            amounts,\n            fees,\n            v.d1,\n            v.totalSupply.sub(tokenAmount)\n        );\n\n        return tokenAmount;\n    }\n\n    /**\n     * @notice withdraw all admin fees to a given address\n     * @param self Swap struct to withdraw fees from\n     * @param to Address to send the fees to\n     */\n    function withdrawAdminFees(Swap storage self, address to) external {\n        IERC20[] memory pooledTokens = self.pooledTokens;\n        for (uint256 i = 0; i < pooledTokens.length; i++) {\n            IERC20 token = pooledTokens[i];\n            uint256 balance = token.balanceOf(address(this)).sub(\n                self.balances[i]\n            );\n            if (balance != 0) {\n                token.safeTransfer(to, balance);\n            }\n        }\n    }\n\n    /**\n     * @notice Sets the admin fee\n     * @dev adminFee cannot be higher than 100% of the swap fee\n     * @param self Swap struct to update\n     * @param newAdminFee new admin fee to be applied on future transactions\n     */\n    function setAdminFee(Swap storage self, uint256 newAdminFee) external {\n        require(newAdminFee <= MAX_ADMIN_FEE, \"Fee is too high\");\n        self.adminFee = newAdminFee;\n\n        emit NewAdminFee(newAdminFee);\n    }\n\n    /**\n     * @notice update the swap fee\n     * @dev fee cannot be higher than 1% of each swap\n     * @param self Swap struct to update\n     * @param newSwapFee new swap fee to be applied on future transactions\n     */\n    function setSwapFee(Swap storage self, uint256 newSwapFee) external {\n        require(newSwapFee <= MAX_SWAP_FEE, \"Fee is too high\");\n        self.swapFee = newSwapFee;\n\n        emit NewSwapFee(newSwapFee);\n    }\n}\n"
    },
    "contracts/auxiliary/DummyWeth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IWETH9 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    receive() external payable;\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n}\n\ncontract DummyWeth is Ownable {\n    IWETH9 public WETH;\n\n    function setWETHAddress(address payable _weth) external onlyOwner {\n        WETH = IWETH9(_weth);\n    }\n\n    function withdrawToSelf(uint256 amount) external {\n        WETH.withdraw(amount);\n    }\n\n    function rescue(uint256 amount) external onlyOwner {\n        WETH.transfer(owner(), amount);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/auxiliary/DummyWethProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\ninterface IWETH9 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    receive() external payable;\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n}\n\ncontract DummyWethProxy is Initializable, OwnableUpgradeable {\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    IWETH9 public WETH;\n\n    function setWETHAddress(address payable _weth) external onlyOwner {\n        WETH = IWETH9(_weth);\n    }\n\n    function withdrawToSelf(uint256 amount) external {\n        WETH.withdraw(amount);\n    }\n\n    function rescue(uint256 amount) external onlyOwner {\n        WETH.transfer(owner(), amount);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/bridge/BridgeConfigV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title BridgeConfig contract\n * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.\n **/\n\ncontract BridgeConfigV3 is AccessControl {\n    using SafeMath for uint256;\n    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256(\"BRIDGEMANAGER_ROLE\");\n    bytes32[] private _allTokenIDs;\n    mapping(bytes32 => Token[]) private _allTokens; // key is tokenID\n    mapping(uint256 => mapping(string => bytes32)) private _tokenIDMap; // key is chainID,tokenAddress\n    mapping(bytes32 => mapping(uint256 => Token)) private _tokens; // key is tokenID,chainID\n    mapping(address => mapping(uint256 => Pool)) private _pool; // key is tokenAddress,chainID\n    mapping(uint256 => uint256) private _maxGasPrice; // key is tokenID,chainID\n    uint256 public constant bridgeConfigVersion = 3;\n\n    // the denominator used to calculate fees. For example, an\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    // this struct must be initialized using setTokenConfig for each token that directly interacts with the bridge\n    struct Token {\n        uint256 chainId;\n        string tokenAddress;\n        uint8 tokenDecimals;\n        uint256 maxSwap;\n        uint256 minSwap;\n        uint256 swapFee;\n        uint256 maxSwapFee;\n        uint256 minSwapFee;\n        bool hasUnderlying;\n        bool isUnderlying;\n    }\n\n    struct Pool {\n        address tokenAddress;\n        uint256 chainId;\n        address poolAddress;\n        bool metaswap;\n    }\n\n    constructor() public {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @notice Returns a list of all existing token IDs converted to strings\n     */\n    function getAllTokenIDs() public view returns (string[] memory result) {\n        uint256 length = _allTokenIDs.length;\n        result = new string[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            result[i] = toString(_allTokenIDs[i]);\n        }\n    }\n\n    function _getTokenID(string memory tokenAddress, uint256 chainID) internal view returns (string memory) {\n        return toString(_tokenIDMap[chainID][tokenAddress]);\n    }\n\n    function getTokenID(string memory tokenAddress, uint256 chainID) public view returns (string memory) {\n        return _getTokenID(_toLower(tokenAddress), chainID);\n    }\n\n    /**\n     * @notice Returns the token ID (string) of the cross-chain token inputted\n     * @param tokenAddress address of token to get ID for\n     * @param chainID chainID of which to get token ID for\n     */\n    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory) {\n        return _getTokenID(_toLower(toString(tokenAddress)), chainID);\n    }\n\n    /**\n     * @notice Returns the full token config struct\n     * @param tokenID String input of the token ID for the token\n     * @param chainID Chain ID of which token address + config to get\n     */\n    function getToken(string memory tokenID, uint256 chainID) public view returns (Token memory token) {\n        return _tokens[toBytes32(tokenID)][chainID];\n    }\n\n    /**\n     * @notice Returns the full token config struct\n     * @param tokenID String input of the token ID for the token\n     * @param chainID Chain ID of which token address + config to get\n     */\n    function getTokenByID(string memory tokenID, uint256 chainID) public view returns (Token memory token) {\n        return _tokens[toBytes32(tokenID)][chainID];\n    }\n\n    /**\n     * @notice Returns token config struct, given an address and chainID\n     * @param tokenAddress Matches the token ID by using a combo of address + chain ID\n     * @param chainID Chain ID of which token to get config for\n     */\n    function getTokenByAddress(string memory tokenAddress, uint256 chainID) public view returns (Token memory token) {\n        return _tokens[_tokenIDMap[chainID][_toLower(tokenAddress)]][chainID];\n    }\n\n    function getTokenByEVMAddress(address tokenAddress, uint256 chainID) public view returns (Token memory token) {\n        return _tokens[_tokenIDMap[chainID][_toLower(toString(tokenAddress))]][chainID];\n    }\n\n    /**\n     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge\n     * @param tokenID String to check if it is a withdraw/underlying token\n     */\n    function hasUnderlyingToken(string memory tokenID) public view returns (bool) {\n        bytes32 bytesTokenID = toBytes32(tokenID);\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\n            if (_mcTokens[i].hasUnderlying) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Returns which token is the underlying token to withdraw\n     * @param tokenID string token ID\n     */\n    function getUnderlyingToken(string memory tokenID) public view returns (Token memory token) {\n        bytes32 bytesTokenID = toBytes32(tokenID);\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\n            if (_mcTokens[i].isUnderlying) {\n                return _mcTokens[i];\n            }\n        }\n    }\n\n    /**\n     @notice Public function returning if token ID exists given a string\n     */\n    function isTokenIDExist(string memory tokenID) public view returns (bool) {\n        return _isTokenIDExist(toBytes32(tokenID));\n    }\n\n    /**\n     @notice Internal function returning if token ID exists given bytes32 version of the ID\n     */\n    function _isTokenIDExist(bytes32 tokenID) internal view returns (bool) {\n        for (uint256 i = 0; i < _allTokenIDs.length; ++i) {\n            if (_allTokenIDs[i] == tokenID) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Internal function which handles logic of setting token ID and dealing with mappings\n     * @param tokenID bytes32 version of ID\n     * @param chainID which chain to set the token config for\n     * @param tokenToAdd Token object to set the mapping to\n     */\n    function _setTokenConfig(\n        bytes32 tokenID,\n        uint256 chainID,\n        Token memory tokenToAdd\n    ) internal returns (bool) {\n        _tokens[tokenID][chainID] = tokenToAdd;\n        if (!_isTokenIDExist(tokenID)) {\n            _allTokenIDs.push(tokenID);\n        }\n\n        Token[] storage _mcTokens = _allTokens[tokenID];\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\n            if (_mcTokens[i].chainId == chainID) {\n                string memory oldToken = _mcTokens[i].tokenAddress;\n                if (!compareStrings(tokenToAdd.tokenAddress, oldToken)) {\n                    _mcTokens[i].tokenAddress = tokenToAdd.tokenAddress;\n                    _tokenIDMap[chainID][oldToken] = keccak256(\"\");\n                    _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\n                }\n            }\n        }\n        _mcTokens.push(tokenToAdd);\n        _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\n        return true;\n    }\n\n    /**\n     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function\n     * @param tokenID string ID to set the token config object form\n     * @param chainID chain ID to use for the token config object\n     * @param tokenAddress token address of the token on the given chain\n     * @param tokenDecimals decimals of token\n     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals\n     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals\n     * @param swapFee percent based swap fee -- 10e6 == 10bps\n     * @param maxSwapFee max swap fee to be charged - in native token decimals\n     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\n     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()\n     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain\n     */\n    function setTokenConfig(\n        string calldata tokenID,\n        uint256 chainID,\n        address tokenAddress,\n        uint8 tokenDecimals,\n        uint256 maxSwap,\n        uint256 minSwap,\n        uint256 swapFee,\n        uint256 maxSwapFee,\n        uint256 minSwapFee,\n        bool hasUnderlying,\n        bool isUnderlying\n    ) public returns (bool) {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\n        return\n            setTokenConfig(\n                tokenID,\n                chainID,\n                toString(tokenAddress),\n                tokenDecimals,\n                maxSwap,\n                minSwap,\n                swapFee,\n                maxSwapFee,\n                minSwapFee,\n                hasUnderlying,\n                isUnderlying\n            );\n    }\n\n    /**\n     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function\n     * @param tokenID string ID to set the token config object form\n     * @param chainID chain ID to use for the token config object\n     * @param tokenAddress token address of the token on the given chain\n     * @param tokenDecimals decimals of token\n     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals\n     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals\n     * @param swapFee percent based swap fee -- 10e6 == 10bps\n     * @param maxSwapFee max swap fee to be charged - in native token decimals\n     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\n     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()\n     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain\n     */\n    function setTokenConfig(\n        string calldata tokenID,\n        uint256 chainID,\n        string memory tokenAddress,\n        uint8 tokenDecimals,\n        uint256 maxSwap,\n        uint256 minSwap,\n        uint256 swapFee,\n        uint256 maxSwapFee,\n        uint256 minSwapFee,\n        bool hasUnderlying,\n        bool isUnderlying\n    ) public returns (bool) {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\n        Token memory tokenToAdd;\n        tokenToAdd.tokenAddress = _toLower(tokenAddress);\n        tokenToAdd.tokenDecimals = tokenDecimals;\n        tokenToAdd.maxSwap = maxSwap;\n        tokenToAdd.minSwap = minSwap;\n        tokenToAdd.swapFee = swapFee;\n        tokenToAdd.maxSwapFee = maxSwapFee;\n        tokenToAdd.minSwapFee = minSwapFee;\n        tokenToAdd.hasUnderlying = hasUnderlying;\n        tokenToAdd.isUnderlying = isUnderlying;\n        tokenToAdd.chainId = chainID;\n\n        return _setTokenConfig(toBytes32(tokenID), chainID, tokenToAdd);\n    }\n\n    function _calculateSwapFee(\n        string memory tokenAddress,\n        uint256 chainID,\n        uint256 amount\n    ) internal view returns (uint256) {\n        Token memory token = _tokens[_tokenIDMap[chainID][tokenAddress]][chainID];\n        uint256 calculatedSwapFee = amount.mul(token.swapFee).div(FEE_DENOMINATOR);\n        if (calculatedSwapFee > token.minSwapFee && calculatedSwapFee < token.maxSwapFee) {\n            return calculatedSwapFee;\n        } else if (calculatedSwapFee > token.maxSwapFee) {\n            return token.maxSwapFee;\n        } else {\n            return token.minSwapFee;\n        }\n    }\n\n    /**\n     * @notice Calculates bridge swap fee based on the destination chain's token transfer.\n     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on\n     * @param tokenAddress address of the destination token to query token config for\n     * @param chainID destination chain ID to query the token config for\n     * @param amount in native token decimals\n     * @return Fee calculated in token decimals\n     */\n    function calculateSwapFee(\n        string memory tokenAddress,\n        uint256 chainID,\n        uint256 amount\n    ) external view returns (uint256) {\n        return _calculateSwapFee(_toLower(tokenAddress), chainID, amount);\n    }\n\n    /**\n     * @notice Calculates bridge swap fee based on the destination chain's token transfer.\n     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on\n     * @param tokenAddress address of the destination token to query token config for\n     * @param chainID destination chain ID to query the token config for\n     * @param amount in native token decimals\n     * @return Fee calculated in token decimals\n     */\n    function calculateSwapFee(\n        address tokenAddress,\n        uint256 chainID,\n        uint256 amount\n    ) external view returns (uint256) {\n        return _calculateSwapFee(_toLower(toString(tokenAddress)), chainID, amount);\n    }\n\n    // GAS PRICING\n\n    /**\n     * @notice sets the max gas price for a chain\n     */\n    function setMaxGasPrice(uint256 chainID, uint256 maxPrice) public {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\n        _maxGasPrice[chainID] = maxPrice;\n    }\n\n    /**\n     * @notice gets the max gas price for a chain\n     */\n    function getMaxGasPrice(uint256 chainID) public view returns (uint256) {\n        return _maxGasPrice[chainID];\n    }\n\n    // POOL CONFIG\n\n    function getPoolConfig(address tokenAddress, uint256 chainID) external view returns (Pool memory) {\n        return _pool[tokenAddress][chainID];\n    }\n\n    function setPoolConfig(\n        address tokenAddress,\n        uint256 chainID,\n        address poolAddress,\n        bool metaswap\n    ) external returns (Pool memory) {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender), \"Caller is not Bridge Manager\");\n        Pool memory newPool = Pool(tokenAddress, chainID, poolAddress, metaswap);\n        _pool[tokenAddress][chainID] = newPool;\n        return newPool;\n    }\n\n    // UTILITY FUNCTIONS\n\n    function toString(bytes32 data) internal pure returns (string memory) {\n        uint8 i = 0;\n        while (i < 32 && data[i] != 0) {\n            ++i;\n        }\n        bytes memory bs = new bytes(i);\n        for (uint8 j = 0; j < i; ++j) {\n            bs[j] = data[j];\n        }\n        return string(bs);\n    }\n\n    // toBytes32 converts a string to a bytes 32\n    function toBytes32(string memory str) internal pure returns (bytes32 result) {\n        require(bytes(str).length <= 32);\n        assembly {\n            result := mload(add(str, 32))\n        }\n    }\n\n    function toString(address x) internal pure returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint256 i = 0; i < 20; i++) {\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n\n        string memory addrPrefix = \"0x\";\n\n        return concat(addrPrefix, string(s));\n    }\n\n    function concat(string memory _x, string memory _y) internal pure returns (string memory) {\n        bytes memory _xBytes = bytes(_x);\n        bytes memory _yBytes = bytes(_y);\n\n        string memory _tmpValue = new string(_xBytes.length + _yBytes.length);\n        bytes memory _newValue = bytes(_tmpValue);\n\n        uint256 i;\n        uint256 j;\n\n        for (i = 0; i < _xBytes.length; i++) {\n            _newValue[j++] = _xBytes[i];\n        }\n\n        for (i = 0; i < _yBytes.length; i++) {\n            _newValue[j++] = _yBytes[i];\n        }\n\n        return string(_newValue);\n    }\n\n    function char(bytes1 b) internal pure returns (bytes1 c) {\n        if (uint8(b) < 10) {\n            c = bytes1(uint8(b) + 0x30);\n        } else {\n            c = bytes1(uint8(b) + 0x57);\n        }\n    }\n\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    function _toLower(string memory str) internal pure returns (string memory) {\n        bytes memory bStr = bytes(str);\n        bytes memory bLower = new bytes(bStr.length);\n        for (uint256 i = 0; i < bStr.length; i++) {\n            // Uppercase character...\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n                // So we add 32 to make it lowercase\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\n            } else {\n                bLower[i] = bStr[i];\n            }\n        }\n        return string(bLower);\n    }\n}\n"
    },
    "contracts/bridge/ECDSAFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./interfaces/IECDSANodeManagement.sol\";\n\ncontract ECDSAFactory is Ownable {\n    event ECDSANodeGroupCreated(\n        address indexed keepAddress,\n        address[] members,\n        address indexed owner,\n        uint256 honestThreshold\n    );\n\n    struct LatestNodeGroup {\n        address keepAddress;\n        address[] members;\n        address owner;\n        uint256 honestThreshold;\n    }\n\n    LatestNodeGroup public latestNodeGroup;\n\n    constructor() public Ownable() {}\n\n    /// @notice Returns members of the keep.\n    /// @return List of the keep members' addresses.\n    function getMembers() public view returns (address[] memory) {\n        return latestNodeGroup.members;\n    }\n\n    /**\n    @notice Deploys a new node \n    @param nodeMgmtAddress address of the ECDSANodeManagement contract to initialize with\n    @param owner Owner of the  ECDSANodeManagement contract who can determine if the node group is closed or active\n    @param members Array of node group members addresses\n    @param honestThreshold Number of signers to process a transaction \n    @return Address of the newest node management contract created\n    **/\n    function deploy(\n        address nodeMgmtAddress,\n        address owner,\n        address[] memory members,\n        uint256 honestThreshold\n    ) external onlyOwner returns (address) {\n        address nodeClone = Clones.clone(nodeMgmtAddress);\n        IECDSANodeManagement(nodeClone).initialize(owner, members, honestThreshold);\n\n        latestNodeGroup.keepAddress = nodeClone;\n        latestNodeGroup.members = members;\n        latestNodeGroup.owner = owner;\n        latestNodeGroup.honestThreshold = honestThreshold;\n\n        emit ECDSANodeGroupCreated(nodeClone, members, owner, honestThreshold);\n        return nodeClone;\n    }\n}\n"
    },
    "contracts/bridge/ECDSANodeManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./utils/AddressArrayUtils.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract ECDSANodeManagement {\n    using AddressArrayUtils for address[];\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Status of the keep.\n    // Active means the keep is active.\n    // Closed means the keep was closed happily.\n    // Terminated means the keep was closed due to misbehavior.\n    enum Status {\n        Active,\n        Closed,\n        Terminated\n    }\n\n    // Address of the keep's owner.\n    address public owner;\n\n    // List of keep members' addresses.\n    address[] public members;\n\n    // Minimum number of honest keep members required to produce a signature.\n    uint256 public honestThreshold;\n\n    // Keep's ECDSA public key serialized to 64-bytes, where X and Y coordinates\n    // are padded with zeros to 32-byte each.\n    bytes public publicKey;\n\n    // The timestamp at which keep has been created and key generation process\n    // started.\n    uint256 internal keyGenerationStartTimestamp;\n\n    // Map stores public key by member addresses. All members should submit the\n    // same public key.\n    mapping(address => bytes) internal submittedPublicKeys;\n\n    // The current status of the keep.\n    // If the keep is Active members monitor it and support requests from the\n    // keep owner.\n    // If the owner decides to close the keep the flag is set to Closed.\n    // If the owner seizes member bonds the flag is set to Terminated.\n    Status internal status;\n\n    // Flags execution of contract initialization.\n    bool internal isInitialized;\n\n    // Notification that the submitted public key does not match a key submitted\n    // by other member. The event contains address of the member who tried to\n    // submit a public key and a conflicting public key submitted already by other\n    // member.\n    event ConflictingPublicKeySubmitted(address indexed submittingMember, bytes conflictingPublicKey);\n\n    // Notification that keep's ECDSA public key has been successfully established.\n    event PublicKeyPublished(bytes publicKey);\n\n    // Notification that the keep was closed by the owner.\n    // Members no longer need to support this keep.\n    event KeepClosed();\n\n    // Notification that the keep has been terminated by the owner.\n    // Members no longer need to support this keep.\n    event KeepTerminated();\n\n    /// @notice Returns keep's ECDSA public key.\n    /// @return Keep's ECDSA public key.\n    function getPublicKey() external view returns (bytes memory) {\n        return publicKey;\n    }\n\n    /// @notice Submits a public key to the keep.\n    /// @dev Public key is published successfully if all members submit the same\n    /// value. In case of conflicts with others members submissions it will emit\n    /// `ConflictingPublicKeySubmitted` event. When all submitted keys match\n    /// it will store the key as keep's public key and emit a `PublicKeyPublished`\n    /// event.\n    /// @param _publicKey Signer's public key.\n    function submitPublicKey(bytes calldata _publicKey) external onlyMember {\n        require(!hasMemberSubmittedPublicKey(msg.sender), \"Member already submitted a public key\");\n\n        require(_publicKey.length == 64, \"Public key must be 64 bytes long\");\n\n        submittedPublicKeys[msg.sender] = _publicKey;\n\n        // Check if public keys submitted by all keep members are the same as\n        // the currently submitted one.\n        uint256 matchingPublicKeysCount = 0;\n        for (uint256 i = 0; i < members.length; i++) {\n            if (keccak256(submittedPublicKeys[members[i]]) != keccak256(_publicKey)) {\n                // Emit an event only if compared member already submitted a value.\n                if (hasMemberSubmittedPublicKey(members[i])) {\n                    emit ConflictingPublicKeySubmitted(msg.sender, submittedPublicKeys[members[i]]);\n                }\n            } else {\n                matchingPublicKeysCount++;\n            }\n        }\n\n        if (matchingPublicKeysCount != members.length) {\n            return;\n        }\n\n        // All submitted signatures match.\n        publicKey = _publicKey;\n        emit PublicKeyPublished(_publicKey);\n    }\n\n    /// @notice Gets the owner of the keep.\n    /// @return Address of the keep owner.\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n\n    /// @notice Gets the timestamp the keep was opened at.\n    /// @return Timestamp the keep was opened at.\n    function getOpenedTimestamp() external view returns (uint256) {\n        return keyGenerationStartTimestamp;\n    }\n\n    /// @notice Closes keep when owner decides that they no longer need it.\n    /// Releases bonds to the keep members.\n    /// @dev The function can be called only by the owner of the keep and only\n    /// if the keep has not been already closed.\n    function closeKeep() public onlyOwner onlyWhenActive {\n        markAsClosed();\n    }\n\n    /// @notice Returns true if the keep is active.\n    /// @return true if the keep is active, false otherwise.\n    function isActive() public view returns (bool) {\n        return status == Status.Active;\n    }\n\n    /// @notice Returns true if the keep is closed and members no longer support\n    /// this keep.\n    /// @return true if the keep is closed, false otherwise.\n    function isClosed() public view returns (bool) {\n        return status == Status.Closed;\n    }\n\n    /// @notice Returns true if the keep has been terminated.\n    /// Keep is terminated when bonds are seized and members no longer support\n    /// this keep.\n    /// @return true if the keep has been terminated, false otherwise.\n    function isTerminated() public view returns (bool) {\n        return status == Status.Terminated;\n    }\n\n    /// @notice Returns members of the keep.\n    /// @return List of the keep members' addresses.\n    function getMembers() public view returns (address[] memory) {\n        return members;\n    }\n\n    /// @notice Initialization function.\n    /// @dev We use clone factory to create new keep. That is why this contract\n    /// doesn't have a constructor. We provide keep parameters for each instance\n    /// function after cloning instances from the master contract.\n    /// Initialization must happen in the same transaction in which the clone is\n    /// created.\n    /// @param _owner Address of the keep owner.\n    /// @param _members Addresses of the keep members.\n    /// @param _honestThreshold Minimum number of honest keep members.\n    function initialize(\n        address _owner,\n        address[] memory _members,\n        uint256 _honestThreshold\n    ) public {\n        require(!isInitialized, \"Contract already initialized\");\n        require(_owner != address(0));\n        owner = _owner;\n        members = _members;\n        honestThreshold = _honestThreshold;\n\n        status = Status.Active;\n        isInitialized = true;\n\n        /* solium-disable-next-line security/no-block-members*/\n        keyGenerationStartTimestamp = block.timestamp;\n    }\n\n    /// @notice Checks if the member already submitted a public key.\n    /// @param _member Address of the member.\n    /// @return True if member already submitted a public key, else false.\n    function hasMemberSubmittedPublicKey(address _member) internal view returns (bool) {\n        return submittedPublicKeys[_member].length != 0;\n    }\n\n    /// @notice Marks the keep as closed.\n    /// Keep can be marked as closed only when there is no signing in progress\n    /// or the requested signing process has timed out.\n    function markAsClosed() internal {\n        status = Status.Closed;\n        emit KeepClosed();\n    }\n\n    /// @notice Marks the keep as terminated.\n    /// Keep can be marked as terminated only when there is no signing in progress\n    /// or the requested signing process has timed out.\n    function markAsTerminated() internal {\n        status = Status.Terminated;\n        emit KeepTerminated();\n    }\n\n    /// @notice Coverts a public key to an ethereum address.\n    /// @param _publicKey Public key provided as 64-bytes concatenation of\n    /// X and Y coordinates (32-bytes each).\n    /// @return Ethereum address.\n    function publicKeyToAddress(bytes memory _publicKey) internal pure returns (address) {\n        // We hash the public key and then truncate last 20 bytes of the digest\n        // which is the ethereum address.\n        return address(uint160(uint256(keccak256(_publicKey))));\n    }\n\n    /// @notice Terminates the keep.\n    function terminateKeep() internal {\n        markAsTerminated();\n    }\n\n    /// @notice Checks if the caller is the keep's owner.\n    /// @dev Throws an error if called by any account other than owner.\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Caller is not the keep owner\");\n        _;\n    }\n\n    /// @notice Checks if the caller is a keep member.\n    /// @dev Throws an error if called by any account other than one of the members.\n    modifier onlyMember() {\n        require(members.contains(msg.sender), \"Caller is not the keep member\");\n        _;\n    }\n\n    /// @notice Checks if the keep is currently active.\n    /// @dev Throws an error if called when the keep has been already closed.\n    modifier onlyWhenActive() {\n        require(isActive(), \"Keep is not active\");\n        _;\n    }\n}\n"
    },
    "contracts/bridge/ERC20Migrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title ERC20Migrator\n * @dev This contract can be used to migrate an ERC20 token from one\n * contract to another, where each token holder has to opt-in to the migration.\n * To opt-in, users must approve for this contract the number of tokens they\n * want to migrate. Once the allowance is set up, anyone can trigger the\n * migration to the new token contract. In this way, token holders \"turn in\"\n * their old balance and will be minted an equal amount in the new token.\n * The new token contract must be mintable.\n * ```\n */\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract ERC20Migrator {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // Address of the old token contract\n    IERC20 private _legacyToken;\n\n    // Address of the new token contract\n    IERC20Mintable private _newToken;\n\n    /**\n     * @param legacyToken address of the old token contract\n     */\n    constructor(IERC20 legacyToken, IERC20Mintable newToken) public {\n        _legacyToken = legacyToken;\n        _newToken = newToken;\n    }\n\n    /**\n     * @dev Returns the legacy token that is being migrated.\n     */\n    function legacyToken() external view returns (IERC20) {\n        return _legacyToken;\n    }\n\n    /**\n     * @dev Returns the new token to which we are migrating.\n     */\n    function newToken() external view returns (IERC20) {\n        return _newToken;\n    }\n\n    /**\n     * @dev Transfers part of an account's balance in the old token to this\n     * contract, and mints the same amount of new tokens for that account.\n     * @param amount amount of tokens to be migrated\n     */\n    function migrate(uint256 amount) external {\n        _legacyToken.safeTransferFrom(msg.sender, address(this), amount);\n        uint256 amountToMint = amount.mul(5).div(2);\n        _newToken.mint(msg.sender, amountToMint);\n    }\n}\n"
    },
    "contracts/bridge/HarmonySynapseBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/ISwap.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IFrax {\n    function exchangeOldForCanonical(address bridge_token_address, uint256 token_amount) external returns (uint256);\n}\n\ncontract HarmonySynapseBridge is\n    Initializable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n    using SafeMath for uint256;\n\n    bytes32 public constant NODEGROUP_ROLE = keccak256(\"NODEGROUP_ROLE\");\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n\n    mapping(address => uint256) private fees;\n\n    uint256 public startBlockNumber;\n    uint256 public constant bridgeVersion = 6;\n    uint256 public chainGasAmount;\n    address payable public WETH_ADDRESS;\n\n    mapping(bytes32 => bool) private kappaMap;\n\n    receive() external payable {}\n\n    function initialize() external initializer {\n        startBlockNumber = block.number;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        __AccessControl_init();\n    }\n\n    function setChainGasAmount(uint256 amount) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        chainGasAmount = amount;\n    }\n\n    function setWethAddress(address payable _wethAddress) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not admin\");\n        WETH_ADDRESS = _wethAddress;\n    }\n\n    function addKappas(bytes32[] calldata kappas) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        for (uint256 i = 0; i < kappas.length; ++i) {\n            kappaMap[kappas[i]] = true;\n        }\n    }\n\n    event TokenDeposit(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenRedeem(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenWithdraw(address indexed to, IERC20 token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenMint(address indexed to, IERC20Mintable token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenDepositAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenMintAndSwap(\n        address indexed to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n    event TokenRedeemAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenRedeemAndRemove(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    );\n    event TokenWithdrawAndRemove(\n        address indexed to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n\n    // v2 events\n    event TokenRedeemV2(bytes32 indexed to, uint256 chainId, IERC20 token, uint256 amount);\n\n    // VIEW FUNCTIONS ***/\n    function getFeeBalance(address tokenAddress) external view returns (uint256) {\n        return fees[tokenAddress];\n    }\n\n    function kappaExists(bytes32 kappa) external view returns (bool) {\n        return kappaMap[kappa];\n    }\n\n    // FEE FUNCTIONS ***/\n    /**\n     * * @notice withdraw specified ERC20 token fees to a given address\n     * * @param token ERC20 token in which fees acccumulated to transfer\n     * * @param to Address to send the fees to\n     */\n    function withdrawFees(IERC20 token, address to) external whenNotPaused {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        require(to != address(0), \"Address is 0x000\");\n        if (fees[address(token)] != 0) {\n            token.safeTransfer(to, fees[address(token)]);\n            fees[address(token)] = 0;\n        }\n    }\n\n    // PAUSABLE FUNCTIONS ***/\n    function pause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _pause();\n    }\n\n    function unpause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _unpause();\n    }\n\n    /**\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenDeposit(to, chainId, token, amount);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeem(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function withdraw(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n            IWETH9(WETH_ADDRESS).withdraw(amount.sub(fee));\n            (bool success, ) = to.call{value: amount.sub(fee)}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n        } else {\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n            token.safeTransfer(to, amount.sub(fee));\n        }\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.\n     * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function mint(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        emit TokenMint(to, token, amount.sub(fee), fee, kappa);\n        token.mint(address(this), amount);\n        // checks if synFRAX\n        if (address(token) == 0x1852F70512298d56e9c8FDd905e02581E04ddb2a) {\n            if (token.allowance(address(this), 0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200) < amount.sub(fee)) {\n                token.safeApprove(address(0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200), 0);\n                token.safeApprove(address(0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200), type(uint256).max);\n            }\n            try\n                IFrax(0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200).exchangeOldForCanonical(\n                    address(token),\n                    amount.sub(fee)\n                )\n            returns (uint256 canolical_tokens_out) {\n                IERC20(0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200).safeTransfer(to, canolical_tokens_out);\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n            }\n        } else {\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n        }\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n    }\n\n    /**\n     * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenDepositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndRemove(to, chainId, token, amount, swapTokenIndex, swapMinAmount, swapDeadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\n     * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param tokenIndexFrom Index of the SynERC20 asset in the pool\n     * @param tokenIndexTo Index of the desired final asset\n     * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\n     * @param deadline Epoch time of the deadline that the swap is allowed to be executed.\n     * @param kappa kappa\n     **/\n    function mintAndSwap(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // Transfer gas airdrop\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amount.sub(fee));\n\n        if (expectedOutput >= minDy) {\n            // proceed with swap\n            token.mint(address(this), amount);\n            token.safeIncreaseAllowance(address(pool), amount);\n            try ISwap(pool).swap(tokenIndexFrom, tokenIndexTo, amount.sub(fee), minDy, deadline) returns (\n                uint256 finalSwappedAmount\n            ) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);\n                if (address(swappedTokenTo) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n                    IWETH9(WETH_ADDRESS).withdraw(finalSwappedAmount);\n                    (bool success, ) = to.call{value: finalSwappedAmount}(\"\");\n                    require(success, \"ETH_TRANSFER_FAILED\");\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                } else {\n                    swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                }\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenMintAndSwap(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    tokenIndexFrom,\n                    tokenIndexTo,\n                    minDy,\n                    deadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.mint(address(this), amount);\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n            emit TokenMintAndSwap(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                tokenIndexFrom,\n                tokenIndexTo,\n                minDy,\n                deadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     * @param kappa kappa\n     **/\n    function withdrawAndRemove(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(amount.sub(fee), swapTokenIndex);\n\n        if (expectedOutput >= swapMinAmount) {\n            token.safeIncreaseAllowance(address(pool), amount.sub(fee));\n            try\n                ISwap(pool).removeLiquidityOneToken(amount.sub(fee), swapTokenIndex, swapMinAmount, swapDeadline)\n            returns (uint256 finalSwappedAmount) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);\n                swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    finalSwappedAmount,\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    true,\n                    kappa\n                );\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.safeTransfer(to, amount.sub(fee));\n            emit TokenWithdrawAndRemove(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                swapTokenIndex,\n                swapMinAmount,\n                swapDeadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    // BRIDGE FUNCTIONS TO HANDLE DIFF ADDRESSES\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemV2(\n        bytes32 to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemV2(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/bridge/interfaces/IECDSANodeManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @title IECDSANodeManagement interface\n * @notice Interface for the ECDSA node management interface.\n * @dev implement this interface to develop a a factory-patterned ECDSA node management contract\n **/\ninterface IECDSANodeManagement {\n    function initialize(\n        address _owner,\n        address[] memory _members,\n        uint256 _honestThreshold\n    ) external;\n}\n"
    },
    "contracts/bridge/interfaces/IERC20Migrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IERC20Migrator {\n    function migrate(uint256 amount) external;\n}\n"
    },
    "contracts/bridge/interfaces/IMetaSwapDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title IMetaSwapDeposit interface\n * @notice Interface for the meta swap contract.\n * @dev implement this interface to develop a a factory-patterned ECDSA node management contract\n **/\ninterface IMetaSwapDeposit {\n    // min return calculation functions\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function getToken(uint256 index) external view returns (IERC20);\n}\n"
    },
    "contracts/bridge/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface ISwap {\n    // pool data view functions\n    function getA() external view returns (uint256);\n\n    function getAPrecise() external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (IERC20);\n\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function swapStorage()\n        external\n        view\n        returns (\n            uint256 initialA,\n            uint256 futureA,\n            uint256 initialATime,\n            uint256 futureATime,\n            uint256 swapFee,\n            uint256 adminFee,\n            address lpToken\n        );\n\n    // min return calculation functions\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\n\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\n\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\n        external\n        view\n        returns (uint256 availableTokenAmount);\n\n    // state modifying functions\n    function initialize(\n        IERC20[] memory pooledTokens,\n        uint8[] memory decimals,\n        string memory lpTokenName,\n        string memory lpTokenSymbol,\n        uint256 a,\n        uint256 fee,\n        uint256 adminFee,\n        address lpTokenTargetAddress\n    ) external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidity(\n        uint256 amount,\n        uint256[] calldata minAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function removeLiquidityImbalance(\n        uint256[] calldata amounts,\n        uint256 maxBurnAmount,\n        uint256 deadline\n    ) external returns (uint256);\n}\n"
    },
    "contracts/bridge/interfaces/ISwapAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"../libraries/BridgeStructs.sol\";\n\ninterface ISwapAdapter {\n    /**\n     * @notice Performs a tokenIn -> tokenOut swap, according to the provided params.\n     * If tokenIn is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\n     * If tokenIn is ERC20, the tokens should be already transferred to this contract (using `msg.value = 0`).\n     * If tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\n     * If tokenOut is ERC20, the tokens will be transferred to the recipient.\n     * @dev Contracts implementing {ISwapAdapter} interface are required to enforce the above restrictions.\n     * On top of that, they must ensure that exactly `amountOut` worth of `tokenOut` is transferred to the recipient.\n     * Swap deadline and slippage is checked outside of this contract.\n     * @param to            Address to receive the swapped token\n     * @param tokenIn       Token to sell (use ETH_ADDRESS to start from native ETH)\n     * @param amountIn      Amount of tokens to sell\n     * @param tokenOut      Token to buy (use ETH_ADDRESS to end with native ETH)\n     * @param rawParams     Additional swap parameters\n     * @return amountOut    Amount of bought tokens\n     */\n    function adapterSwap(\n        address to,\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        bytes calldata rawParams\n    ) external payable returns (uint256);\n}\n"
    },
    "contracts/bridge/interfaces/ISwapQuoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libraries/BridgeStructs.sol\";\n\ninterface ISwapQuoter {\n    function findConnectedTokens(LimitedToken[] memory tokensIn, address tokenOut)\n        external\n        view\n        returns (uint256 amountFound, bool[] memory isConnected);\n\n    function getAmountOut(\n        LimitedToken memory tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view returns (SwapQuery memory query);\n\n    function allPools() external view returns (Pool[] memory pools);\n\n    function poolsAmount() external view returns (uint256 tokens);\n\n    function poolInfo(address pool) external view returns (uint256 tokens, address lpToken);\n\n    function poolTokens(address pool) external view returns (PoolToken[] memory tokens);\n\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256 amountOut);\n\n    function calculateSwap(\n        address pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256 amountOut);\n\n    function calculateRemoveLiquidity(address pool, uint256 amount) external view returns (uint256[] memory amountsOut);\n\n    function calculateWithdrawOneToken(\n        address pool,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/bridge/interfaces/ISynapseBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\ninterface ISynapseBridge {\n    using SafeERC20 for IERC20;\n\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external;\n\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external;\n\n    function redeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external;\n\n    function redeemv2(\n        bytes32 to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external;\n\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external;\n\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external;\n}\n"
    },
    "contracts/bridge/interfaces/ISynapseERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ISynapseERC20 {\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        address owner\n    ) external;\n\n    function mint(address to, uint256 amount) external;\n}\n"
    },
    "contracts/bridge/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\ninterface IWETH9 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    receive() external payable;\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n}\n"
    },
    "contracts/bridge/KlaytnSynapseBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/ISwap.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IWKlayUnwrapper {\n    function withdraw(uint256 amount) external;\n}\n\ncontract KlaytnSynapseBridge is\n    Initializable,\n    AccessControlUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n    using SafeMath for uint256;\n\n    bytes32 public constant NODEGROUP_ROLE = keccak256(\"NODEGROUP_ROLE\");\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    IWKlayUnwrapper internal immutable UNWRAPPER;\n\n    mapping(address => uint256) private fees;\n\n    uint256 public startBlockNumber;\n    uint256 public constant bridgeVersion = 7;\n    uint256 public chainGasAmount;\n    address payable public WETH_ADDRESS;\n\n    mapping(bytes32 => bool) private kappaMap;\n\n    constructor(IWKlayUnwrapper unwrapper) public {\n        UNWRAPPER = unwrapper;\n    }\n\n    receive() external payable {}\n\n    function initialize() external initializer {\n        startBlockNumber = block.number;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        __AccessControl_init();\n    }\n\n    function setChainGasAmount(uint256 amount) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        chainGasAmount = amount;\n    }\n\n    function setWethAddress(address payable _wethAddress) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not admin\");\n        WETH_ADDRESS = _wethAddress;\n    }\n\n    function addKappas(bytes32[] calldata kappas) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        for (uint256 i = 0; i < kappas.length; ++i) {\n            kappaMap[kappas[i]] = true;\n        }\n    }\n\n    event TokenDeposit(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenRedeem(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenWithdraw(address indexed to, IERC20 token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenMint(address indexed to, IERC20Mintable token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenDepositAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenMintAndSwap(\n        address indexed to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n    event TokenRedeemAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenRedeemAndRemove(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    );\n    event TokenWithdrawAndRemove(\n        address indexed to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n\n    // v2 events\n    event TokenRedeemV2(bytes32 indexed to, uint256 chainId, IERC20 token, uint256 amount);\n\n    // VIEW FUNCTIONS ***/\n    function getFeeBalance(address tokenAddress) external view returns (uint256) {\n        return fees[tokenAddress];\n    }\n\n    function kappaExists(bytes32 kappa) external view returns (bool) {\n        return kappaMap[kappa];\n    }\n\n    // FEE FUNCTIONS ***/\n    /**\n     * * @notice withdraw specified ERC20 token fees to a given address\n     * * @param token ERC20 token in which fees acccumulated to transfer\n     * * @param to Address to send the fees to\n     */\n    function withdrawFees(IERC20 token, address to) external whenNotPaused {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        require(to != address(0), \"Address is 0x000\");\n        if (fees[address(token)] != 0) {\n            token.safeTransfer(to, fees[address(token)]);\n            fees[address(token)] = 0;\n        }\n    }\n\n    // PAUSABLE FUNCTIONS ***/\n    function pause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _pause();\n    }\n\n    function unpause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _unpause();\n    }\n\n    /**\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenDeposit(to, chainId, token, amount);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeem(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function withdraw(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n            token.safeTransfer(address(UNWRAPPER), amount.sub(fee));\n            UNWRAPPER.withdraw(amount.sub(fee));\n            (bool success, ) = to.call{value: amount.sub(fee)}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n        } else {\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n            token.safeTransfer(to, amount.sub(fee));\n        }\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.\n     * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function mint(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        emit TokenMint(to, token, amount.sub(fee), fee, kappa);\n        token.mint(address(this), amount);\n        IERC20(token).safeTransfer(to, amount.sub(fee));\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n    }\n\n    /**\n     * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenDepositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndRemove(to, chainId, token, amount, swapTokenIndex, swapMinAmount, swapDeadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\n     * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param tokenIndexFrom Index of the SynERC20 asset in the pool\n     * @param tokenIndexTo Index of the desired final asset\n     * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\n     * @param deadline Epoch time of the deadline that the swap is allowed to be executed.\n     * @param kappa kappa\n     **/\n    function mintAndSwap(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // Transfer gas airdrop\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amount.sub(fee));\n\n        if (expectedOutput >= minDy) {\n            // proceed with swap\n            token.mint(address(this), amount);\n            token.safeIncreaseAllowance(address(pool), amount);\n            try ISwap(pool).swap(tokenIndexFrom, tokenIndexTo, amount.sub(fee), minDy, deadline) returns (\n                uint256 finalSwappedAmount\n            ) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);\n                if (address(swappedTokenTo) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n                    swappedTokenTo.safeTransfer(address(UNWRAPPER), finalSwappedAmount);\n                    UNWRAPPER.withdraw(finalSwappedAmount);\n                    (bool success, ) = to.call{value: finalSwappedAmount}(\"\");\n                    require(success, \"ETH_TRANSFER_FAILED\");\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                } else {\n                    swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                }\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenMintAndSwap(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    tokenIndexFrom,\n                    tokenIndexTo,\n                    minDy,\n                    deadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.mint(address(this), amount);\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n            emit TokenMintAndSwap(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                tokenIndexFrom,\n                tokenIndexTo,\n                minDy,\n                deadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     * @param kappa kappa\n     **/\n    function withdrawAndRemove(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(amount.sub(fee), swapTokenIndex);\n\n        if (expectedOutput >= swapMinAmount) {\n            token.safeIncreaseAllowance(address(pool), amount.sub(fee));\n            try\n                ISwap(pool).removeLiquidityOneToken(amount.sub(fee), swapTokenIndex, swapMinAmount, swapDeadline)\n            returns (uint256 finalSwappedAmount) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);\n                swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    finalSwappedAmount,\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    true,\n                    kappa\n                );\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.safeTransfer(to, amount.sub(fee));\n            emit TokenWithdrawAndRemove(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                swapTokenIndex,\n                swapMinAmount,\n                swapDeadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    // BRIDGE FUNCTIONS TO HANDLE DIFF ADDRESSES\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemV2(\n        bytes32 to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemV2(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/bridge/libraries/BridgeStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n/// @notice Struct representing a request for SynapseRouter.\n/// @dev tokenIn is supplied separately.\n/// @param swapAdapter      Adapter address that will perform the swap. Address(0) specifies a \"no swap\" query.\n/// @param tokenOut         Token address to swap to.\n/// @param minAmountOut     Minimum amount of tokens to receive after the swap, or tx will be reverted.\n/// @param deadline         Latest timestamp for when the transaction needs to be executed, or tx will be reverted.\n/// @param rawParams        ABI-encoded params for the swap that will be passed to `swapAdapter`.\n///                         Should be SynapseParams for swaps via SynapseAdapter.\nstruct SwapQuery {\n    address swapAdapter;\n    address tokenOut;\n    uint256 minAmountOut;\n    uint256 deadline;\n    bytes rawParams;\n}\n\n/// @notice Struct representing parameters for swapping via SynapseAdapter.\n/// @param action           Action that SynapseAdapter needs to perform.\n/// @param pool             Liquidity pool that will be used for Swap/AddLiquidity/RemoveLiquidity actions.\n/// @param tokenIndexFrom   Token index to swap from. Used for swap/addLiquidity actions.\n/// @param tokenIndexTo     Token index to swap to. Used for swap/removeLiquidity actions.\nstruct SynapseParams {\n    Action action;\n    address pool;\n    uint8 tokenIndexFrom;\n    uint8 tokenIndexTo;\n}\n\n/// @notice All possible actions that SynapseAdapter could perform.\nenum Action {\n    Swap, // swap between two pools tokens\n    AddLiquidity, // add liquidity in a form of a single pool token\n    RemoveLiquidity, // remove liquidity in a form of a single pool token\n    HandleEth // ETH <> WETH interaction\n}\n\n/// @notice Struct representing a token, and the available Actions for performing a swap.\n/// @param actionMask   Bitmask representing what actions (see ActionLib) are available for swapping a token\n/// @param token        Token address\nstruct LimitedToken {\n    uint256 actionMask;\n    address token;\n}\n\n/// @notice Struct representing a bridge token. Used as the return value in view functions.\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\n/// @param token    Bridge token address\nstruct BridgeToken {\n    string symbol;\n    address token;\n}\n\n/// @notice Struct representing how pool tokens are stored by `SwapQuoter`.\n/// @param isWeth   Whether the token represents Wrapped ETH.\n/// @param token    Token address.\nstruct PoolToken {\n    bool isWeth;\n    address token;\n}\n\n/// @notice Struct representing a request for a swap quote from a bridge token.\n/// @dev tokenOut is passed externally\n/// @param symbol   Bridge token symbol: unique token ID consistent among all chains\n/// @param amountIn Amount of bridge token to start with, before the bridge fee is applied\nstruct DestRequest {\n    string symbol;\n    uint256 amountIn;\n}\n\n/// @notice Struct representing a liquidity pool. Used as the return value in view functions.\n/// @param pool         Pool address.\n/// @param lpToken      Address of pool's LP token.\n/// @param tokens       List of pool's tokens.\nstruct Pool {\n    address pool;\n    address lpToken;\n    PoolToken[] tokens;\n}\n\n/// @notice Library for dealing with bit masks, describing what Actions are available.\nlibrary ActionLib {\n    /// @notice Returns a bitmask with all possible actions set to True.\n    function allActions() internal pure returns (uint256 actionMask) {\n        actionMask = type(uint256).max;\n    }\n\n    /// @notice Returns whether the given action is set to True in the bitmask.\n    function includes(uint256 actionMask, Action action) internal pure returns (bool) {\n        return actionMask & mask(action) != 0;\n    }\n\n    /// @notice Returns a bitmask with only the given action set to True.\n    function mask(Action action) internal pure returns (uint256) {\n        return 1 << uint256(action);\n    }\n\n    /// @notice Returns a bitmask with only two given actions set to True.\n    function mask(Action a, Action b) internal pure returns (uint256) {\n        return mask(a) | mask(b);\n    }\n}\n"
    },
    "contracts/bridge/libraries/UniversalToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./BridgeStructs.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/**\n * Library to unify handling of ETH/WETH and ERC20 tokens.\n */\nlibrary UniversalToken {\n    using SafeERC20 for IERC20;\n\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 private constant MAX_UINT = type(uint256).max;\n\n    /// @notice Returns token balance for the given account.\n    function universalBalanceOf(address token, address account) internal view returns (uint256) {\n        if (token == ETH_ADDRESS) {\n            return account.balance;\n        } else {\n            return IERC20(token).balanceOf(account);\n        }\n    }\n\n    /// @notice Compares two tokens. ETH_ADDRESS and WETH are deemed equal.\n    function universalEquals(address token, PoolToken memory poolToken) internal pure returns (bool) {\n        if (token == ETH_ADDRESS) {\n            return poolToken.isWeth;\n        } else {\n            return token == poolToken.token;\n        }\n    }\n\n    function universalApproveInfinity(address token, address spender) internal {\n        // ETH Chad doesn't require your approval\n        if (token == ETH_ADDRESS) return;\n        // No need to approve own tokens\n        if (spender == address(this)) return;\n        uint256 allowance = IERC20(token).allowance(address(this), spender);\n        // Set allowance to MAX_UINT if needed\n        if (allowance != MAX_UINT) {\n            // if allowance is neither zero nor infinity, reset if first\n            if (allowance != 0) {\n                IERC20(token).safeApprove(spender, 0);\n            }\n            IERC20(token).safeApprove(spender, MAX_UINT);\n        }\n    }\n\n    /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n    /// @dev This might trigger fallback, if ETH is transferred to the contract.\n    /// Make sure this can not lead to reentrancy attacks.\n    function universalTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // Don't do anything, if need to send tokens to this address\n        if (to == address(this)) return;\n        if (token == ETH_ADDRESS) {\n            /// @dev Note: this can potentially lead to executing code in `to`.\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = to.call{value: value}(\"\");\n            require(success, \"ETH transfer failed\");\n        } else {\n            IERC20(token).safeTransfer(to, value);\n        }\n    }\n}\n"
    },
    "contracts/bridge/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) public ERC20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/bridge/MoonriverSynapseBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/ISwap.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ninterface IFrax {\n    function exchangeOldForCanonical(address bridge_token_address, uint256 token_amount) external returns (uint256);\n}\n\ncontract MRSynapseBridge is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n    using SafeMath for uint256;\n\n    bytes32 public constant NODEGROUP_ROLE = keccak256(\"NODEGROUP_ROLE\");\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n\n    mapping(address => uint256) private fees;\n\n    uint256 public startBlockNumber;\n    uint256 public constant bridgeVersion = 6;\n    uint256 public chainGasAmount;\n    address payable public WETH_ADDRESS;\n\n    mapping(bytes32 => bool) private kappaMap;\n\n    receive() external payable {}\n\n    function initialize() external initializer {\n        startBlockNumber = block.number;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        __AccessControl_init();\n    }\n\n    function setChainGasAmount(uint256 amount) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        chainGasAmount = amount;\n    }\n\n    function setWethAddress(address payable _wethAddress) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not admin\");\n        WETH_ADDRESS = _wethAddress;\n    }\n\n    function addKappas(bytes32[] calldata kappas) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        for (uint256 i = 0; i < kappas.length; ++i) {\n            kappaMap[kappas[i]] = true;\n        }\n    }\n\n    event TokenDeposit(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenRedeem(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenWithdraw(address indexed to, IERC20 token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenMint(address indexed to, IERC20Mintable token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenDepositAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenMintAndSwap(\n        address indexed to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n    event TokenRedeemAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenRedeemAndRemove(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    );\n    event TokenWithdrawAndRemove(\n        address indexed to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n\n    // v2 events\n    event TokenRedeemV2(bytes32 indexed to, uint256 chainId, IERC20 token, uint256 amount);\n\n    // VIEW FUNCTIONS ***/\n    function getFeeBalance(address tokenAddress) external view returns (uint256) {\n        return fees[tokenAddress];\n    }\n\n    function kappaExists(bytes32 kappa) external view returns (bool) {\n        return kappaMap[kappa];\n    }\n\n    // FEE FUNCTIONS ***/\n    /**\n     * * @notice withdraw specified ERC20 token fees to a given address\n     * * @param token ERC20 token in which fees acccumulated to transfer\n     * * @param to Address to send the fees to\n     */\n    function withdrawFees(IERC20 token, address to) external whenNotPaused {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        require(to != address(0), \"Address is 0x000\");\n        if (fees[address(token)] != 0) {\n            token.safeTransfer(to, fees[address(token)]);\n            fees[address(token)] = 0;\n        }\n    }\n\n    // PAUSABLE FUNCTIONS ***/\n    function pause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _pause();\n    }\n\n    function unpause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _unpause();\n    }\n\n    /**\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenDeposit(to, chainId, token, amount);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeem(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function withdraw(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n            IWETH9(WETH_ADDRESS).withdraw(amount.sub(fee));\n            (bool success, ) = to.call{value: amount.sub(fee)}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n        } else {\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n            token.safeTransfer(to, amount.sub(fee));\n        }\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.\n     * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function mint(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        emit TokenMint(to, token, amount.sub(fee), fee, kappa);\n        token.mint(address(this), amount);\n        // checks if synFRAX\n        if (address(token) == 0xE96AC70907ffF3Efee79f502C985A7A21Bce407d) {\n            token.safeIncreaseAllowance(0x1A93B23281CC1CDE4C4741353F3064709A16197d, amount.sub(fee));\n            try\n                IFrax(0x1A93B23281CC1CDE4C4741353F3064709A16197d).exchangeOldForCanonical(\n                    address(token),\n                    amount.sub(fee)\n                )\n            returns (uint256 canolical_tokens_out) {\n                IERC20(0x1A93B23281CC1CDE4C4741353F3064709A16197d).safeTransfer(to, canolical_tokens_out);\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n            }\n        } else {\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n        }\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n    }\n\n    /**\n     * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenDepositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndRemove(to, chainId, token, amount, swapTokenIndex, swapMinAmount, swapDeadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\n     * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param tokenIndexFrom Index of the SynERC20 asset in the pool\n     * @param tokenIndexTo Index of the desired final asset\n     * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\n     * @param deadline Epoch time of the deadline that the swap is allowed to be executed.\n     * @param kappa kappa\n     **/\n    function mintAndSwap(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // Transfer gas airdrop\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amount.sub(fee));\n\n        if (expectedOutput >= minDy) {\n            // proceed with swap\n            token.mint(address(this), amount);\n            token.safeIncreaseAllowance(address(pool), amount);\n            try ISwap(pool).swap(tokenIndexFrom, tokenIndexTo, amount.sub(fee), minDy, deadline) returns (\n                uint256 finalSwappedAmount\n            ) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);\n                if (address(swappedTokenTo) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n                    IWETH9(WETH_ADDRESS).withdraw(finalSwappedAmount);\n                    (bool success, ) = to.call{value: finalSwappedAmount}(\"\");\n                    require(success, \"ETH_TRANSFER_FAILED\");\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                } else {\n                    swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                }\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenMintAndSwap(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    tokenIndexFrom,\n                    tokenIndexTo,\n                    minDy,\n                    deadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.mint(address(this), amount);\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n            emit TokenMintAndSwap(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                tokenIndexFrom,\n                tokenIndexTo,\n                minDy,\n                deadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     * @param kappa kappa\n     **/\n    function withdrawAndRemove(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(amount.sub(fee), swapTokenIndex);\n\n        if (expectedOutput >= swapMinAmount) {\n            token.safeIncreaseAllowance(address(pool), amount.sub(fee));\n            try\n                ISwap(pool).removeLiquidityOneToken(amount.sub(fee), swapTokenIndex, swapMinAmount, swapDeadline)\n            returns (uint256 finalSwappedAmount) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);\n                swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    finalSwappedAmount,\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    true,\n                    kappa\n                );\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.safeTransfer(to, amount.sub(fee));\n            emit TokenWithdrawAndRemove(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                swapTokenIndex,\n                swapMinAmount,\n                swapDeadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    // BRIDGE FUNCTIONS TO HANDLE DIFF ADDRESSES\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemV2(\n        bytes32 to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemV2(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/bridge/PoolConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract PoolConfig is AccessControl {\n    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256(\"BRIDGEMANAGER_ROLE\");\n    mapping(address => mapping(uint256 => Pool)) private _pool; // key is tokenAddress,chainID\n\n    struct Pool {\n        address tokenAddress;\n        uint256 chainId;\n        address poolAddress;\n        bool metaswap;\n    }\n\n    constructor() public {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(BRIDGEMANAGER_ROLE, msg.sender);\n    }\n\n    function getPoolConfig(address tokenAddress, uint256 chainID) external view returns (Pool memory) {\n        return _pool[tokenAddress][chainID];\n    }\n\n    function setPoolConfig(\n        address tokenAddress,\n        uint256 chainID,\n        address poolAddress,\n        bool metaswap\n    ) external returns (Pool memory) {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender), \"Caller is not Bridge Manager\");\n        Pool memory newPool = Pool(tokenAddress, chainID, poolAddress, metaswap);\n        _pool[tokenAddress][chainID] = newPool;\n        return newPool;\n    }\n}\n"
    },
    "contracts/bridge/router/LocalBridgeConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nabstract contract LocalBridgeConfig is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeMath for uint256;\n\n    /**\n     * @notice Indicates the type of the supported bridge token on the local chain.\n     * - TokenType.Redeem: token is burnt in order to initiate a bridge tx (bridge.redeem)\n     * - TokenType.Deposit: token is locked in order to initiate a bridge tx (bridge.deposit)\n     */\n    enum TokenType {\n        Redeem,\n        Deposit\n    }\n\n    /**\n     * @notice Config for a supported bridge token.\n     * @dev Some of the tokens require a wrapper token to make them conform SynapseERC20 interface.\n     * In these cases, `bridgeToken` will feature a different address.\n     * Otherwise, the token address is saved.\n     * @param tokenType     Method of bridging for the token: Redeem or Deposit\n     * @param bridgeToken   Bridge token address\n     */\n    struct TokenConfig {\n        TokenType tokenType;\n        address bridgeToken;\n    }\n\n    /**\n     * @notice Fee structure for a supported bridge token, optimized to fit in a single storage word.\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\n     */\n    struct FeeStructure {\n        uint40 bridgeFee;\n        uint104 minFee;\n        uint112 maxFee;\n    }\n\n    /**\n     * @notice Struct defining a supported bridge token. This is not supposed to be stored on-chain,\n     * so this is not optimized in terms of storage words.\n     * @param id            ID for token used in BridgeConfigV3\n     * @param token         \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @param decimals      Amount ot decimals used for `token`\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\n     */\n    struct BridgeTokenConfig {\n        string id;\n        address token;\n        uint256 decimals;\n        LocalBridgeConfig.TokenType tokenType;\n        address bridgeToken;\n        uint256 bridgeFee;\n        uint256 minFee;\n        uint256 maxFee;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              CONSTANTS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Denominator used to calculate the bridge fee: amount.mul(bridgeFee).div(FEE_DENOMINATOR)\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Config for each supported token.\n    /// @dev If wrapper token is required for bridging, its address is stored in `.bridgeToken`\n    /// i.e. for GMX: config[GMX].bridgeToken = GMXWrapper\n    mapping(address => TokenConfig) public config;\n    /// @notice Fee structure for each supported token.\n    /// @dev If wrapper token is required for bridging, its underlying is used as key here\n    mapping(address => FeeStructure) public fee;\n    /// @notice Maps bridge token address into bridge token symbol\n    mapping(address => string) public tokenToSymbol;\n    /// @notice Maps bridge token symbol into bridge token address\n    mapping(string => address) public symbolToToken;\n    /// @dev A list of all supported bridge tokens\n    EnumerableSet.AddressSet internal _bridgeTokens;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              ONLY OWNER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Adds a bridge token and its fee structure to the local config, if it was not added before.\n     * @param token         \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\n     * @return wasAdded     True, if token was added to the config\n     */\n    function addToken(\n        string memory symbol,\n        address token,\n        TokenType tokenType,\n        address bridgeToken,\n        uint256 bridgeFee,\n        uint256 minFee,\n        uint256 maxFee\n    ) external onlyOwner returns (bool wasAdded) {\n        wasAdded = _addToken(symbol, token, tokenType, bridgeToken, bridgeFee, minFee, maxFee);\n    }\n\n    /// @notice Adds a bunch of bridge tokens and their fee structure to the local config, if it was not added before.\n    function addTokens(BridgeTokenConfig[] memory tokens) external onlyOwner {\n        uint256 amount = tokens.length;\n        for (uint256 i = 0; i < amount; ++i) {\n            BridgeTokenConfig memory token = tokens[i];\n            _addToken(\n                token.id,\n                token.token,\n                token.tokenType,\n                token.bridgeToken,\n                token.bridgeFee,\n                token.minFee,\n                token.maxFee\n            );\n        }\n    }\n\n    /**\n     * @notice Updates the bridge config for an already added bridge token.\n     * @dev Will revert if token was not added before.\n     * @param token         \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @param tokenType     Method of bridging used for the token: Redeem or Deposit.\n     * @param bridgeToken   Actual token used for bridging `token`. This is the token bridge is burning/locking.\n     *                      Might differ from `token`, if `token` does not conform to bridge-supported interface.\n     */\n    function setTokenConfig(\n        address token,\n        TokenType tokenType,\n        address bridgeToken\n    ) external onlyOwner {\n        require(config[token].bridgeToken != address(0), \"Unknown token\");\n        _setTokenConfig(token, tokenType, bridgeToken);\n    }\n\n    /**\n     * @notice Updates the fee structure for an already added bridge token.\n     * @dev Will revert if token was not added before.\n     * @param token         \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @param bridgeFee     Fee % for bridging a token to this chain, multiplied by `FEE_DENOMINATOR`\n     * @param minFee        Minimum fee for bridging a token to this chain, in token decimals\n     * @param maxFee        Maximum fee for bridging a token to this chain, in token decimals\n     */\n    function setTokenFee(\n        address token,\n        uint256 bridgeFee,\n        uint256 minFee,\n        uint256 maxFee\n    ) external onlyOwner {\n        require(config[token].bridgeToken != address(0), \"Unknown token\");\n        _setTokenFee(token, bridgeFee, minFee, maxFee);\n    }\n\n    /**\n     * @notice Removes tokens from the local config, and deletes the associated bridge fee structure.\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for removing.\n     * @param token         \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @return wasRemoved   True, if token was removed from the config\n     */\n    function removeToken(address token) external onlyOwner returns (bool wasRemoved) {\n        wasRemoved = _removeToken(token);\n    }\n\n    /**\n     * @notice Removes a list of tokens from the local config, and deletes their associated bridge fee structure.\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for removing.\n     * @param tokens    List of \"end\" tokens, supported by SynapseBridge. These are the tokens user is receiving/sending.\n     */\n    function removeTokens(address[] calldata tokens) external onlyOwner {\n        uint256 amount = tokens.length;\n        for (uint256 i = 0; i < amount; ++i) {\n            _removeToken(tokens[i]);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns a list of all supported bridge tokens.\n    function bridgeTokens() external view returns (address[] memory tokens) {\n        uint256 amount = bridgeTokensAmount();\n        tokens = new address[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            tokens[i] = _bridgeTokens.at(i);\n        }\n    }\n\n    /// @notice Returns the amount of the supported bridge tokens.\n    function bridgeTokensAmount() public view returns (uint256 amount) {\n        amount = _bridgeTokens.length();\n    }\n\n    /**\n     * @notice Calculates a fee for bridging a token to this chain.\n     * @dev If a token requires a bridge wrapper token, use the underlying token address for getting a fee quote.\n     * @param token     \"End\" token, supported by SynapseBridge. This is the token user is receiving/sending.\n     * @param amount    Amount of tokens to bridge to this chain.\n     */\n    function calculateBridgeFee(address token, uint256 amount) external view returns (uint256 feeAmount) {\n        feeAmount = _calculateBridgeFee(token, amount);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                 INTERNAL: ADD & REMOVE BRIDGE TOKENS                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Adds a bridge token config, if it's not present and updates its fee structure.\n    /// Child contract could implement additional logic upon adding a token.\n    function _addToken(\n        string memory _symbol,\n        address token,\n        TokenType tokenType,\n        address bridgeToken,\n        uint256 bridgeFee,\n        uint256 minFee,\n        uint256 maxFee\n    ) internal virtual returns (bool wasAdded) {\n        wasAdded = _bridgeTokens.add(token);\n        if (wasAdded) {\n            // Need to save config only once. Need to use \"end user\" address for symbol mappings.\n            _setTokenSymbol(_symbol, token);\n            _setTokenConfig(token, tokenType, bridgeToken);\n            _setTokenFee(token, bridgeFee, minFee, maxFee);\n        }\n    }\n\n    /// @dev Sets the symbol for the bridge token\n    function _setTokenSymbol(string memory symbol, address token) internal {\n        // tokenToSymbol[token] is guaranteed to be empty, as token was just added\n        require(bytes(symbol).length != 0, \"Empty symbol\");\n        require(symbolToToken[symbol] == address(0), \"Symbol already in use\");\n        symbolToToken[symbol] = token;\n        tokenToSymbol[token] = symbol;\n    }\n\n    /// @dev Updates the token config for an already known bridge token.\n    function _setTokenConfig(\n        address token,\n        TokenType tokenType,\n        address bridgeToken\n    ) internal {\n        // Sanity checks for the provided token values\n        require(token != address(0) && bridgeToken != address(0), \"Token can't be zero address\");\n        config[token] = TokenConfig(tokenType, bridgeToken);\n    }\n\n    /// @dev Updates the fee structure for an already known bridge token.\n    function _setTokenFee(\n        address token,\n        uint256 bridgeFee,\n        uint256 minFee,\n        uint256 maxFee\n    ) internal {\n        // Sanity checks for the provided fee values\n        require(bridgeFee < FEE_DENOMINATOR, \"bridgeFee >= 100%\");\n        require(minFee <= maxFee, \"minFee > maxFee\");\n        fee[token] = FeeStructure(uint40(bridgeFee), uint104(minFee), uint112(maxFee));\n    }\n\n    /// @dev Removes a bridge token config along with its fee structure.\n    /// Child contract could implement additional logic upon removing a token.\n    function _removeToken(address token) internal virtual returns (bool wasRemoved) {\n        wasRemoved = _bridgeTokens.remove(token);\n        if (wasRemoved) {\n            string memory symbol = tokenToSymbol[token];\n            delete tokenToSymbol[token];\n            delete symbolToToken[symbol];\n            delete config[token];\n            delete fee[token];\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           INTERNAL: VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Returns the amount of tokens received after applying the bridge fee.\n    /// Will return 0, if bridged amount is lower than a minimum bridge fee.\n    function _calculateBridgeAmountOut(address token, uint256 amount) internal view returns (uint256 amountOut) {\n        uint256 feeAmount = _calculateBridgeFee(token, amount);\n        if (feeAmount < amount) {\n            // No need for SafeMath here\n            amountOut = amount - feeAmount;\n        }\n        // Return 0, if fee amount >= amount\n    }\n\n    /// @dev Returns the fee for bridging a given token to this chain.\n    function _calculateBridgeFee(address token, uint256 amount) internal view returns (uint256 feeAmount) {\n        require(config[token].bridgeToken != address(0), \"Token not supported\");\n        FeeStructure memory tokenFee = fee[token];\n        feeAmount = amount.mul(tokenFee.bridgeFee).div(FEE_DENOMINATOR);\n        if (feeAmount < tokenFee.minFee) {\n            feeAmount = tokenFee.minFee;\n        } else if (feeAmount > tokenFee.maxFee) {\n            feeAmount = tokenFee.maxFee;\n        }\n    }\n}\n"
    },
    "contracts/bridge/router/SwapCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISwapQuoter.sol\";\nimport \"../libraries/UniversalToken.sol\";\nimport \"../../amm/MathUtils.sol\";\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\n\nabstract contract SwapCalculator is ISwapQuoter {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    using SafeMath for uint256;\n    using MathUtils for uint256;\n\n    using UniversalToken for address;\n\n    // Struct storing variables used in calculations in the\n    // {add,remove}Liquidity functions to avoid stack too deep errors\n    struct ManageLiquidityInfo {\n        uint256 d0;\n        uint256 d1;\n        uint256 preciseA;\n        uint256 totalSupply;\n        uint256[] balances;\n        uint256[] multipliers;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              CONSTANTS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256 private constant POOL_PRECISION_DECIMALS = 18;\n    uint256 private constant A_PRECISION = 100;\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Set of supported pools conforming to ISwap interface\n    EnumerableSet.AddressSet internal _pools;\n    /// @dev Pool tokens for every supported ISwap pool\n    mapping(address => PoolToken[]) internal _poolTokens;\n    /// @dev LP token for every supported ISwap pool (if exists)\n    mapping(address => address) internal _poolLpToken;\n    /// @dev Pool precision multipliers for every supported ISwap pool\n    mapping(address => uint256[]) internal _poolMultipliers;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the exact quote for adding liquidity to a given pool\n     * in a form of a single token.\n     * @dev Apparently, the StableSwap authors didn't consider such function worth implementing,\n     * as the only way to get a quote for adding liquidity would be calculateTokenAmount(),\n     * which gives an ESTIMATE: it doesn't take the trade fees into account.\n     * We do need the exact quotes for (DAI/USDC/USDT) -> nUSD swaps on Mainnet, hence we do this.\n     * The code is copied from SwapUtils.addLiquidity(), with all the state changes omitted.\n     * Note: the function might revert instead of returning 0 for incorrect requests. Make sure\n     * to take that into account (see {_calculateAdd}, which is using this).\n     */\n    function calculateAddLiquidity(address pool, uint256[] memory amounts)\n        external\n        view\n        override\n        returns (uint256 amountOut)\n    {\n        uint256 numTokens = _poolTokens[pool].length;\n        require(amounts.length == numTokens, \"Amounts must match pooled tokens\");\n        ManageLiquidityInfo memory v = ManageLiquidityInfo({\n            d0: 0,\n            d1: 0,\n            preciseA: ISwap(pool).getAPrecise(),\n            totalSupply: IERC20(_poolLpToken[pool]).totalSupply(),\n            balances: new uint256[](numTokens),\n            multipliers: _poolMultipliers[pool]\n        });\n\n        uint256[] memory newBalances = new uint256[](numTokens);\n        for (uint256 i = 0; i < numTokens; ++i) {\n            v.balances[i] = ISwap(pool).getTokenBalance(uint8(i));\n            newBalances[i] = v.balances[i].add(amounts[i]);\n        }\n\n        if (v.totalSupply != 0) {\n            v.d0 = _getD(_xp(v.balances, v.multipliers), v.preciseA);\n        } else {\n            for (uint256 i = 0; i < numTokens; ++i) {\n                require(amounts[i] > 0, \"Must supply all tokens in pool\");\n            }\n        }\n\n        // invariant after change\n        v.d1 = _getD(_xp(newBalances, v.multipliers), v.preciseA);\n        require(v.d1 > v.d0, \"D should increase\");\n\n        if (v.totalSupply == 0) {\n            return v.d1;\n        } else {\n            (, , , , uint256 swapFee, , ) = ISwap(pool).swapStorage();\n            uint256 feePerToken = _feePerToken(swapFee, numTokens);\n            for (uint256 i = 0; i < numTokens; ++i) {\n                uint256 idealBalance = v.d1.mul(v.balances[i]).div(v.d0);\n                uint256 fees = feePerToken.mul(idealBalance.difference(newBalances[i])).div(FEE_DENOMINATOR);\n                newBalances[i] = newBalances[i].sub(fees);\n            }\n            v.d1 = _getD(_xp(newBalances, v.multipliers), v.preciseA);\n            return v.d1.sub(v.d0).mul(v.totalSupply).div(v.d0);\n        }\n    }\n\n    /**\n     * @notice Returns the exact quote for swapping between two given tokens.\n     * @dev Exposes ISwap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n     */\n    function calculateSwap(\n        address pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view override returns (uint256 amountOut) {\n        amountOut = ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    /**\n     * @notice Returns the exact quote for withdrawing pools tokens in a balanced way.\n     * @dev Exposes ISwap.calculateRemoveLiquidity(amount);\n     */\n    function calculateRemoveLiquidity(address pool, uint256 amount)\n        external\n        view\n        override\n        returns (uint256[] memory amountsOut)\n    {\n        amountsOut = ISwap(pool).calculateRemoveLiquidity(amount);\n    }\n\n    /**\n     * @notice Returns the exact quote for withdrawing a single pool token.\n     * @dev Exposes ISwap.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\n     */\n    function calculateWithdrawOneToken(\n        address pool,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view override returns (uint256 amountOut) {\n        amountOut = ISwap(pool).calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           INTERNAL HELPERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _addPool(address pool, address weth) internal {\n        if (_pools.add(pool)) {\n            PoolToken[] storage tokens = _poolTokens[pool];\n            // Don't do anything if pool was added before\n            if (tokens.length != 0) return;\n            for (uint8 i = 0; ; ++i) {\n                try ISwap(pool).getToken(i) returns (IERC20 token) {\n                    uint256 decimals = ERC20(address(token)).decimals();\n                    PoolToken memory _poolToken = PoolToken({isWeth: address(token) == weth, token: address(token)});\n                    _poolTokens[pool].push(_poolToken);\n                    _poolMultipliers[pool].push(10**POOL_PRECISION_DECIMALS.sub(decimals));\n                } catch {\n                    // End of pool reached\n                    break;\n                }\n            }\n            try ISwap(pool).swapStorage() returns (\n                uint256,\n                uint256,\n                uint256,\n                uint256,\n                uint256,\n                uint256,\n                address lpToken\n            ) {\n                _poolLpToken[pool] = lpToken;\n            } catch {\n                // solhint-disable-previous-line no-empty-blocks\n                // Don't do anything if swapStorage fails,\n                // this is probably a wrapper pool\n            }\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _calculateSwap(\n        address pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 amountIn\n    ) internal view returns (uint256 amountOut) {\n        try ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amountIn) returns (uint256 _amountOut) {\n            amountOut = _amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _calculateRemove(\n        address pool,\n        uint8 tokenIndexTo,\n        uint256 amountIn\n    ) internal view returns (uint256 amountOut) {\n        try ISwap(pool).calculateRemoveLiquidityOneToken(amountIn, tokenIndexTo) returns (uint256 _amountOut) {\n            amountOut = _amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _calculateAdd(\n        address pool,\n        uint8 tokenIndexFrom,\n        uint256 amountIn\n    ) internal view returns (uint256 amountOut) {\n        uint256[] memory amounts = new uint256[](_poolTokens[pool].length);\n        amounts[tokenIndexFrom] = amountIn;\n        // In order to keep the code clean, we do an external call to ourselves here\n        // and return 0 should the execution be reverted.\n        try this.calculateAddLiquidity(pool, amounts) returns (uint256 _amountOut) {\n            amountOut = _amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * @notice Returns indexes for the two given tokens plus 1.\n     * The default value of 0 means a token is not supported by the pool.\n     */\n    function _getTokenIndexes(\n        address pool,\n        address tokenIn,\n        address tokenOut\n    ) internal view returns (uint8 indexIn, uint8 indexOut) {\n        PoolToken[] storage tokens = _poolTokens[pool];\n        uint256 amount = tokens.length;\n        for (uint8 t = 0; t < amount; ++t) {\n            PoolToken memory _poolToken = tokens[t];\n            if (tokenIn.universalEquals(_poolToken)) {\n                indexIn = t + 1;\n            } else if (tokenOut.universalEquals(_poolToken)) {\n                indexOut = t + 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Get fee applied to each token when adding\n     * or removing assets weighted differently from the pool\n     */\n    function _feePerToken(uint256 swapFee, uint256 numTokens) internal pure returns (uint256) {\n        return swapFee.mul(numTokens).div(numTokens.sub(1).mul(4));\n    }\n\n    /**\n     * @notice Get pool balances adjusted, as if all tokens had 18 decimals\n     */\n    function _xp(uint256[] memory balances, uint256[] memory precisionMultipliers)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256 _numTokens = balances.length;\n        require(_numTokens == precisionMultipliers.length, \"Balances must match multipliers\");\n        uint256[] memory xp = new uint256[](_numTokens);\n        for (uint256 i = 0; i < _numTokens; i++) {\n            xp[i] = balances[i].mul(precisionMultipliers[i]);\n        }\n        return xp;\n    }\n\n    /**\n     * @notice Get D: pool invariant\n     */\n    function _getD(uint256[] memory xp, uint256 a) internal pure returns (uint256) {\n        uint256 _numTokens = xp.length;\n        uint256 s;\n        for (uint256 i = 0; i < _numTokens; i++) {\n            s = s.add(xp[i]);\n        }\n        if (s == 0) {\n            return 0;\n        }\n\n        uint256 prevD;\n        uint256 d = s;\n        uint256 nA = a.mul(_numTokens);\n\n        for (uint256 i = 0; i < 256; i++) {\n            uint256 dP = d;\n            for (uint256 j = 0; j < _numTokens; j++) {\n                dP = dP.mul(d).div(xp[j].mul(_numTokens));\n                // If we were to protect the division loss we would have to keep the denominator separate\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\n                // dP = dP * D * D * D * ... overflow!\n            }\n            prevD = d;\n            d = nA.mul(s).div(A_PRECISION).add(dP.mul(_numTokens)).mul(d).div(\n                nA.sub(A_PRECISION).mul(d).div(A_PRECISION).add(_numTokens.add(1).mul(dP))\n            );\n            if (d.within1(prevD)) {\n                return d;\n            }\n        }\n\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n        // function which does not rely on D.\n        revert(\"D does not converge\");\n    }\n}\n"
    },
    "contracts/bridge/router/SwapQuoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libraries/BridgeStructs.sol\";\nimport \"./SwapCalculator.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Finds one-step trade paths between tokens using a set of\n * liquidity pools, that conform to ISwap interface.\n * Following set of methods is required for the pool to work (see ISwap.sol for details):\n * - getToken(uint8) external view returns (address);\n * - calculateSwap(uint8, uint8, uint256) external view returns (uint256);\n * - swap(uin8, uint8, uint256, uint256, uint256) external returns (uint256);\n * @dev SwapQuoter is supposed to work in conjunction with SynapseRouter.\n * For the correct behavior bridge token \"liquidity pools\" (or their pool wrappers) need to be added to SwapQuoter.\n * Adding any additional pools containing one of the bridge tokens could lead to incorrect bridge parameters.\n * Adding a pool that doesn't contain a single bridge token would be fine though.\n */\ncontract SwapQuoter is SwapCalculator, Ownable {\n    using ActionLib for uint256;\n\n    /// @notice Address of SynapseRouter contract.\n    address public immutable synapseRouter;\n\n    /// @notice Address of WETH token that is used by SynapseBridge.\n    /// If SynapseBridge has WETH_ADDRESS set to address(0), this should point to chain's canonical WETH.\n    address public immutable weth;\n\n    uint256 private constant PATH_FOUND = 1;\n\n    constructor(\n        address _synapseRouter,\n        address _weth,\n        address owner_\n    ) public {\n        synapseRouter = _synapseRouter;\n        weth = _weth;\n        transferOwnership(owner_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              OWNER ONLY                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Adds a few pools to the list of pools used for finding a trade path.\n     */\n    function addPools(address[] calldata pools) external onlyOwner {\n        uint256 amount = pools.length;\n        for (uint256 i = 0; i < amount; ++i) {\n            _addPool(pools[i], weth);\n        }\n    }\n\n    /**\n     * @notice Adds a pool to the list of pools used for finding a trade path.\n     * Stores all the supported pool tokens, and marks them as WETH, if they match the WETH address.\n     * Also stores the pool LP token, if it exists.\n     */\n    function addPool(address pool) external onlyOwner {\n        _addPool(pool, weth);\n    }\n\n    /**\n     * @notice Removes a pool from the list of pools used for finding a trade path.\n     */\n    function removePool(address pool) external onlyOwner {\n        _pools.remove(pool);\n        // We don't remove _poolTokens records, as pool's set of tokens doesn't change over time.\n        // Quoter iterates through all pools in `_pools`, so removing it from there is enough.\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Checks if a swap is possible between every token in the given list\n     * and tokenOut, using any of the supported pools.\n     * @param tokensIn  List of structs with following information:\n     *                  - actionMask    Bitmask representing what actions are available for doing tokenIn -> tokenOut\n     *                  - token         Token address to swap from\n     * @param tokenOut  Token address to swap to\n     * @return amountFound  Amount of tokens from the list that are swappable to tokenOut\n     * @return isConnected  List of bool values, specifying whether a token from the list is swappable to tokenOut\n     */\n    function findConnectedTokens(LimitedToken[] memory tokensIn, address tokenOut)\n        external\n        view\n        override\n        returns (uint256 amountFound, bool[] memory isConnected)\n    {\n        uint256 amount = tokensIn.length;\n        isConnected = new bool[](amount);\n        SwapQuery memory query;\n        for (uint256 i = 0; i < amount; ++i) {\n            LimitedToken memory tokenIn = tokensIn[i];\n            query = _getAmountOut(tokenIn, tokenOut, PATH_FOUND, false);\n            if (query.minAmountOut == PATH_FOUND) {\n                ++amountFound;\n                isConnected[i] = true;\n            }\n        }\n    }\n\n    /**\n     * @notice Finds the best pool for a single tokenIn -> tokenOut swap from the list of supported pools.\n     * Returns the `SwapQuery` struct, that can be used on SynapseRouter.\n     * minAmountOut and deadline fields will need to be adjusted based on the swap settings.\n     * @dev If tokenIn or tokenOut is ETH_ADDRESS, only the pools having WETH as a pool token will be considered.\n     * Three potential outcomes are available:\n     * 1. `tokenIn` and `tokenOut` represent the same token address (identical tokens).\n     * 2. `tokenIn` and `tokenOut` represent different addresses. No trade path from `tokenIn` to `tokenOut` is found.\n     * 3. `tokenIn` and `tokenOut` represent different addresses. Trade path from `tokenIn` to `tokenOut` is found.\n     * The exact composition of the returned struct for every case is documented in the return parameter documentation.\n     * @param tokenIn   Struct with following information:\n     *                  - actionMask    Bitmask representing what actions are available for doing tokenIn -> tokenOut\n     *                  - token         Token address to swap from\n     * @param tokenOut  Token address to swap to\n     * @param amountIn  Amount of tokens to swap from\n     * @return query    Struct representing trade path between tokenIn and tokenOut:\n     *                  - swapAdapter: adapter address that would handle the swap. Address(0) if no path is found,\n     *                  or tokens are identical.\n     *                  - tokenOut: always equals to the provided `tokenOut`, even if no path if found.\n     *                  - minAmountOut: amount of `tokenOut`, if swap was completed now. 0, if no path is found.\n     *                  - deadline: 2**256-1 if path was found, or tokens are identical. 0, if no path is found.\n     *                  - rawParams: ABI-encoded SynapseParams struct indicating the swap parameters. Empty string,\n     *                  if no path is found, or tokens are identical.\n     */\n    function getAmountOut(\n        LimitedToken memory tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view override returns (SwapQuery memory query) {\n        query = _getAmountOut(tokenIn, tokenOut, amountIn, true);\n        // tokenOut filed should always be populated, even if a path wasn't found\n        query.tokenOut = tokenOut;\n        // Fill the remaining fields if a path was found\n        if (query.minAmountOut != 0) {\n            // SynapseRouter should be used as \"Swap Adapter\" for doing a swap through Synapse pools (or handling ETH)\n            if (query.rawParams.length != 0) query.swapAdapter = synapseRouter;\n            // Set default deadline to infinity. Not using the value of 0,\n            // which would lead to every swap to revert by default.\n            query.deadline = type(uint256).max;\n        }\n    }\n\n    /**\n     * @dev Finds the best pool for a single tokenIn -> tokenOut swap from the list of supported pools.\n     * Or, if `performQuoteCall` is set to False, checks if the above swap is possible via any of the supported pools.\n     * Only populates the `minAmountOut` and `rawParams` fields, unless no trade path is found between the tokens.\n     * Other fields are supposed to be populated in the caller function.\n     */\n    function _getAmountOut(\n        LimitedToken memory tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        bool performQuoteCall\n    ) internal view returns (SwapQuery memory query) {\n        // If token addresses match, no action is required whatsoever.\n        if (tokenIn.token == tokenOut) {\n            // Form a SynapseRouter-compatible struct indicating no action is required.\n            // Set amountOut to PATH_FOUND if we are only interested in whether the swap is possible\n            query.minAmountOut = performQuoteCall ? amountIn : PATH_FOUND;\n            // query.rawParams is \"\", indicating that no further action is required\n            return query;\n        }\n        uint256 actionMask = tokenIn.actionMask;\n        // Check if ETH <> WETH (Action.HandleEth) could fulfill tokenIn -> tokenOut request.\n        _checkHandleETH(tokenIn.token, tokenOut, amountIn, query, actionMask, performQuoteCall);\n        uint256 amount = poolsAmount();\n        // Struct to get around stack-too-deep error\n        Pool memory _pool;\n        for (uint256 i = 0; i < amount; ++i) {\n            _pool.pool = _pools.at(i);\n            _pool.lpToken = _poolLpToken[_pool.pool];\n            (uint8 indexIn, uint8 indexOut) = _getTokenIndexes(_pool.pool, tokenIn.token, tokenOut);\n            if (indexIn != 0 && indexOut != 0) {\n                // tokenIn, tokenOut are pool tokens: Action.Swap is required\n                _checkSwapQuote(_pool.pool, indexIn, indexOut, amountIn, query, actionMask, performQuoteCall);\n            } else if (tokenIn.token == _pool.lpToken && indexOut != 0) {\n                // tokenIn is pool's LP Token, tokenOut is pool token: Action.RemoveLiquidity is required\n                _checkRemoveLiquidityQuote(_pool.pool, indexOut, amountIn, query, actionMask, performQuoteCall);\n            } else if (indexIn != 0 && tokenOut == _pool.lpToken) {\n                // tokenIn is pool token, tokenOut is pool's LP token: Action.AddLiquidity is required\n                _checkAddLiquidityQuote(_pool.pool, indexIn, amountIn, query, actionMask, performQuoteCall);\n            }\n        }\n    }\n\n    /**\n     * @notice Returns a list of all supported pools.\n     */\n    function allPools() external view override returns (Pool[] memory pools) {\n        uint256 amount = poolsAmount();\n        pools = new Pool[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            address pool = _pools.at(i);\n            pools[i] = Pool({pool: pool, lpToken: _poolLpToken[pool], tokens: _poolTokens[pool]});\n        }\n    }\n\n    /**\n     * @notice Returns a list of pool tokens for the given pool.\n     */\n    function poolTokens(address pool) external view override returns (PoolToken[] memory tokens) {\n        tokens = _poolTokens[pool];\n    }\n\n    /**\n     * @notice Returns the amount of tokens the given pool supports and the pool's LP token.\n     */\n    function poolInfo(address pool) external view override returns (uint256 tokens, address lpToken) {\n        tokens = _poolTokens[pool].length;\n        lpToken = _poolLpToken[pool];\n    }\n\n    /**\n     * @notice Returns the amount of supported pools.\n     */\n    function poolsAmount() public view override returns (uint256) {\n        return _pools.length();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Checks a swap quote for the given pool, and updates `query` if output amount is better.\n     * @dev Won't do anything if Action.Swap is not included in `actionMask`.\n     */\n    function _checkSwapQuote(\n        address pool,\n        uint8 indexIn,\n        uint8 indexOut,\n        uint256 amountIn,\n        SwapQuery memory query,\n        uint256 actionMask,\n        bool performQuoteCall\n    ) internal view {\n        // Don't do anything if we haven't specified Swap as possible action\n        if (!actionMask.includes(Action.Swap)) return;\n        uint8 tokenIndexFrom = indexIn - 1;\n        uint8 tokenIndexTo = indexOut - 1;\n        // Set amountOut to PATH_FOUND if we are only interested in whether the swap is possible\n        uint256 amountOut = performQuoteCall\n            ? _calculateSwap(pool, tokenIndexFrom, tokenIndexTo, amountIn)\n            : PATH_FOUND;\n        // We want to return the best available quote\n        if (amountOut > query.minAmountOut) {\n            query.minAmountOut = amountOut;\n            // Encode params for swapping via the current pool: specify indexFrom and indexTo\n            query.rawParams = abi.encode(SynapseParams(Action.Swap, pool, tokenIndexFrom, tokenIndexTo));\n        }\n    }\n\n    /**\n     * @notice Checks a quote for adding liquidity to the given pool, and updates `query` if output amount is better.\n     * This is the equivalent of tokenIn -> LPToken swap.\n     * @dev Won't do anything if Action.AddLiquidity is not included in `actionMask`.\n     */\n    function _checkAddLiquidityQuote(\n        address pool,\n        uint8 indexIn,\n        uint256 amountIn,\n        SwapQuery memory query,\n        uint256 actionMask,\n        bool performQuoteCall\n    ) internal view {\n        // Don't do anything if we haven't specified AddLiquidity as possible action\n        if (!actionMask.includes(Action.AddLiquidity)) return;\n        uint8 tokenIndexFrom = indexIn - 1;\n        // Set amountOut to PATH_FOUND if we are only interested in whether the swap is possible\n        uint256 amountOut = performQuoteCall ? _calculateAdd(pool, tokenIndexFrom, amountIn) : PATH_FOUND;\n        // We want to return the best available quote\n        if (amountOut > query.minAmountOut) {\n            query.minAmountOut = amountOut;\n            // Encode params for depositing to the current pool: specify indexFrom, indexTo = -1\n            query.rawParams = abi.encode(SynapseParams(Action.AddLiquidity, pool, tokenIndexFrom, type(uint8).max));\n        }\n    }\n\n    /**\n     * @notice Checks a withdrawal quote for the given pool, and updates `query` if output amount is better.\n     * This is the equivalent of LPToken -> tokenOut swap.\n     * @dev Won't do anything if Action.RemoveLiquidity is not included in `actionMask`.\n     */\n    function _checkRemoveLiquidityQuote(\n        address pool,\n        uint8 indexOut,\n        uint256 amountIn,\n        SwapQuery memory query,\n        uint256 actionMask,\n        bool performQuoteCall\n    ) internal view {\n        // Don't do anything if we haven't specified RemoveLiquidity as possible action\n        if (!actionMask.includes(Action.RemoveLiquidity)) return;\n        uint8 tokenIndexTo = indexOut - 1;\n        // Set amountOut to PATH_FOUND if we are only interested in whether the swap is possible\n        uint256 amountOut = performQuoteCall ? _calculateRemove(pool, tokenIndexTo, amountIn) : PATH_FOUND;\n        // We want to return the best available quote\n        if (amountOut > query.minAmountOut) {\n            query.minAmountOut = amountOut;\n            // Encode params for withdrawing from the current pool: indexFrom = -1, specify indexTo\n            query.rawParams = abi.encode(SynapseParams(Action.RemoveLiquidity, pool, type(uint8).max, tokenIndexTo));\n        }\n    }\n\n    /**\n     * @notice Checks if a \"handle ETH\" operation is possible between two given tokens.\n     * That would be either unwrapping WETh into native ETH, or wrapping ETH into WETH.\n     * @dev Won't do anything if Action.HandleEth is not included in `actionMask`.\n     */\n    function _checkHandleETH(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        SwapQuery memory query,\n        uint256 actionMask,\n        bool performQuoteCall\n    ) internal view {\n        // Don't do anything if we haven't specified HandleEth as possible action\n        if (!actionMask.includes(Action.HandleEth)) return;\n        if (\n            (tokenIn == UniversalToken.ETH_ADDRESS && tokenOut == weth) ||\n            (tokenIn == weth && tokenOut == UniversalToken.ETH_ADDRESS)\n        ) {\n            // Set amountOut to PATH_FOUND if we are only interested in whether the swap is possible\n            query.minAmountOut = performQuoteCall ? amountIn : PATH_FOUND;\n            // Params for handling ETH: there is no pool, use -1 as indexes\n            query.rawParams = abi.encode(SynapseParams(Action.HandleEth, address(0), type(uint8).max, type(uint8).max));\n        }\n    }\n}\n"
    },
    "contracts/bridge/router/SynapseAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISwapAdapter.sol\";\nimport \"../interfaces/ISwapQuoter.sol\";\nimport \"../interfaces/IWETH9.sol\";\nimport \"../libraries/UniversalToken.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract SynapseAdapter is Ownable, ISwapAdapter {\n    using SafeERC20 for IERC20;\n    using UniversalToken for address;\n\n    uint256 internal constant MAX_UINT = type(uint256).max;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Address of the local SwapQuoter contract\n    ISwapQuoter public swapQuoter;\n\n    /// @notice Receive function to enable unwrapping ETH into this contract\n    receive() external payable {} // solhint-disable-line no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              OWNER ONLY                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Sets the Swap Quoter address to get the swap quotes from.\n    function setSwapQuoter(ISwapQuoter _swapQuoter) external onlyOwner {\n        swapQuoter = _swapQuoter;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Performs a tokenIn -> tokenOut swap, according to the provided params.\n     * If tokenIn is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\n     * If tokenIn is ERC20, the tokens should be already transferred to this contract (using `msg.value = 0`).\n     * If tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\n     * If tokenOut is ERC20, the tokens will be transferred to the recipient.\n     * @dev Contracts implementing {ISwapAdapter} interface are required to enforce the above restrictions.\n     * On top of that, they must ensure that exactly `amountOut` worth of `tokenOut` is transferred to the recipient.\n     * Swap deadline and slippage is checked outside of this contract.\n     * @dev Applied to SynapseAdapter only:\n     * Use `params.pool = address(this)` for ETH handling without swaps:\n     * 1. For wrapping ETH: tokenIn = ETH_ADDRESS, tokenOut = WETH, params.pool = address(this)\n     * 2. For unwrapping WETH: tokenIn = WETH, tokenOut = ETH_ADDRESS, params.pool = address(this)\n     * If `params.pool != address(this)`, and ETH_ADDRESS was supplied as tokenIn or tokenOut,\n     * a corresponding pool token will be treated as WETH.\n     * @param to            Address to receive the swapped token\n     * @param tokenIn       Token to sell (use ETH_ADDRESS to start from native ETH)\n     * @param amountIn      Amount of tokens to sell\n     * @param tokenOut      Token to buy (use ETH_ADDRESS to end with native ETH)\n     * @param rawParams     Additional swap parameters\n     * @return amountOut    Amount of bought tokens\n     */\n    function adapterSwap(\n        address to,\n        address tokenIn,\n        uint256 amountIn,\n        address tokenOut,\n        bytes calldata rawParams\n    ) external payable override returns (uint256 amountOut) {\n        // We define a few phases for the whole swap process.\n        // (?) means the phase is optional.\n        // (!) means the phase is mandatory.\n\n        // ============================== PHASE 0(!): CHECK ALL THE PARAMS =========================\n        require(tokenIn != tokenOut, \"Swap tokens should differ\");\n        // Decode params for swapping via a Synapse pool\n        SynapseParams memory params = abi.decode(rawParams, (SynapseParams));\n        // Swap pool should exist, if action other than HandleEth was requested\n        require(params.pool != address(0) || params.action == Action.HandleEth, \"!pool\");\n\n        // ============================== PHASE 1(?): WRAP RECEIVED ETH ============================\n        // tokenIn was already transferred to this contract, check if we start from native ETH\n        if (tokenIn == UniversalToken.ETH_ADDRESS) {\n            // Determine WETH address: this is either tokenOut (if no swap is needed),\n            // or a pool token with index `tokenIndexFrom` (if swap is needed).\n            tokenIn = _deriveWethAddress({token: tokenOut, params: params, isWethIn: true});\n            // Wrap ETH into WETH and leave it in this contract\n            _wrapETH(tokenIn, amountIn);\n        } else {\n            // For ERC20 tokens msg.value should be zero\n            require(msg.value == 0, \"Incorrect tokenIn for ETH swap\");\n        }\n        // Either way, this contract has `amountIn` worth of `tokenIn`; tokenIn != ETH_ADDRESS\n\n        // ============================== PHASE 2(?): PREPARE TO UNWRAP SWAPPED WETH ===============\n        address tokenSwapTo = tokenOut;\n        // Check if swap to native ETH was requested\n        if (tokenOut == UniversalToken.ETH_ADDRESS) {\n            // Determine WETH address: this is either tokenIn (if no swap is needed),\n            // or a pool token with index `tokenIndexTo` (if swap is needed).\n            tokenSwapTo = _deriveWethAddress({token: tokenIn, params: params, isWethIn: false});\n        }\n        // Either way, we need to perform tokenIn -> tokenSwapTo swap.\n        // Then we need to send tokenOut to the recipient.\n        // The last step includes WETH unwrapping, if tokenOut is ETH_ADDRESS\n\n        // ============================== PHASE 3(?): PERFORM A REQUESTED SWAP =====================\n        // Determine if we need to perform a swap\n        if (params.action == Action.HandleEth) {\n            // If no swap is required, amountOut doesn't change\n            amountOut = amountIn;\n        } else {\n            // Approve token for spending if needed\n            tokenIn.universalApproveInfinity(params.pool);\n            if (params.action == Action.Swap) {\n                // Perform a swap through the pool\n                amountOut = _swap(ISwap(params.pool), params, amountIn, tokenSwapTo);\n            } else if (params.action == Action.AddLiquidity) {\n                // Add liquidity to the pool\n                amountOut = _addLiquidity(ISwap(params.pool), params, amountIn, tokenSwapTo);\n            } else {\n                // Remove liquidity to the pool\n                amountOut = _removeLiquidity(ISwap(params.pool), params, amountIn, tokenSwapTo);\n            }\n        }\n        // Either way, this contract has `amountOut` worth of `tokenSwapTo`\n\n        // ============================== PHASE 4(?): UNWRAP SWAPPED WETH ==========================\n        // Check if swap to native ETH was requested\n        if (tokenOut == UniversalToken.ETH_ADDRESS) {\n            // We stored WETH address in `tokenSwapTo` previously, let's unwrap it\n            _unwrapETH(tokenSwapTo, amountOut);\n        }\n        // Either way, we need to transfer `amountOut` worth of `tokenOut`\n\n        // ============================== PHASE 5(!): TRANSFER SWAPPED TOKENS ======================\n        tokenOut.universalTransfer(to, amountOut);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            VIEWS: QUOTES                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Finds the best pool for tokenIn -> tokenOut swap from the list of supported pools.\n     * Returns the `SwapQuery` struct, that can be used on SynapseRouter.\n     * minAmountOut and deadline fields will need to be adjusted based on the swap settings.\n     */\n    function getAmountOut(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) external view returns (SwapQuery memory) {\n        // All actions are allowed by default\n        LimitedToken memory _tokenIn = LimitedToken(ActionLib.allActions(), tokenIn);\n        return swapQuoter.getAmountOut(_tokenIn, tokenOut, amountIn);\n    }\n\n    /**\n     * @notice Returns the exact quote for adding liquidity to a given pool\n     * in a form of a single token.\n     * @param pool      The pool to add tokens to\n     * @param amounts   An array of token amounts to deposit.\n     *                  The amount should be in each pooled token's native precision.\n     *                  If a token charges a fee on transfers, use the amount that gets transferred after the fee.\n     * @return LP token amount the user will receive\n     */\n    function calculateAddLiquidity(address pool, uint256[] memory amounts) external view returns (uint256) {\n        return swapQuoter.calculateAddLiquidity(pool, amounts);\n    }\n\n    /**\n     * @notice Returns the exact quote for swapping between two given tokens.\n     * @param pool              The pool to use for the swap\n     * @param tokenIndexFrom    The token the user wants to sell\n     * @param tokenIndexTo      The token the user wants to buy\n     * @param dx                The amount of tokens the user wants to sell. If the token charges a fee on transfers,\n     *                          use the amount that gets transferred after the fee.\n     * @return amountOut        amount of tokens the user will receive\n     */\n    function calculateSwap(\n        address pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256 amountOut) {\n        amountOut = swapQuoter.calculateSwap(pool, tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    /**\n     * @notice Returns the exact quote for withdrawing pools tokens in a balanced way.\n     * @param pool          The pool to withdraw tokens from\n     * @param amount        The amount of LP tokens that would be burned on withdrawal\n     * @return amountsOut   Array of token balances that the user will receive\n     */\n    function calculateRemoveLiquidity(address pool, uint256 amount)\n        external\n        view\n        returns (uint256[] memory amountsOut)\n    {\n        amountsOut = swapQuoter.calculateRemoveLiquidity(pool, amount);\n    }\n\n    /**\n     * @notice Returns the exact quote for withdrawing a single pool token.\n     * @param pool          The pool to withdraw a token from\n     * @param tokenAmount   The amount of LP token to burn\n     * @param tokenIndex    Index of which token will be withdrawn\n     * @return amountOut    Calculated amount of underlying token available to withdraw\n     */\n    function calculateWithdrawOneToken(\n        address pool,\n        uint256 tokenAmount,\n        uint8 tokenIndex\n    ) external view returns (uint256 amountOut) {\n        amountOut = swapQuoter.calculateWithdrawOneToken(pool, tokenAmount, tokenIndex);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             VIEWS: POOLS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a list of all supported pools.\n     */\n    function allPools() public view returns (Pool[] memory pools) {\n        pools = swapQuoter.allPools();\n    }\n\n    /**\n     * @notice Returns the amount of tokens the given pool supports and the pool's LP token.\n     */\n    function poolInfo(address pool) public view returns (uint256, address) {\n        return swapQuoter.poolInfo(pool);\n    }\n\n    /**\n     * @notice Returns a list of pool tokens for the given pool.\n     */\n    function poolTokens(address pool) public view returns (PoolToken[] memory tokens) {\n        tokens = swapQuoter.poolTokens(pool);\n    }\n\n    /**\n     * @notice Returns the amount of supported pools.\n     */\n    function poolsAmount() public view returns (uint256 amount) {\n        amount = swapQuoter.poolsAmount();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           INTERNAL HELPERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Performs a swap through the given pool.\n     * The pool token is already approved for spending.\n     */\n    function _swap(\n        ISwap pool,\n        SynapseParams memory params,\n        uint256 amountIn,\n        address tokenOut\n    ) internal returns (uint256 amountOut) {\n        // tokenOut should match the \"swap to\" token\n        require(pool.getToken(params.tokenIndexTo) == IERC20(tokenOut), \"!tokenOut\");\n        // amountOut and deadline are not checked in SwapAdapter\n        amountOut = pool.swap({\n            tokenIndexFrom: params.tokenIndexFrom,\n            tokenIndexTo: params.tokenIndexTo,\n            dx: amountIn,\n            minDy: 0,\n            deadline: MAX_UINT\n        });\n    }\n\n    /**\n     * @notice Adds liquidity in a form of a single token to the given pool.\n     * The pool token is already approved for spending.\n     */\n    function _addLiquidity(\n        ISwap pool,\n        SynapseParams memory params,\n        uint256 amountIn,\n        address tokenOut\n    ) internal returns (uint256 amountOut) {\n        (uint256 tokens, address lpToken) = swapQuoter.poolInfo(address(pool));\n        // tokenOut should match the LP token\n        require(tokenOut == lpToken, \"!tokenOut\");\n        uint256[] memory amounts = new uint256[](tokens);\n        amounts[params.tokenIndexFrom] = amountIn;\n        // amountOut and deadline are not checked in SwapAdapter\n        amountOut = pool.addLiquidity({amounts: amounts, minToMint: 0, deadline: MAX_UINT});\n    }\n\n    /**\n     * @notice Removes liquidity in a form of a single token from the given pool.\n     * The pool LP token is already approved for spending.\n     */\n    function _removeLiquidity(\n        ISwap pool,\n        SynapseParams memory params,\n        uint256 amountIn,\n        address tokenOut\n    ) internal returns (uint256 amountOut) {\n        // tokenOut should match the \"swap to\" token\n        require(pool.getToken(params.tokenIndexTo) == IERC20(tokenOut), \"!tokenOut\");\n        // amountOut and deadline are not checked in SwapAdapter\n        amountOut = pool.removeLiquidityOneToken({\n            tokenAmount: amountIn,\n            tokenIndex: params.tokenIndexTo,\n            minAmount: 0,\n            deadline: MAX_UINT\n        });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         INTERNAL: WETH LOGIC                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Derives WETH address from swap parameters.\n    function _deriveWethAddress(\n        address token,\n        SynapseParams memory params,\n        bool isWethIn\n    ) internal view returns (address weth) {\n        if (params.action == Action.HandleEth) {\n            // If we only need to wrap/unwrap ETH, WETH address should be specified as the other token\n            weth = token;\n        } else {\n            // Otherwise, we need to get WETH address from the liquidity pool\n            weth = address(ISwap(params.pool).getToken(isWethIn ? params.tokenIndexFrom : params.tokenIndexTo));\n        }\n    }\n\n    /// @dev Wraps ETH into WETH.\n    function _wrapETH(address weth, uint256 amount) internal {\n        require(msg.value == amount, \"!msg.value\");\n        // Deposit in order to have WETH in this contract\n        IWETH9(payable(weth)).deposit{value: amount}();\n    }\n\n    /// @dev Unwraps WETH into ETH.\n    function _unwrapETH(address weth, uint256 amount) internal {\n        // Withdraw ETH to this contract\n        IWETH9(payable(weth)).withdraw(amount);\n    }\n}\n"
    },
    "contracts/bridge/router/SynapseRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"./LocalBridgeConfig.sol\";\nimport \"./SynapseAdapter.sol\";\nimport \"../utils/MulticallView.sol\";\n\n/**\n * @notice SynapseRouter contract that can be used together with SynapseBridge on any chain.\n * On every supported chain:\n * - SynapseRouter and SwapQuoter contracts need to be deployed.\n * - Chain pools that are present in the global BridgeConfig should be added to SwapQuoter.\n * - All supported bridge tokens should be added to SynapseRouter contract.\n * - router.setSwapQuoter(swapQuoter) should be executed to link these contracts.\n *\n * @dev Bridging workflow with SynapseRouter contract.\n * Initial assumptions:\n * - `routerOrigin` and `routerDest` are SynapseRouter deployments on origin and destination chain respectively.\n * - User wants to send `tokenIn` on origin chain, and receive `tokenOut` on destination chain.\n * - The amount of `tokenIn` tokens user wishes to send is `amountIn`.\n * - User wants to receives tokens to `userDest` address on destination chain.\n * - User has no idea what bridge tokens are supported on origin and destination chains.\n *\n * Under the hood, the cross-chain swap from `tokenIn` to `tokenOut` is:\n * 1. [*] `tokenIn` gets swapped to `bridgeToken` on origin chain. `bridgeToken` is a token supported by Synapse:Bridge.\n * 2. `bridgeToken` gets bridged from origin to destination chain\n * 3. [**] `bridgeToken` gets swapped to `tokenOut` on destination chain.\n * 4. `tokenOut` is transferred to the user on destination chain.\n * [*] : \"origin swap\" is skipped, if `tokenIn == bridgeToken` on origin chain.\n * [**]: \"destination swap\" is skipped, if `tokenOut == bridgeToken` on destination chain.\n *\n * Following set of actions is required (be aware, provided code is a pseudo code):\n * 1. Determine the set of bridge tokens that could fulfill \"receive tokenOut on destination chain\":\n *      // This will return a list of (string symbol, address token) tuples.\n *      bridgeTokens = routerDest.getConnectedBridgeTokens(tokenOut);\n * 2. Get the list of symbols for these tokens\n *      symbols = bridgeTokens.map(token => token.symbol);\n * 3. Get the list of structs with instructions for possible \"origin swap\":\n *      // This will return queries for all possible (tokenIn -> symbols[i]) swaps\n *      originQueries = routerOrigin.getOriginAmountOut(tokenIn, symbols, amountIn);\n * 4. Form the list of requests for the \"destination swap\" quotes:\n *      // Use symbols[i] and originQueries[i].minAmountOut to form a \"request\":\n *      requests = zipWith(symbols, originQueries, (symbol, query) => { return [symbol, query.minAmountOut] });\n * 5. Get the list of structs with instructions for possible \"destination swap\":\n *      // This will return quotes for all (symbols[i] => tokenOut) swaps\n *      // This will also take into account the bridge fee for getting a token to destination chain\n *      destQueries = routerDest.getDestinationAmountOut(requests, tokenOut);\n * 6. Pick any pair of (originQuery, destQuery):\n *      // For instance pick the one with the best destQuery.minAmountOut\n *      maxIndex = destQueries.indexOf(destQueries.maxBy, (query) => { return query.minAmountOut });\n *      originQuery = originQueries[maxIndex];\n *      // destQuery.minAmountOut is the full quote for tokenIn => tokenOut cross-chain swap\n *      destQuery = destQueries[maxIndex];\n * 7. Apply slippage, and set deadlines as per user settings:\n *      originQuery = applyUserSettings(originQuery);\n *      destQuery = applyUserSettings(destQuery);\n * 8. Call SynapseRouter using the obtained structs:\n *      // Check if user wants to send native ETH\n *      amountETH = (tokenIn == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ? amountIn : 0;\n *      routerOrigin.bridge{value: amountETH}(userDest, chainIdDest, tokenIn, amountIn, originQuery, destQuery);\n */\ncontract SynapseRouter is LocalBridgeConfig, SynapseAdapter, MulticallView {\n    // SynapseRouter is also the Adapter for the Synapse pools (this reduces the amount of token transfers).\n    // SynapseRouter address will be used as swapAdapter in SwapQueries returned by a local SwapQuoter.\n\n    using SafeERC20 for IERC20;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        CONSTANTS & IMMUTABLES                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Synapse:Bridge address\n    ISynapseBridge public immutable synapseBridge;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                      CONSTRUCTOR & INITIALIZER                       ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Deploys a Synapse Router implementation, saves local Synapse:Bridge address and transfers ownership.\n     */\n    constructor(address _synapseBridge, address owner_) public {\n        synapseBridge = ISynapseBridge(_synapseBridge);\n        transferOwnership(owner_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              OWNER ONLY                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Sets a custom allowance for the given token.\n     * @dev To be used for the wrapper token setups.\n     */\n    function setAllowance(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) external onlyOwner {\n        token.safeApprove(spender, amount);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            BRIDGE & SWAP                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Initiate a bridge transaction with an optional swap on both origin and destination chains.\n     * @dev Note that method is payable.\n     * If token is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\n     * If token is ERC20, the tokens will be pulled from msg.sender (use `msg.value = 0`).\n     * Make sure to approve this contract for spending `token` beforehand.\n     * originQuery.tokenOut should never be ETH_ADDRESS, bridge only works with ERC20 tokens.\n     *\n     * `token` is always a token user is sending. In case token requires a wrapper token to be bridge,\n     * use underlying address for `token` instead of the wrapper one.\n     *\n     * `originQuery` contains instructions for the swap on origin chain. As above, originQuery.tokenOut\n     * should always use the underlying address. In other words, the concept of wrapper token is fully\n     * abstracted away from the end user.\n     *\n     * `originQuery` is supposed to be fetched using SynapseRouter.getOriginAmountOut().\n     * Alternatively one could use an external adapter for more complex swaps on the origin chain.\n     *\n     * `destQuery` is supposed to be fetched using SynapseRouter.getDestinationAmountOut().\n     * Complex swaps on destination chain are not supported for the time being.\n     * Check contract description above for more details.\n     *\n     * @param to            Address to receive tokens on destination chain\n     * @param chainId       Destination chain id\n     * @param token         Initial token for the bridge transaction to be pulled from the user\n     * @param amount        Amount of the initial tokens for the bridge transaction\n     * @param originQuery   Origin swap query. Empty struct indicates no swap is required\n     * @param destQuery     Destination swap query. Empty struct indicates no swap is required\n     */\n    function bridge(\n        address to,\n        uint256 chainId,\n        address token,\n        uint256 amount,\n        SwapQuery memory originQuery,\n        SwapQuery memory destQuery\n    ) external payable {\n        if (_hasAdapter(originQuery)) {\n            // Perform a swap using the swap adapter, transfer the swapped tokens to this contract\n            (token, amount) = _adapterSwap(address(this), token, amount, originQuery);\n        } else {\n            // Pull initial token from the user to this contract\n            _pullToken(address(this), token, amount);\n        }\n        // Either way, this contract has `amount` worth of `token`\n        TokenConfig memory _config = config[token];\n        require(_config.bridgeToken != address(0), \"Token not supported\");\n        token = _config.bridgeToken;\n        // Decode params for swapping via a Synapse pool on the destination chain, if they were requested.\n        SynapseParams memory destParams;\n        if (_hasAdapter(destQuery)) destParams = abi.decode(destQuery.rawParams, (SynapseParams));\n        // Check if Swap/RemoveLiquidity Action on destination chain is required.\n        // Swap adapter needs to be specified.\n        // HandleETH action is done automatically by SynapseBridge.\n        if (_hasAdapter(destQuery) && destParams.action != Action.HandleEth) {\n            if (_config.tokenType == TokenType.Deposit) {\n                require(destParams.action == Action.Swap, \"Unsupported dest action\");\n                // Case 1: token needs to be deposited on origin chain.\n                // We need to perform AndSwap() on destination chain.\n                synapseBridge.depositAndSwap({\n                    to: to,\n                    chainId: chainId,\n                    token: IERC20(token),\n                    amount: amount,\n                    tokenIndexFrom: destParams.tokenIndexFrom,\n                    tokenIndexTo: destParams.tokenIndexTo,\n                    minDy: destQuery.minAmountOut,\n                    deadline: destQuery.deadline\n                });\n            } else if (destParams.action == Action.Swap) {\n                // Case 2: token needs to be redeemed on origin chain.\n                // We need to perform AndSwap() on destination chain.\n                synapseBridge.redeemAndSwap({\n                    to: to,\n                    chainId: chainId,\n                    token: IERC20(token),\n                    amount: amount,\n                    tokenIndexFrom: destParams.tokenIndexFrom,\n                    tokenIndexTo: destParams.tokenIndexTo,\n                    minDy: destQuery.minAmountOut,\n                    deadline: destQuery.deadline\n                });\n            } else {\n                require(destParams.action == Action.RemoveLiquidity, \"Unsupported dest action\");\n                // Case 3: token needs to be redeemed on origin chain.\n                // We need to perform AndRemove() on destination chain.\n                synapseBridge.redeemAndRemove({\n                    to: to,\n                    chainId: chainId,\n                    token: IERC20(token),\n                    amount: amount,\n                    liqTokenIndex: destParams.tokenIndexTo,\n                    liqMinAmount: destQuery.minAmountOut,\n                    liqDeadline: destQuery.deadline\n                });\n            }\n        } else {\n            if (_config.tokenType == TokenType.Deposit) {\n                // Case 1 (Deposit): token needs to be deposited on origin chain\n                synapseBridge.deposit(to, chainId, IERC20(token), amount);\n            } else {\n                // Case 2 (Redeem): token needs to be redeemed on origin chain\n                synapseBridge.redeem(to, chainId, IERC20(token), amount);\n            }\n        }\n    }\n\n    /**\n     * @notice Perform a swap using the supplied parameters.\n     * @dev Note that method is payable.\n     * If token is ETH_ADDRESS, this method should be invoked with `msg.value = amountIn`.\n     * If token is ERC20, the tokens will be pulled from msg.sender (use `msg.value = 0`).\n     * Make sure to approve this contract for spending `token` beforehand.\n     * If query.tokenOut is ETH_ADDRESS, native ETH will be sent to the recipient (be aware of potential reentrancy).\n     * If query.tokenOut is ERC20, the tokens will be transferred to the recipient.\n     * @param to            Address to receive swapped tokens\n     * @param token         Token to swap\n     * @param amount        Amount of tokens to swap\n     * @param query         Query with the swap parameters (see BridgeStructs.sol)\n     * @return amountOut    Amount of swapped tokens received by the user\n     */\n    function swap(\n        address to,\n        address token,\n        uint256 amount,\n        SwapQuery memory query\n    ) external payable returns (uint256 amountOut) {\n        require(to != address(0), \"!recipient: zero address\");\n        require(to != address(this), \"!recipient: router address\");\n        require(_hasAdapter(query), \"!swapAdapter\");\n        // Perform a swap through the Adapter. Adapter will be the one handling ETH/WETH interactions.\n        (, amountOut) = _adapterSwap(to, token, amount, query);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         VIEWS: BRIDGE QUOTES                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Finds the best path between `tokenIn` and every supported bridge token from the given list,\n     * treating the swap as \"origin swap\", without putting any restrictions on the swap.\n     * @dev Will NOT revert if any of the tokens are not supported, instead will return an empty query for that symbol.\n     * Check (query.minAmountOut != 0): this is true only if the swap is possible and bridge token is supported.\n     * The returned queries with minAmountOut != 0 could be used as `originQuery` with SynapseRouter.\n     * Note: it is possible to form a SwapQuery off-chain using alternative SwapAdapter for the origin swap.\n     * @param tokenIn       Initial token that user wants to bridge/swap\n     * @param tokenSymbols  List of symbols representing bridge tokens\n     * @param amountIn      Amount of tokens user wants to bridge/swap\n     * @return originQueries    List of structs that could be used as `originQuery` in SynapseRouter.\n     *                          minAmountOut and deadline fields will need to be adjusted based on the user settings.\n     */\n    function getOriginAmountOut(\n        address tokenIn,\n        string[] memory tokenSymbols,\n        uint256 amountIn\n    ) external view returns (SwapQuery[] memory originQueries) {\n        uint256 length = tokenSymbols.length;\n        originQueries = new SwapQuery[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // Check if token with given symbol is supported on this chain\n            address bridgeToken = symbolToToken[tokenSymbols[i]];\n            // Skip not supported tokens\n            if (bridgeToken == address(0)) continue;\n            // Every possible action is supported for origin swap\n            LimitedToken memory _tokenIn = LimitedToken(ActionLib.allActions(), tokenIn);\n            originQueries[i] = swapQuoter.getAmountOut(_tokenIn, bridgeToken, amountIn);\n        }\n    }\n\n    /**\n     * @notice Finds the best path between every supported bridge token from the given list and `tokenOut`,\n     * treating the swap as \"destination swap\", limiting possible actions to those available for every bridge token.\n     * @dev Will NOT revert if any of the tokens are not supported, instead will return an empty query for that symbol.\n     * Note: it is NOT possible to form a SwapQuery off-chain using alternative SwapAdapter for the destination swap.\n     * For the time being, only swaps through the Synapse-supported pools are available on destination chain.\n     * @param requests  List of structs with following information:\n     *                  - symbol: unique token ID consistent among all chains\n     *                  - amountIn: amount of bridge token to start with, before the bridge fee is applied\n     * @param tokenOut  Token user wants to receive on destination chain\n     * @return destQueries  List of structs that could be used as `destQuery` in SynapseRouter.\n     *                      minAmountOut and deadline fields will need to be adjusted based on the user settings.\n     */\n    function getDestinationAmountOut(DestRequest[] memory requests, address tokenOut)\n        external\n        view\n        returns (SwapQuery[] memory destQueries)\n    {\n        uint256 length = requests.length;\n        destQueries = new SwapQuery[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            address token = symbolToToken[requests[i].symbol];\n            // Skip if token is not supported\n            if (token == address(0)) continue;\n            // token is confirmed to be a supported bridge token at this point\n            uint256 amountIn = _calculateBridgeAmountOut(token, requests[i].amountIn);\n            // Skip if fee is greater than amountIn\n            if (amountIn == 0) continue;\n            TokenType bridgeTokenType = config[token].tokenType;\n            // See what kind of \"Actions\" are available for the given bridge token:\n            LimitedToken memory tokenIn = LimitedToken(_bridgeTokenActions(bridgeTokenType), token);\n            destQueries[i] = swapQuoter.getAmountOut(tokenIn, tokenOut, amountIn);\n        }\n    }\n\n    /**\n     * @notice Gets the list of all bridge tokens (and their symbols), such that destination swap\n     * from a bridge token to `tokenOut` is possible.\n     * @param tokenOut  Token address to swap to on destination chain\n     * @return tokens   List of structs with following information:\n     *                  - symbol: unique token ID consistent among all chains\n     *                  - token: bridge token address\n     */\n    function getConnectedBridgeTokens(address tokenOut) external view returns (BridgeToken[] memory tokens) {\n        uint256 amount = bridgeTokensAmount();\n        // Try connecting every supported bridge token to tokenOut\n        LimitedToken[] memory allTokens = new LimitedToken[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            address token = _bridgeTokens.at(i);\n            // Make sure only \"supported actions\" for destination swap are included\n            allTokens[i].actionMask = _bridgeTokenActions(config[token].tokenType);\n            allTokens[i].token = token;\n        }\n        (uint256 amountFound, bool[] memory isConnected) = swapQuoter.findConnectedTokens(allTokens, tokenOut);\n        tokens = new BridgeToken[](amountFound);\n        // This will now track amount of found connected tokens so far during the next for loop\n        amountFound = 0;\n        for (uint256 i = 0; i < amount; ++i) {\n            if (isConnected[i]) {\n                // Record the connected token\n                address token = allTokens[i].token;\n                tokens[amountFound].symbol = tokenToSymbol[token];\n                tokens[amountFound].token = token;\n                // Increase the counter\n                ++amountFound;\n            }\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL: SWAP                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Performs a swap from `token` using the provided query,\n     * which includes the swap adapter, tokenOut and the swap execution parameters.\n     * Swapped token is transferred to the specified recipient.\n     */\n    function _adapterSwap(\n        address recipient,\n        address token,\n        uint256 amount,\n        SwapQuery memory query\n    ) internal returns (address tokenOut, uint256 amountOut) {\n        // First, check the deadline for the swap\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= query.deadline, \"Deadline not met\");\n        // Pull initial token from the user to specified swap adapter\n        _pullToken(query.swapAdapter, token, amount);\n        tokenOut = query.tokenOut;\n        // If swapAdapter is this contract (which is the case for the supported Synapse pools),\n        // this will be an external call to address(this), which we are fine with.\n        // The external call is used because additional Adapters will be established in the future.\n        // We are forwarding `msg.value` and are expecting the Adapter to handle ETH/WETH interactions.\n        amountOut = ISwapAdapter(query.swapAdapter).adapterSwap{value: msg.value}({\n            to: recipient,\n            tokenIn: token,\n            amountIn: amount,\n            tokenOut: tokenOut,\n            rawParams: query.rawParams\n        });\n        // We can trust the supported adapters to return the exact swapped amount\n        // Finally, check that the recipient received at least as much as they wanted\n        require(amountOut >= query.minAmountOut, \"Swap didn't result in min tokens\");\n    }\n\n    /**\n     * Pulls a requested token from the user to the requested recipient.\n     * Or, if msg.value was provided, check that ETH_ADDRESS was used and msg.value is correct.\n     */\n    function _pullToken(\n        address recipient,\n        address token,\n        uint256 amount\n    ) internal {\n        if (msg.value == 0) {\n            // Token needs to be pulled only if msg.value is zero\n            // This way user can specify WETH as the origin asset\n            IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n        } else {\n            // Otherwise, we need to check that ETH was specified\n            require(token == UniversalToken.ETH_ADDRESS, \"!eth\");\n            // And that amount matches msg.value\n            require(msg.value == amount, \"!msg.value\");\n            // We will forward msg.value in the external call to the recipient\n        }\n    }\n\n    /**\n     * @notice Checks whether the swap adapter was specified in the query.\n     * Query without a swap adapter specifies that no action needs to be taken.\n     */\n    function _hasAdapter(SwapQuery memory query) internal pure returns (bool) {\n        return query.swapAdapter != address(0);\n    }\n\n    function _bridgeTokenActions(TokenType tokenType) internal pure returns (uint256 actionMask) {\n        if (tokenType == TokenType.Redeem) {\n            // For tokens that are minted on destination chain\n            // possible bridge functions are mint() and mintAndSwap(). Thus:\n            // Swap: available via mintAndSwap()\n            // (Add/Remove)Liquidity is unavailable\n            // HandleETH is unavailable, as WETH could only be withdrawn by SynapseBridge\n            actionMask = ActionLib.mask(Action.Swap);\n        } else {\n            // For tokens that are withdrawn on destination chain\n            // possible bridge functions are withdraw() and withdrawAndRemove().\n            // Swap/AddLiquidity: not available\n            // RemoveLiquidity: available via withdrawAndRemove()\n            // HandleETH: available via withdraw(). SwapQuoter will check if the bridge token is WETH or not.\n            actionMask = ActionLib.mask(Action.RemoveLiquidity, Action.HandleEth);\n        }\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                 INTERNAL: ADD & REMOVE BRIDGE TOKENS                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @dev Adds a bridge token config and its fee structure, if it's not present.\n    /// If a token was added, approves it for spending by SynapseBridge.\n    function _addToken(\n        string memory symbol,\n        address token,\n        TokenType tokenType,\n        address bridgeToken,\n        uint256 bridgeFee,\n        uint256 minFee,\n        uint256 maxFee\n    ) internal override returns (bool wasAdded) {\n        // Add token and its fee structure\n        wasAdded = LocalBridgeConfig._addToken(symbol, token, tokenType, bridgeToken, bridgeFee, minFee, maxFee);\n        if (wasAdded) {\n            // Approve token only if it wasn't previously added\n            // Underlying token should always implement allowance(), approve()\n            if (token == bridgeToken) token.universalApproveInfinity(address(synapseBridge));\n            // Use {setAllowance} for custom wrapper token setups\n        }\n    }\n}\n"
    },
    "contracts/bridge/SynapseBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/ISwap.sol\";\nimport \"./interfaces/IWETH9.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract SynapseBridge is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n    using SafeMath for uint256;\n\n    bytes32 public constant NODEGROUP_ROLE = keccak256(\"NODEGROUP_ROLE\");\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n\n    mapping(address => uint256) private fees;\n\n    uint256 public startBlockNumber;\n    uint256 public constant bridgeVersion = 6;\n    uint256 public chainGasAmount;\n    address payable public WETH_ADDRESS;\n\n    mapping(bytes32 => bool) private kappaMap;\n\n    receive() external payable {}\n\n    function initialize() external initializer {\n        startBlockNumber = block.number;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        __AccessControl_init();\n    }\n\n    function setChainGasAmount(uint256 amount) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        chainGasAmount = amount;\n    }\n\n    function setWethAddress(address payable _wethAddress) external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not admin\");\n        WETH_ADDRESS = _wethAddress;\n    }\n\n    function addKappas(bytes32[] calldata kappas) external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        for (uint256 i = 0; i < kappas.length; ++i) {\n            kappaMap[kappas[i]] = true;\n        }\n    }\n\n    event TokenDeposit(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenRedeem(address indexed to, uint256 chainId, IERC20 token, uint256 amount);\n    event TokenWithdraw(address indexed to, IERC20 token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenMint(address indexed to, IERC20Mintable token, uint256 amount, uint256 fee, bytes32 indexed kappa);\n    event TokenDepositAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenMintAndSwap(\n        address indexed to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n    event TokenRedeemAndSwap(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    );\n    event TokenRedeemAndRemove(\n        address indexed to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    );\n    event TokenWithdrawAndRemove(\n        address indexed to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bool swapSuccess,\n        bytes32 indexed kappa\n    );\n\n    // v2 events\n    event TokenRedeemV2(bytes32 indexed to, uint256 chainId, IERC20 token, uint256 amount);\n\n    // VIEW FUNCTIONS ***/\n    function getFeeBalance(address tokenAddress) external view returns (uint256) {\n        return fees[tokenAddress];\n    }\n\n    function kappaExists(bytes32 kappa) external view returns (bool) {\n        return kappaMap[kappa];\n    }\n\n    // FEE FUNCTIONS ***/\n    /**\n     * * @notice withdraw specified ERC20 token fees to a given address\n     * * @param token ERC20 token in which fees acccumulated to transfer\n     * * @param to Address to send the fees to\n     */\n    function withdrawFees(IERC20 token, address to) external whenNotPaused {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        require(to != address(0), \"Address is 0x000\");\n        if (fees[address(token)] != 0) {\n            token.safeTransfer(to, fees[address(token)]);\n            fees[address(token)] = 0;\n        }\n    }\n\n    // PAUSABLE FUNCTIONS ***/\n    function pause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _pause();\n    }\n\n    function unpause() external {\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \"Not governance\");\n        _unpause();\n    }\n\n    /**\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenDeposit(to, chainId, token, amount);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeem(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function withdraw(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n            IWETH9(WETH_ADDRESS).withdraw(amount.sub(fee));\n            (bool success, ) = to.call{value: amount.sub(fee)}(\"\");\n            require(success, \"ETH_TRANSFER_FAILED\");\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n        } else {\n            emit TokenWithdraw(to, token, amount, fee, kappa);\n            token.safeTransfer(to, amount.sub(fee));\n        }\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.\n     * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param kappa kappa\n     **/\n    function mint(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        emit TokenMint(to, token, amount.sub(fee), fee, kappa);\n        token.mint(address(this), amount);\n        IERC20(token).safeTransfer(to, amount.sub(fee));\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n    }\n\n    /**\n     * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenDepositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemAndRemove(to, chainId, token, amount, swapTokenIndex, swapMinAmount, swapDeadline);\n        token.burnFrom(msg.sender, amount);\n    }\n\n    /**\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\n     * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\n     * @param to address on other chain to redeem underlying assets to\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param tokenIndexFrom Index of the SynERC20 asset in the pool\n     * @param tokenIndexTo Index of the desired final asset\n     * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\n     * @param deadline Epoch time of the deadline that the swap is allowed to be executed.\n     * @param kappa kappa\n     **/\n    function mintAndSwap(\n        address payable to,\n        IERC20Mintable token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // Transfer gas airdrop\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\n            to.call.value(chainGasAmount)(\"\");\n        }\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateSwap(tokenIndexFrom, tokenIndexTo, amount.sub(fee));\n\n        if (expectedOutput >= minDy) {\n            // proceed with swap\n            token.mint(address(this), amount);\n            token.safeIncreaseAllowance(address(pool), amount);\n            try ISwap(pool).swap(tokenIndexFrom, tokenIndexTo, amount.sub(fee), minDy, deadline) returns (\n                uint256 finalSwappedAmount\n            ) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);\n                if (address(swappedTokenTo) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\n                    IWETH9(WETH_ADDRESS).withdraw(finalSwappedAmount);\n                    (bool success, ) = to.call{value: finalSwappedAmount}(\"\");\n                    require(success, \"ETH_TRANSFER_FAILED\");\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                } else {\n                    swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                    emit TokenMintAndSwap(\n                        to,\n                        token,\n                        finalSwappedAmount,\n                        fee,\n                        tokenIndexFrom,\n                        tokenIndexTo,\n                        minDy,\n                        deadline,\n                        true,\n                        kappa\n                    );\n                }\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenMintAndSwap(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    tokenIndexFrom,\n                    tokenIndexTo,\n                    minDy,\n                    deadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.mint(address(this), amount);\n            IERC20(token).safeTransfer(to, amount.sub(fee));\n            emit TokenMintAndSwap(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                tokenIndexFrom,\n                tokenIndexTo,\n                minDy,\n                deadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    /**\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\n     * @param to address on chain to send underlying assets to\n     * @param token ERC20 compatible token to withdraw from the bridge\n     * @param amount Amount in native token decimals to withdraw\n     * @param fee Amount in native token decimals to save to the contract as fees\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     * @param kappa kappa\n     **/\n    function withdrawAndRemove(\n        address to,\n        IERC20 token,\n        uint256 amount,\n        uint256 fee,\n        ISwap pool,\n        uint8 swapTokenIndex,\n        uint256 swapMinAmount,\n        uint256 swapDeadline,\n        bytes32 kappa\n    ) external nonReentrant whenNotPaused {\n        require(hasRole(NODEGROUP_ROLE, msg.sender), \"Caller is not a node group\");\n        require(amount > fee, \"Amount must be greater than fee\");\n        require(!kappaMap[kappa], \"Kappa is already present\");\n        kappaMap[kappa] = true;\n        fees[address(token)] = fees[address(token)].add(fee);\n        // first check to make sure more will be given than min amount required\n        uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(amount.sub(fee), swapTokenIndex);\n\n        if (expectedOutput >= swapMinAmount) {\n            token.safeIncreaseAllowance(address(pool), amount.sub(fee));\n            try\n                ISwap(pool).removeLiquidityOneToken(amount.sub(fee), swapTokenIndex, swapMinAmount, swapDeadline)\n            returns (uint256 finalSwappedAmount) {\n                // Swap succeeded, transfer swapped asset\n                IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);\n                swappedTokenTo.safeTransfer(to, finalSwappedAmount);\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    finalSwappedAmount,\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    true,\n                    kappa\n                );\n            } catch {\n                IERC20(token).safeTransfer(to, amount.sub(fee));\n                emit TokenWithdrawAndRemove(\n                    to,\n                    token,\n                    amount.sub(fee),\n                    fee,\n                    swapTokenIndex,\n                    swapMinAmount,\n                    swapDeadline,\n                    false,\n                    kappa\n                );\n            }\n        } else {\n            token.safeTransfer(to, amount.sub(fee));\n            emit TokenWithdrawAndRemove(\n                to,\n                token,\n                amount.sub(fee),\n                fee,\n                swapTokenIndex,\n                swapMinAmount,\n                swapDeadline,\n                false,\n                kappa\n            );\n        }\n    }\n\n    // BRIDGE FUNCTIONS TO HANDLE DIFF ADDRESSES\n    /**\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemV2(\n        bytes32 to,\n        uint256 chainId,\n        ERC20Burnable token,\n        uint256 amount\n    ) external nonReentrant whenNotPaused {\n        emit TokenRedeemV2(to, chainId, token, amount);\n        token.burnFrom(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/bridge/SynapseERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\ncontract SynapseERC20 is\n    Initializable,\n    ContextUpgradeable,\n    AccessControlUpgradeable,\n    ERC20BurnableUpgradeable,\n    ERC20PermitUpgradeable\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @notice Initializes this ERC20 contract with the given parameters.\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param decimals Token name\n     * @param owner admin address to be initialized with\n     */\n    function initialize(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address owner\n    ) external initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __ERC20Burnable_init_unchained();\n        _setupDecimals(decimals);\n        __ERC20Permit_init(name);\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\n    }\n\n    function mint(address to, uint256 amount) external {\n        require(hasRole(MINTER_ROLE, msg.sender), \"Not a minter\");\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/bridge/SynapseERC20DeterministicFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./interfaces/ISynapseERC20.sol\";\n\ncontract SynapseERC20DeterministicFactory is Ownable {\n    constructor(address deployer) public Ownable() {\n        transferOwnership(deployer);\n    }\n\n    event SynapseERC20Created(address contractAddress);\n\n    /**\n     * @notice Deploys a new SynapseERC20 token\n     * @param synapseERC20Address address of the synapseERC20Address contract to initialize with\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param decimals Token name\n     * @param owner admin address to be initialized with\n     * @return synERC20Clone Address of the newest SynapseERC20 token created\n     **/\n    function deploy(\n        address synapseERC20Address,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address owner\n    ) external returns (address synERC20Clone) {\n        synERC20Clone = Clones.clone(synapseERC20Address);\n        _initializeToken(synERC20Clone, name, symbol, decimals, owner);\n    }\n\n    /**\n     * @notice Deploys a new SynapseERC20 token\n     * @dev Use the same salt for the same token on different chains to get the same deployment address.\n     *      Requires having SynapseERC20Factory deployed at the same address on different chains as well.\n     *\n     * NOTE: this function has onlyOwner modifier to prevent bad actors from taking a token's address on another chain\n     *\n     * @param synapseERC20Address address of the synapseERC20Address contract to initialize with\n     * @param salt Salt for creating a clone\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param decimals Token name\n     * @param owner admin address to be initialized with\n     * @return synERC20Clone Address of the newest SynapseERC20 token created\n     **/\n    function deployDeterministic(\n        address synapseERC20Address,\n        bytes32 salt,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address owner\n    ) external onlyOwner returns (address synERC20Clone) {\n        synERC20Clone = Clones.cloneDeterministic(synapseERC20Address, salt);\n        _initializeToken(synERC20Clone, name, symbol, decimals, owner);\n    }\n\n    function predictDeterministicAddress(address synapseERC20Address, bytes32 salt) external view returns (address) {\n        return Clones.predictDeterministicAddress(synapseERC20Address, salt);\n    }\n\n    function _initializeToken(\n        address synERC20Clone,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address owner\n    ) internal {\n        ISynapseERC20(synERC20Clone).initialize(name, symbol, decimals, owner);\n        emit SynapseERC20Created(synERC20Clone);\n    }\n}\n"
    },
    "contracts/bridge/SynapseERC20Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./interfaces/ISynapseERC20.sol\";\n\ncontract SynapseERC20Factory {\n    constructor() public {}\n\n    event SynapseERC20Created(address contractAddress);\n\n    /**\n     * @notice Deploys a new node\n     * @param synapseERC20Address address of the synapseERC20Address contract to initialize with\n     * @param name Token name\n     * @param symbol Token symbol\n     * @param decimals Token name\n     * @param owner admin address to be initialized with\n     * @return Address of the newest node management contract created\n     **/\n    function deploy(\n        address synapseERC20Address,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address owner\n    ) external returns (address) {\n        address synERC20Clone = Clones.clone(synapseERC20Address);\n        ISynapseERC20(synERC20Clone).initialize(name, symbol, decimals, owner);\n\n        emit SynapseERC20Created(synERC20Clone);\n\n        return synERC20Clone;\n    }\n}\n"
    },
    "contracts/bridge/SynapseERC677.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./SynapseERC20.sol\";\n\ninterface IERC677Receiver {\n    function onTokenTransfer(\n        address _sender,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n}\n\ncontract SynapseERC677 is SynapseERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    /**\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\n     * Note: data will not be passed to the recipient, if this was called from the recipient's constructor.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     * @param _data The extra data to be passed to the receiving contract.\n     */\n    function transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bool success) {\n        super.transfer(_to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        if (_isContract(_to)) {\n            // Fallback will NOT be triggered, if this is called from `_to` constructor\n            _contractFallback(_to, _value, _data);\n        }\n        return true;\n    }\n\n    // PRIVATE\n\n    function _contractFallback(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) private {\n        IERC677Receiver(_to).onTokenTransfer(msg.sender, _value, _data);\n    }\n\n    function _isContract(address _addr) private view returns (bool hasCode) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n        uint256 length;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n}\n"
    },
    "contracts/bridge/testing/NodeEnv.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../utils/EnumerableStringMap.sol\";\n\n/**\n * @title NodeEnv contract\n * @author Synapse Authors\n * @notice This contract implements a key-value store for storing variables on which synapse nodes must coordinate\n * methods are purposely arbitrary to allow these fields to be defined in synapse improvement proposals.\n * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.\n **/\ncontract NodeEnv is AccessControl {\n    using EnumerableStringMap for EnumerableStringMap.StringToStringMap;\n    // BRIDGEMANAGER_ROLE owns the bridge. They are the only user that can call setters on this contract\n    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256(\"BRIDGEMANAGER_ROLE\");\n    // _config stores the config\n    EnumerableStringMap.StringToStringMap private _config; // key is tokenAddress,chainID\n\n    // ConfigUpdate is emitted when the config is updated by the user\n    event ConfigUpdate(string key);\n\n    constructor() public {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(BRIDGEMANAGER_ROLE, msg.sender);\n    }\n\n    /**\n     * @notice get the length of the config\n     *\n     * @dev this is useful for enumerating through all keys in the env\n     */\n    function keyCount() external view returns (uint256) {\n        return _config.length();\n    }\n\n    /**\n     * @notice gets the key/value pair by it's index\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function keyValueByIndex(uint256 index) external view returns (string memory, string memory) {\n        return _config.at(index);\n    }\n\n    /**\n     * @notice gets the value associated with the key\n     */\n    function get(string calldata _key) external view returns (string memory) {\n        string memory key = _key;\n        return _config.get(key);\n    }\n\n    /**\n     * @notice sets the key\n     *\n     * @dev caller must have bridge manager role\n     */\n    function set(string calldata _key, string calldata _value) external returns (bool) {\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender), \"Caller is not Bridge Manager\");\n        string memory key = _key;\n        string memory value = _value;\n\n        return _config.set(key, value);\n    }\n}\n"
    },
    "contracts/bridge/testing/SynapseToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/drafts/ERC20Permit.sol\";\n\ncontract Synapse is ERC20, ERC20Burnable, AccessControl, ERC20Permit {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() public ERC20(\"Synapse\", \"SYN\") ERC20Permit(\"Synapse\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MINTER_ROLE, msg.sender);\n    }\n\n    function mint(address to, uint256 amount) external {\n        require(hasRole(MINTER_ROLE, msg.sender));\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/bridge/utils/AddressArrayUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nlibrary AddressArrayUtils {\n    function contains(address[] memory self, address _address) internal pure returns (bool) {\n        for (uint256 i = 0; i < self.length; i++) {\n            if (_address == self[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/bridge/utils/BridgeConfigV3Lens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {LocalBridgeConfig} from \"../router/LocalBridgeConfig.sol\";\nimport {BridgeConfigV3} from \"../BridgeConfigV3.sol\";\n\ninterface IMulticall3 {\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n}\n\n/**\n * @notice Contract to introspect BridgeConfigV3, which is deployed on Mainnet.\n * A test or a script contract could inherit from BridgeConfigV3Lens in order to\n * batch fetch information about the bridge tokens.\n */\ncontract BridgeConfigV3Lens {\n    bytes1 private constant ZERO = bytes1(\"0\");\n    bytes1 private constant NINE = bytes1(\"9\");\n    bytes1 private constant A_LOWER = bytes1(\"a\");\n    bytes1 private constant A_UPPER = bytes1(\"A\");\n    bytes1 private constant F_LOWER = bytes1(\"f\");\n    bytes1 private constant F_UPPER = bytes1(\"F\");\n\n    /// @dev Constants for a special case: Avalanche wrapper token for GMX\n    uint256 private constant CHAIN_ID_AVA = 43114;\n    address private constant GMX = 0x62edc0692BD897D2295872a9FFCac5425011c661;\n    address private constant GMX_WRAPPER = 0x20A9DC684B4d0407EF8C9A302BEAaA18ee15F656;\n\n    /// @dev BridgeConfig deployment on Ethereum Mainnet\n    BridgeConfigV3 internal constant BRIDGE_CONFIG = BridgeConfigV3(0x5217c83ca75559B1f8a8803824E5b7ac233A12a1);\n    /// @dev Multicall3 deployment on Ethereum Mainnet (and everywhere else).\n    IMulticall3 internal constant MULTI_CALL = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n\n    /// @notice Returns a list of supported bridge tokens and their liquidity pools for a given chain.\n    function getChainConfig(uint256 chainId)\n        public\n        returns (LocalBridgeConfig.BridgeTokenConfig[] memory tokens, address[] memory pools)\n    {\n        tokens = _getChainTokens(chainId);\n        pools = _getChainPools(chainId, tokens);\n    }\n\n    /// @notice Returns address value for a string containing 0x prefixed address.\n    function stringToAddress(string memory str) public pure returns (address addr) {\n        bytes memory bStr = bytes(str);\n        uint256 length = bStr.length;\n        require(length == 42, \"Not a 0x address\");\n        uint256 val = 0;\n        for (uint256 i = 0; i < 40; ++i) {\n            // Shift left 4 bits and apply 4 bits derived from the string character\n            val <<= 4;\n            val = val | _charToInt(bStr[2 + i]);\n        }\n        addr = address(uint160(val));\n    }\n\n    /// @dev Returns all bridge tokens supported for a given chain.\n    function _getChainTokens(uint256 chainId) internal returns (LocalBridgeConfig.BridgeTokenConfig[] memory tokens) {\n        string[] memory ids = BRIDGE_CONFIG.getAllTokenIDs();\n        uint256 amount = ids.length;\n        // Allocate memory for all token IDs, even though some of them are not supported on given chain\n        tokens = new LocalBridgeConfig.BridgeTokenConfig[](amount);\n        // Form a multicall query\n        IMulticall3.Call3[] memory calls = new IMulticall3.Call3[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            calls[i] = IMulticall3.Call3({\n                target: address(BRIDGE_CONFIG),\n                allowFailure: false,\n                callData: abi.encodeWithSelector(BRIDGE_CONFIG.getTokenByID.selector, ids[i], chainId)\n            });\n        }\n        IMulticall3.Result[] memory data = MULTI_CALL.aggregate3(calls);\n        uint256 tokensFound = 0;\n        for (uint256 i = 0; i < amount; ++i) {\n            require(data[i].success, \"Multicall failed\");\n            BridgeConfigV3.Token memory token = abi.decode(data[i].returnData, (BridgeConfigV3.Token));\n            if (bytes(token.tokenAddress).length == 0) continue;\n            (address tokenAddress, address bridgeToken) = _decodeStringAddress(chainId, token.tokenAddress);\n            if (tokenAddress == address(0)) continue;\n            tokens[tokensFound++] = LocalBridgeConfig.BridgeTokenConfig({\n                id: ids[i],\n                token: tokenAddress,\n                decimals: token.tokenDecimals,\n                tokenType: token.isUnderlying\n                    ? LocalBridgeConfig.TokenType.Deposit\n                    : LocalBridgeConfig.TokenType.Redeem,\n                bridgeToken: bridgeToken,\n                bridgeFee: token.swapFee,\n                minFee: token.minSwapFee,\n                maxFee: token.maxSwapFee\n            });\n        }\n        // Shrink array by writing a smaller length directly in memory\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(tokens, tokensFound)\n        }\n        require(tokens.length == tokensFound, \"Assembly magic did't work\");\n    }\n\n    function _decodeStringAddress(uint256 chainId, string memory str)\n        internal\n        pure\n        returns (address tokenAddress, address bridgeToken)\n    {\n        bridgeToken = stringToAddress(str);\n        if (chainId == CHAIN_ID_AVA && bridgeToken == GMX_WRAPPER) {\n            // Special case for GMX on Avalanche\n            tokenAddress = GMX;\n        } else {\n            // Literally every other token doesn't need a wrapper\n            tokenAddress = bridgeToken;\n        }\n    }\n\n    /// @dev Returns all liquidity pools for destination swap on a given chain.\n    function _getChainPools(uint256 chainId, LocalBridgeConfig.BridgeTokenConfig[] memory tokens)\n        internal\n        returns (address[] memory pools)\n    {\n        uint256 amount = tokens.length;\n        // Allocate memory for all tokens, even though some of them don't require a liquidity pool\n        pools = new address[](amount);\n        // Form a multicall query\n        IMulticall3.Call3[] memory calls = new IMulticall3.Call3[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            calls[i] = IMulticall3.Call3({\n                target: address(BRIDGE_CONFIG),\n                allowFailure: false,\n                callData: abi.encodeWithSelector(BRIDGE_CONFIG.getPoolConfig.selector, tokens[i].bridgeToken, chainId)\n            });\n        }\n        IMulticall3.Result[] memory data = MULTI_CALL.aggregate3(calls);\n        uint256 poolsFound = 0;\n        for (uint256 i = 0; i < amount; ++i) {\n            require(data[i].success, \"Multicall failed\");\n            BridgeConfigV3.Pool memory pool = abi.decode(data[i].returnData, (BridgeConfigV3.Pool));\n            if (pool.poolAddress == address(0)) continue;\n            pools[poolsFound++] = pool.poolAddress;\n        }\n        // Shrink array by writing a smaller length directly in memory\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(pools, poolsFound)\n        }\n        require(pools.length == poolsFound, \"Assembly magic did't work\");\n    }\n\n    /// @dev Returns integer value denoted by a character (1 for \"1\", 15 for \"F\" or \"f\").\n    function _charToInt(bytes1 b) internal pure returns (uint8 val) {\n        if (b >= ZERO && b <= NINE) {\n            // This never underflows\n            val = uint8(b) - uint8(ZERO);\n        } else if (b >= A_LOWER && b <= F_LOWER) {\n            // This never underflows; A = 10\n            val = uint8(b) - uint8(A_LOWER) + 10;\n        } else if (b >= A_UPPER && b <= F_UPPER) {\n            // This never underflows; A = 10\n            val = uint8(b) - uint8(A_UPPER) + 10;\n        }\n    }\n}\n"
    },
    "contracts/bridge/utils/EnumerableStringMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\n\n/**\n * @title EnumerableStringMap\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * this isn't a terribly gas efficient implementation because it emphasizes usability over gas efficiency\n * by allowing arbitrary length string memorys. If Gettetrs/Setters are going to be used frequently in contracts\n * consider using the OpenZeppeling Bytes32 implementation\n *\n * this also differs from the OpenZeppelin implementation by keccac256 hashing the string memorys\n * so we can use enumerable bytes32 set\n */\nlibrary EnumerableStringMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys as a set\n        EnumerableSet.Bytes32Set _keys;\n        // Mapping of keys to resulting values to allow key lookup in the set\n        mapping(bytes32 => string) _hashKeyMap;\n        // values\n        mapping(bytes32 => string) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        string memory key,\n        string memory value\n    ) private returns (bool) {\n        bytes32 keyHash = keccak256(abi.encodePacked(key));\n        map._values[keyHash] = value;\n        map._hashKeyMap[keyHash] = key;\n        return map._keys.add(keyHash);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 keyHash) private returns (bool) {\n        delete map._values[keyHash];\n        delete map._hashKeyMap[keyHash];\n        return map._keys.remove(keyHash);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 keyHash) private view returns (bool) {\n        return map._keys.contains(keyHash);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (string memory, string memory) {\n        bytes32 keyHash = map._keys.at(index);\n        return (map._hashKeyMap[keyHash], map._values[keyHash]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 keyHash) private view returns (bool, string memory) {\n        string memory value = map._values[keyHash];\n        if (keccak256(bytes(value)) == keccak256(bytes(\"\"))) {\n            return (_contains(map, keyHash), \"\");\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 keyHash) private view returns (string memory) {\n        string memory value = map._values[keyHash];\n        require(_contains(map, keyHash), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    // StringToStringMap\n    struct StringToStringMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        StringToStringMap storage map,\n        string memory key,\n        string memory value\n    ) internal returns (bool) {\n        return _set(map._inner, key, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(StringToStringMap storage map, string memory key) internal returns (bool) {\n        return _remove(map._inner, keccak256(abi.encodePacked(key)));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(StringToStringMap storage map, string memory key) internal view returns (bool) {\n        return _contains(map._inner, keccak256(abi.encodePacked(key)));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(StringToStringMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(StringToStringMap storage map, uint256 index) internal view returns (string memory, string memory) {\n        return _at(map._inner, index);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(StringToStringMap storage map, uint256 key) internal view returns (bool, string memory) {\n        (bool success, string memory value) = _tryGet(map._inner, bytes32(key));\n        return (success, value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(StringToStringMap storage map, string memory key) internal view returns (string memory) {\n        return _get(map._inner, keccak256(abi.encodePacked(key)));\n    }\n}\n"
    },
    "contracts/bridge/utils/MulticallView.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @notice Multicall utility for view/pure functions. Inspired by Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MulticallView {\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few static calls to this contract into one multicall.\n    /// Any of the calls could revert without having impact on other calls. That includes the scenario,\n    /// where a data for state modifying call was supplied, which would lead to one of the calls being reverted.\n    function multicallView(bytes[] memory data) external view returns (Result[] memory callResults) {\n        uint256 amount = data.length;\n        callResults = new Result[](amount);\n        for (uint256 i = 0; i < amount; ++i) {\n            // We perform a static call to ourselves here. This will record `success` as false,\n            // should the static call be reverted. The other calls will still be performed regardless.\n            // Note: `success` will be set to false, if data for state modifying call was supplied.\n            // No data will be modified, as this is a view function.\n            (callResults[i].success, callResults[i].returnData) = address(this).staticcall(data[i]);\n        }\n    }\n}\n"
    },
    "contracts/bridge/wrappers/AvaxJewelMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ISynapseBridge.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract AvaxJewelMigration is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n\n    ISynapseBridge constant synapseBridge = ISynapseBridge(0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE);\n    // MULTICHAIN JEWEL\n    IERC20 constant legacyToken = IERC20(0x4f60a160D8C2DDdaAfe16FCC57566dB84D674BD6);\n    // SYNAPSE JEWEL\n    IERC20 constant newToken = IERC20(0x997Ddaa07d716995DE90577C123Db411584E5E46);\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor() public {\n        newToken.safeApprove(address(synapseBridge), MAX_UINT256);\n    }\n\n    function migrate(uint256 amount) public {\n        legacyToken.safeTransferFrom(msg.sender, address(this), amount);\n        IERC20Mintable(address(newToken)).mint(msg.sender, amount);\n    }\n\n    function migrateAndBridge(\n        uint256 amount,\n        address to,\n        uint256 chainId\n    ) external {\n        migrate(amount);\n        synapseBridge.redeem(to, chainId, newToken, amount);\n    }\n\n    function redeemLegacy() external onlyOwner {\n        uint256 legacyBalance = legacyToken.balanceOf(address(this));\n        legacyToken.safeTransfer(owner(), legacyBalance);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/AvaxJewelMigrationV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ISynapseBridge.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract AvaxJewelMigrationV2 is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n\n    ISynapseBridge public constant SYNAPSE_BRIDGE = ISynapseBridge(0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE);\n    // MULTICHAIN JEWEL\n    IERC20 public constant LEGACY_TOKEN = IERC20(0x4f60a160D8C2DDdaAfe16FCC57566dB84D674BD6);\n    // SYNAPSE JEWEL\n    IERC20Mintable public constant NEW_TOKEN = IERC20Mintable(0x997Ddaa07d716995DE90577C123Db411584E5E46);\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    uint256 private constant HARMONY_ID = 1666600000;\n\n    constructor() public {\n        NEW_TOKEN.safeApprove(address(SYNAPSE_BRIDGE), MAX_UINT256);\n    }\n\n    function migrate(uint256 amount) external {\n        _migrate(amount, msg.sender);\n    }\n\n    function migrateAndBridge(\n        uint256 amount,\n        address to,\n        uint256 chainId\n    ) external {\n        // First, mint new tokens to this contract, as Bridge burns tokens\n        // from msg.sender, which would be AvaxJewelMigration\n        _migrate(amount, address(this));\n        // Initiate bridging and specify `to` as receiver on destination chain\n        if (chainId == HARMONY_ID) {\n            SYNAPSE_BRIDGE.redeemAndSwap(\n                to,\n                chainId,\n                NEW_TOKEN,\n                amount,\n                1, // indexFrom\n                0, // indexTo\n                0, // minDy\n                type(uint256).max // deadline\n            );\n        } else {\n            SYNAPSE_BRIDGE.redeem(to, chainId, NEW_TOKEN, amount);\n        }\n    }\n\n    /// @notice Pull old tokens from user and mint new ones to account\n    function _migrate(uint256 amount, address account) internal {\n        require(amount != 0, \"Amount must be greater than zero\");\n        LEGACY_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\n        NEW_TOKEN.mint(account, amount);\n    }\n\n    function redeemLegacy() external onlyOwner {\n        uint256 legacyBalance = LEGACY_TOKEN.balanceOf(address(this));\n        LEGACY_TOKEN.safeTransfer(owner(), legacyBalance);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/GMXWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\npragma solidity 0.6.12;\n\ninterface IGMX {\n    function burn(address _account, uint256 _amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function mint(address _account, uint256 _amount) external;\n}\n\ncontract GMXWrapper {\n    using SafeMath for uint256;\n\n    address public constant gmx = 0x62edc0692BD897D2295872a9FFCac5425011c661;\n    address public constant bridge = 0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE;\n\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\n        require(msg.sender == bridge);\n        _transfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    function _transfer(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) private {\n        require(_sender != address(0), \"BaseToken: transfer from the zero address\");\n        require(_recipient != address(0), \"BaseToken: transfer to the zero address\");\n        IGMX(gmx).burn(_sender, _amount);\n        IGMX(gmx).mint(_recipient, _amount);\n    }\n\n    function mint(address _addr, uint256 _amount) external {\n        require(msg.sender == bridge);\n        uint256 preMint = IGMX(gmx).balanceOf(_addr);\n        IGMX(gmx).mint(_addr, _amount);\n        uint256 postMint = IGMX(gmx).balanceOf(_addr);\n        require(preMint.add(_amount) == postMint, \"Mint incomplete\");\n    }\n\n    function burnFrom(address _addr, uint256 _amount) external {\n        require(msg.sender == bridge);\n        uint256 preBurn = IGMX(gmx).balanceOf(_addr);\n        IGMX(gmx).burn(_addr, _amount);\n        uint256 postBurn = IGMX(gmx).balanceOf(_addr);\n        require(postBurn.add(_amount) == preBurn, \"Burn incomplete\");\n    }\n}\n"
    },
    "contracts/bridge/wrappers/HarmonyBridgeZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"../interfaces/IWETH9.sol\";\n\ninterface IFrax {\n    function exchangeCanonicalForOld(address bridge_token_address, uint256 token_amount) external returns (uint256);\n}\n\ncontract HarmonyBridgeZap {\n    using SafeERC20 for IERC20;\n\n    ISynapseBridge synapseBridge;\n    address payable public immutable WETH_ADDRESS;\n    IFrax private constant CANOLICAL_FRAX = IFrax(0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200);\n    IERC20 private constant SYN_FRAX = IERC20(0x1852F70512298d56e9c8FDd905e02581E04ddb2a);\n\n    mapping(address => address) public swapMap;\n    mapping(address => IERC20[]) public swapTokensMap;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor(\n        address payable _wethAddress,\n        address _swapOne,\n        address tokenOne,\n        address _swapTwo,\n        address tokenTwo,\n        address _swapThree,\n        address tokenThree,\n        address _swapFour,\n        address tokenFour,\n        ISynapseBridge _synapseBridge\n    ) public {\n        WETH_ADDRESS = _wethAddress;\n        synapseBridge = _synapseBridge;\n        swapMap[tokenOne] = _swapOne;\n        swapMap[tokenTwo] = _swapTwo;\n        swapMap[tokenThree] = _swapThree;\n        swapMap[tokenFour] = _swapFour;\n\n        if (address(_swapOne) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapOne).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapOne].push(token);\n                        token.safeApprove(address(_swapOne), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n        if (address(_swapTwo) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapTwo).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapTwo].push(token);\n                        token.safeApprove(address(_swapTwo), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n\n        if (address(_swapThree) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapThree).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapThree].push(token);\n                        token.safeApprove(address(_swapThree), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n\n        if (address(_swapFour) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapFour).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapFour].push(token);\n                        token.safeApprove(address(_swapFour), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        return swap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    function swapAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    function swapAndRedeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 swapTokenIndexFrom,\n        uint8 swapTokenIndexTo,\n        uint256 swapMinDy,\n        uint256 swapDeadline\n    ) external {\n        require(address(swapMap[address(token)]) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[swapMap[address(token)]];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = ISwap(swapMap[address(token)]).swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(\n            to,\n            chainId,\n            token,\n            swappedAmount,\n            swapTokenIndexFrom,\n            swapTokenIndexTo,\n            swapMinDy,\n            swapDeadline\n        );\n    }\n\n    function swapAndRedeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, swappedAmount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (address(token) == address(CANOLICAL_FRAX)) {\n            uint256 swappedAmount = CANOLICAL_FRAX.exchangeCanonicalForOld(address(SYN_FRAX), amount);\n            if (SYN_FRAX.allowance(address(this), address(synapseBridge)) < amount) {\n                SYN_FRAX.safeApprove(address(synapseBridge), MAX_UINT256);\n            }\n            synapseBridge.redeem(to, chainId, SYN_FRAX, swappedAmount);\n        } else {\n            if (token.allowance(address(this), address(synapseBridge)) < amount) {\n                token.safeApprove(address(synapseBridge), MAX_UINT256);\n            }\n            synapseBridge.redeem(to, chainId, token, amount);\n        }\n    }\n\n    /**\n     * @notice Wraps SynapseBridge redeemv2() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to redeem into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemv2(\n        bytes32 to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemv2(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.deposit(to, chainId, token, amount);\n    }\n\n    function swapETHAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable {\n        require(WETH_ADDRESS != address(0), \"WETH 0\");\n        require(msg.value > 0 && msg.value == dx, \"INCORRECT MSG VALUE\");\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n\n        // swap\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    /**\n     * @notice Wraps redeemAndSwap on SynapseBridge.sol\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n    }\n\n    /**\n     * @notice Wraps redeemAndRemove on SynapseBridge\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\n     * @param liqTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param liqMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param liqDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, amount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/JewelBridgeSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ninterface IERC20Mintable is IERC20 {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract JewelBridgeSwap {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Mintable;\n    using SafeMath for uint256;\n\n    // Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\n    // getTokenIndex function also relies on this mapping to retrieve token index.\n    mapping(address => uint8) private tokenIndexes;\n    IERC20[2] pooledTokens;\n\n    constructor(IERC20 tokenA, IERC20 mintableTokenB) public {\n        pooledTokens[0] = tokenA;\n        pooledTokens[1] = mintableTokenB;\n        tokenIndexes[address(tokenA)] = 0;\n        tokenIndexes[address(mintableTokenB)] = 1;\n    }\n\n    /**\n     * @notice Return address of the pooled token at given index. Reverts if tokenIndex is out of range.\n     * @param index the index of the token\n     * @return address of the token at given index\n     */\n    function getToken(uint8 index) public view returns (IERC20) {\n        require(index < pooledTokens.length, \"Out of range\");\n        return pooledTokens[index];\n    }\n\n    /**\n     * @notice Return the index of the given token address. Reverts if no matching\n     * token is found.\n     * @param tokenAddress address of the token\n     * @return the index of the given token address\n     */\n    function getTokenIndex(address tokenAddress) public view returns (uint8) {\n        uint8 index = tokenIndexes[tokenAddress];\n        require(address(getToken(index)) == tokenAddress, \"Token does not exist\");\n        return index;\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to swap.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256) {\n        return dx;\n    }\n\n    /**\n     * @notice Swap two tokens using this pool\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param dx the amount of tokens the user wants to swap from\n     * @param minDy the min amount the user would like to receive, or revert.\n     * @param deadline latest timestamp to accept this transaction\n     */\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256) {\n        {\n            IERC20 tokenFrom = pooledTokens[tokenIndexFrom];\n            require(dx <= tokenFrom.balanceOf(msg.sender), \"Cannot swap more than you own\");\n            // Transfer tokens first to see if a fee was charged on transfer\n            uint256 beforeBalance = tokenFrom.balanceOf(address(this));\n            tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\n\n            // Use the actual transferred amount for AMM math\n            dx = tokenFrom.balanceOf(address(this)).sub(beforeBalance);\n        }\n\n        // redeem JEWEL for synJEWEL\n        if (tokenIndexFrom == 0 && tokenIndexTo == 1) {\n            IERC20Mintable(address(pooledTokens[tokenIndexTo])).mint(msg.sender, dx);\n            return dx;\n            // redeem synJEWEL for JEWEL\n        } else if (tokenIndexFrom == 1 && tokenIndexTo == 0) {\n            ERC20Burnable(address(pooledTokens[tokenIndexFrom])).burn(dx);\n            pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dx);\n            return dx;\n        } else {\n            revert(\"Unsupported indexes\");\n        }\n    }\n}\n"
    },
    "contracts/bridge/wrappers/L1BridgeZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"../interfaces/IWETH9.sol\";\n\n/**\n * @title L1BridgeZap\n * @notice This contract is responsible for handling user Zaps into the SynapseBridge contract, through the Synapse Swap contracts. It does so\n * It does so by combining the action of addLiquidity() to the base swap pool, and then calling either deposit() or depositAndSwap() on the bridge.\n * This is done in hopes of automating portions of the bridge user experience to users, while keeping the SynapseBridge contract logic small.\n *\n * @dev This contract should be deployed with a base Swap.sol address and a SynapseBridge.sol address, otherwise, it will not function.\n */\ncontract L1BridgeZap {\n    using SafeERC20 for IERC20;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    ISwap baseSwap;\n    ISynapseBridge synapseBridge;\n    IERC20[] public baseTokens;\n    address payable public immutable WETH_ADDRESS;\n\n    /**\n     * @notice Constructs the contract, approves each token inside of baseSwap to be used by baseSwap (needed for addLiquidity())\n     */\n    constructor(\n        address payable _wethAddress,\n        ISwap _baseSwap,\n        ISynapseBridge _synapseBridge\n    ) public {\n        WETH_ADDRESS = _wethAddress;\n        baseSwap = _baseSwap;\n        synapseBridge = _synapseBridge;\n        IERC20(_wethAddress).safeIncreaseAllowance(address(_synapseBridge), MAX_UINT256);\n        if (address(_baseSwap) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try _baseSwap.getToken(i) returns (IERC20 token) {\n                        baseTokens.push(token);\n                        token.safeIncreaseAllowance(address(_baseSwap), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"baseSwap must have at least 2 tokens\");\n            }\n        }\n    }\n\n    /**\n     * @notice Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function depositETH(\n        address to,\n        uint256 chainId,\n        uint256 amount\n    ) external payable {\n        require(msg.value > 0 && msg.value == amount, \"INCORRECT MSG VALUE\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        synapseBridge.deposit(to, chainId, IERC20(WETH_ADDRESS), amount);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge depositAndSwap() function to make it compatible w/ ETH -> WETH conversions\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositETHAndSwap(\n        address to,\n        uint256 chainId,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable {\n        require(msg.value > 0 && msg.value == amount, \"INCORRECT MSG VALUE\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        synapseBridge.depositAndSwap(\n            to,\n            chainId,\n            IERC20(WETH_ADDRESS),\n            amount,\n            tokenIndexFrom,\n            tokenIndexTo,\n            minDy,\n            deadline\n        );\n    }\n\n    /**\n     * @notice A simple method to calculate prices from deposits or\n     * withdrawals, excluding fees but including slippage. This is\n     * helpful as an input into the various \"min\" parameters on calls\n     * to fight front-running\n     *\n     * @dev This shouldn't be used outside frontends for user estimates.\n     *\n     * @param amounts an array of token amounts to deposit or withdrawal,\n     * corresponding to pooledTokens. The amount should be in each\n     * pooled token's native precision.\n     * @param deposit whether this is a deposit or a withdrawal\n     * @return token amount the user will receive\n     */\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view virtual returns (uint256) {\n        return baseSwap.calculateTokenAmount(amounts, deposit);\n    }\n\n    /**\n     * @notice Calculate the amount of underlying token available to withdraw\n     * when withdrawing via only single token\n     * @param tokenAmount the amount of LP token to burn\n     * @param tokenIndex index of which token will be withdrawn\n     * @return availableTokenAmount calculated amount of underlying token\n     * available to withdraw\n     */\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\n        external\n        view\n        virtual\n        returns (uint256 availableTokenAmount)\n    {\n        return baseSwap.calculateRemoveLiquidityOneToken(tokenAmount, tokenIndex);\n    }\n\n    /**\n     * @notice Combines adding liquidity to the given Swap, and calls deposit() on the bridge using that LP token\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param liquidityAmounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function zapAndDeposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256[] calldata liquidityAmounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external {\n        // add liquidity\n        for (uint256 i = 0; i < baseTokens.length; i++) {\n            if (liquidityAmounts[i] != 0) {\n                baseTokens[i].safeTransferFrom(msg.sender, address(this), liquidityAmounts[i]);\n            }\n        }\n\n        uint256 liqAdded = baseSwap.addLiquidity(liquidityAmounts, minToMint, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.deposit(to, chainId, token, liqAdded);\n    }\n\n    /**\n     * @notice Combines adding liquidity to the given Swap, and calls depositAndSwap() on the bridge using that LP token\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param liquidityAmounts the amounts of each token to add, in their native precision\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\n     * should mint, otherwise revert. Handy for front-running mitigation\n     * @param liqDeadline latest timestamp to accept this transaction\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param swapDeadline latest timestamp to accept this transaction\n     **/\n    function zapAndDepositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256[] calldata liquidityAmounts,\n        uint256 minToMint,\n        uint256 liqDeadline,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 swapDeadline\n    ) external {\n        // add liquidity\n        for (uint256 i = 0; i < baseTokens.length; i++) {\n            if (liquidityAmounts[i] != 0) {\n                baseTokens[i].safeTransferFrom(msg.sender, address(this), liquidityAmounts[i]);\n            }\n        }\n\n        uint256 liqAdded = baseSwap.addLiquidity(liquidityAmounts, minToMint, liqDeadline);\n        // deposit into bridge, bridge attemps to swap into desired asset\n        if (token.allowance(address(this), address(synapseBridge)) < liqAdded) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.depositAndSwap(to, chainId, token, liqAdded, tokenIndexFrom, tokenIndexTo, minDy, swapDeadline);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge deposit() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.deposit(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge depositAndSwap() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.depositAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge redeem() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to redeem into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeem(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice Wraps redeemAndSwap on SynapseBridge.sol\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n    }\n\n    /**\n     * @notice Wraps redeemAndRemove on SynapseBridge\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\n     * @param liqTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param liqMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param liqDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, amount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge redeemv2() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to redeem into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemv2(\n        bytes32 to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemv2(to, chainId, token, amount);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/L2BridgeZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"../interfaces/IWETH9.sol\";\n\ncontract L2BridgeZap {\n    using SafeERC20 for IERC20;\n\n    ISynapseBridge synapseBridge;\n    address payable public immutable WETH_ADDRESS;\n\n    mapping(address => address) public swapMap;\n    mapping(address => IERC20[]) public swapTokensMap;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor(\n        address payable _wethAddress,\n        address _swapOne,\n        address tokenOne,\n        address _swapTwo,\n        address tokenTwo,\n        ISynapseBridge _synapseBridge\n    ) public {\n        WETH_ADDRESS = _wethAddress;\n        synapseBridge = _synapseBridge;\n        swapMap[tokenOne] = _swapOne;\n        swapMap[tokenTwo] = _swapTwo;\n        if (_wethAddress != address(0)) {\n            IERC20(_wethAddress).safeIncreaseAllowance(address(_synapseBridge), MAX_UINT256);\n        }\n        if (address(_swapOne) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapOne).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapOne].push(token);\n                        token.safeApprove(address(_swapOne), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n        if (address(_swapTwo) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapTwo).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapTwo].push(token);\n                        token.safeApprove(address(_swapTwo), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        return swap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    function swapAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    function swapAndRedeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 swapTokenIndexFrom,\n        uint8 swapTokenIndexTo,\n        uint256 swapMinDy,\n        uint256 swapDeadline\n    ) external {\n        require(address(swapMap[address(token)]) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[swapMap[address(token)]];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = ISwap(swapMap[address(token)]).swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(\n            to,\n            chainId,\n            token,\n            swappedAmount,\n            swapTokenIndexFrom,\n            swapTokenIndexTo,\n            swapMinDy,\n            swapDeadline\n        );\n    }\n\n    function swapAndRedeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, swappedAmount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeem(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.deposit(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function depositETH(\n        address to,\n        uint256 chainId,\n        uint256 amount\n    ) external payable {\n        require(msg.value > 0 && msg.value == amount, \"INCORRECT MSG VALUE\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        synapseBridge.deposit(to, chainId, IERC20(WETH_ADDRESS), amount);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge depositAndSwap() function to make it compatible w/ ETH -> WETH conversions\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function depositETHAndSwap(\n        address to,\n        uint256 chainId,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable {\n        require(msg.value > 0 && msg.value == amount, \"INCORRECT MSG VALUE\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        synapseBridge.depositAndSwap(\n            to,\n            chainId,\n            IERC20(WETH_ADDRESS),\n            amount,\n            tokenIndexFrom,\n            tokenIndexTo,\n            minDy,\n            deadline\n        );\n    }\n\n    function swapETHAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable {\n        require(WETH_ADDRESS != address(0), \"WETH 0\");\n        require(msg.value > 0 && msg.value == dx, \"INCORRECT MSG VALUE\");\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n\n        // swap\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    function swapETHAndRedeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 swapTokenIndexFrom,\n        uint8 swapTokenIndexTo,\n        uint256 swapMinDy,\n        uint256 swapDeadline\n    ) external payable {\n        require(WETH_ADDRESS != address(0), \"WETH 0\");\n        require(msg.value > 0 && msg.value == dx, \"INCORRECT MSG VALUE\");\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n\n        // swap\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        synapseBridge.redeemAndSwap(\n            to,\n            chainId,\n            token,\n            swappedAmount,\n            swapTokenIndexFrom,\n            swapTokenIndexTo,\n            swapMinDy,\n            swapDeadline\n        );\n    }\n\n    /**\n     * @notice Wraps redeemAndSwap on SynapseBridge.sol\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n    }\n\n    /**\n     * @notice Wraps redeemAndRemove on SynapseBridge\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\n     * @param liqTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param liqMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param liqDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, amount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge redeemv2() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to redeem into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemv2(\n        bytes32 to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemv2(to, chainId, token, amount);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/MigratorBridgeZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"../interfaces/IERC20Migrator.sol\";\n\ncontract MigratorBridgeZap {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    ISynapseBridge constant synapseBridge = ISynapseBridge(0xd123f70AE324d34A9E76b67a27bf77593bA8749f);\n    IERC20Migrator constant erc20Migrator = IERC20Migrator(0xf0284FB86adA5E4D82555C529677eEA3B2C3E022);\n    IERC20 constant legacyToken = IERC20(0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096);\n    IERC20 constant newToken = IERC20(0xa4080f1778e69467E905B8d6F72f6e441f9e9484);\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor() public {\n        legacyToken.safeApprove(address(erc20Migrator), MAX_UINT256);\n        newToken.safeApprove(address(synapseBridge), MAX_UINT256);\n    }\n\n    function migrate(uint256 amount) external {\n        legacyToken.safeTransferFrom(msg.sender, address(this), amount);\n        erc20Migrator.migrate(amount);\n        newToken.safeTransfer(msg.sender, amount.mul(5).div(2));\n    }\n\n    function migrateAndBridge(\n        uint256 amount,\n        address to,\n        uint256 chainId\n    ) external {\n        legacyToken.safeTransferFrom(msg.sender, address(this), amount);\n        erc20Migrator.migrate(amount);\n        synapseBridge.redeem(to, chainId, newToken, amount.mul(5).div(2));\n    }\n}\n"
    },
    "contracts/bridge/wrappers/MoonriverBridgeZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"../interfaces/ISynapseBridge.sol\";\nimport \"../interfaces/IWETH9.sol\";\n\ninterface IFrax {\n    function exchangeCanonicalForOld(address bridge_token_address, uint256 token_amount) external returns (uint256);\n}\n\ncontract MoonriverBridgeZap {\n    using SafeERC20 for IERC20;\n\n    ISynapseBridge synapseBridge;\n    address payable public immutable WETH_ADDRESS;\n    IFrax private constant CANOLICAL_FRAX = IFrax(0x1A93B23281CC1CDE4C4741353F3064709A16197d);\n    IERC20 private constant SYN_FRAX = IERC20(0xE96AC70907ffF3Efee79f502C985A7A21Bce407d);\n\n    mapping(address => address) public swapMap;\n    mapping(address => IERC20[]) public swapTokensMap;\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n\n    constructor(\n        address payable _wethAddress,\n        address _swapOne,\n        address tokenOne,\n        address _swapTwo,\n        address tokenTwo,\n        ISynapseBridge _synapseBridge\n    ) public {\n        WETH_ADDRESS = _wethAddress;\n        synapseBridge = _synapseBridge;\n        swapMap[tokenOne] = _swapOne;\n        swapMap[tokenTwo] = _swapTwo;\n        IERC20(_wethAddress).safeIncreaseAllowance(address(_synapseBridge), MAX_UINT256);\n        if (address(_swapOne) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapOne).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapOne].push(token);\n                        token.safeApprove(address(_swapOne), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n        if (address(_swapTwo) != address(0)) {\n            {\n                uint8 i;\n                for (; i < 32; i++) {\n                    try ISwap(_swapTwo).getToken(i) returns (IERC20 token) {\n                        swapTokensMap[_swapTwo].push(token);\n                        token.safeApprove(address(_swapTwo), MAX_UINT256);\n                        token.safeApprove(address(synapseBridge), MAX_UINT256);\n                    } catch {\n                        break;\n                    }\n                }\n                require(i > 1, \"swap must have at least 2 tokens\");\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate amount of tokens you receive on swap\n     * @param tokenIndexFrom the token the user wants to sell\n     * @param tokenIndexTo the token the user wants to buy\n     * @param dx the amount of tokens the user wants to sell. If the token charges\n     * a fee on transfers, use the amount that gets transferred after the fee.\n     * @return amount of tokens the user will receive\n     */\n    function calculateSwap(\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view virtual returns (uint256) {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        return swap.calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\n    }\n\n    function swapAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    function swapAndRedeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 swapTokenIndexFrom,\n        uint8 swapTokenIndexTo,\n        uint256 swapMinDy,\n        uint256 swapDeadline\n    ) external {\n        require(address(swapMap[address(token)]) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[swapMap[address(token)]];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = ISwap(swapMap[address(token)]).swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(\n            to,\n            chainId,\n            token,\n            swappedAmount,\n            swapTokenIndexFrom,\n            swapTokenIndexTo,\n            swapMinDy,\n            swapDeadline\n        );\n    }\n\n    function swapAndRedeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IERC20[] memory tokens = swapTokensMap[address(swap)];\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        // swap\n\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        // deposit into bridge, gets nUSD\n        if (token.allowance(address(this), address(synapseBridge)) < swappedAmount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, swappedAmount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (address(token) == address(CANOLICAL_FRAX)) {\n            uint256 swappedAmount = CANOLICAL_FRAX.exchangeCanonicalForOld(address(SYN_FRAX), amount);\n            if (SYN_FRAX.allowance(address(this), address(synapseBridge)) < amount) {\n                SYN_FRAX.safeApprove(address(synapseBridge), MAX_UINT256);\n            }\n            synapseBridge.redeem(to, chainId, SYN_FRAX, swappedAmount);\n        } else {\n            if (token.allowance(address(this), address(synapseBridge)) < amount) {\n                token.safeApprove(address(synapseBridge), MAX_UINT256);\n            }\n            synapseBridge.redeem(to, chainId, token, amount);\n        }\n    }\n\n    /**\n     * @notice Wraps SynapseBridge redeemv2() function\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param token ERC20 compatible token to redeem into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function redeemv2(\n        bytes32 to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemv2(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice wraps SynapseBridge redeem()\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function deposit(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.deposit(to, chainId, token, amount);\n    }\n\n    /**\n     * @notice Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions\n     * @param to address on other chain to bridge assets to\n     * @param chainId which chain to bridge assets onto\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     **/\n    function depositETH(\n        address to,\n        uint256 chainId,\n        uint256 amount\n    ) external payable {\n        require(msg.value > 0 && msg.value == amount, \"INCORRECT MSG VALUE\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n        synapseBridge.deposit(to, chainId, IERC20(WETH_ADDRESS), amount);\n    }\n\n    function swapETHAndRedeem(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable {\n        require(WETH_ADDRESS != address(0), \"WETH 0\");\n        require(msg.value > 0 && msg.value == dx, \"INCORRECT MSG VALUE\");\n        ISwap swap = ISwap(swapMap[address(token)]);\n        require(address(swap) != address(0), \"Swap is 0x00\");\n        IWETH9(WETH_ADDRESS).deposit{value: msg.value}();\n\n        // swap\n        uint256 swappedAmount = swap.swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline);\n        synapseBridge.redeem(to, chainId, token, swappedAmount);\n    }\n\n    /**\n     * @notice Wraps redeemAndSwap on SynapseBridge.sol\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\n     * @param tokenIndexFrom the token the user wants to swap from\n     * @param tokenIndexTo the token the user wants to swap to\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\n     * @param deadline latest timestamp to accept this transaction\n     **/\n    function redeemAndSwap(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 minDy,\n        uint256 deadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndSwap(to, chainId, token, amount, tokenIndexFrom, tokenIndexTo, minDy, deadline);\n    }\n\n    /**\n     * @notice Wraps redeemAndRemove on SynapseBridge\n     * Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)\n     * @param to address on other chain to redeem underlying assets to\n     * @param chainId which underlying chain to bridge assets onto\n     * @param token ERC20 compatible token to deposit into the bridge\n     * @param amount Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\n     * @param liqTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\n     * @param liqMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\n     * @param liqDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\n     **/\n    function redeemAndRemove(\n        address to,\n        uint256 chainId,\n        IERC20 token,\n        uint256 amount,\n        uint8 liqTokenIndex,\n        uint256 liqMinAmount,\n        uint256 liqDeadline\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        if (token.allowance(address(this), address(synapseBridge)) < amount) {\n            token.safeApprove(address(synapseBridge), MAX_UINT256);\n        }\n        synapseBridge.redeemAndRemove(to, chainId, token, amount, liqTokenIndex, liqMinAmount, liqDeadline);\n    }\n}\n"
    },
    "contracts/bridge/wrappers/WKlayUnwrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"../interfaces/IWETH9.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract WKlayUnwrapper is Ownable {\n    using SafeERC20 for IERC20;\n\n    IWETH9 public constant WKLAY = IWETH9(payable(0x5819b6af194A78511c79C85Ea68D2377a7e9335f));\n    address public constant BRIDGE = 0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b;\n\n    /**\n     * @notice Creates a contract to unwrap WKLAY. Sets governance address as the owner.\n     * Governance functions are limited to rescuing the locked tokens/KLAY.\n     */\n    constructor(address governance) public {\n        transferOwnership(governance);\n    }\n\n    // Make sure this contract can receive gas\n    receive() external payable {}\n\n    /**\n     * @notice This contract is not supposed to store any tokens. In the event\n     * of any tokens or KLAY sent to this contract, they could be rescued by the governance.\n     * @dev Can be only called by governance address\n     * @param token     Token to rescue, use address(0) to rescue KLAY\n     */\n    function rescueToken(address token) external onlyOwner {\n        if (token == address(0)) {\n            // Rescue locked ether\n            _transferKLAY(msg.sender, address(this).balance);\n        } else {\n            // Rescue locked token\n            uint256 amount = IERC20(token).balanceOf(address(this));\n            IERC20(token).safeTransfer(msg.sender, amount);\n        }\n    }\n\n    /**\n     * @notice Unwraps WKLAY and transfers it to SynapseBridge\n     * @dev Can be only called by SynapseBridge\n     * @param amount    Transfer amount\n     */\n    function withdraw(uint256 amount) external {\n        require(msg.sender == BRIDGE, \"!bridge\");\n        WKLAY.withdraw(amount);\n        _transferKLAY(msg.sender, amount);\n    }\n\n    /// @notice Transfers KLAY to a specified address\n    function _transferKLAY(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}